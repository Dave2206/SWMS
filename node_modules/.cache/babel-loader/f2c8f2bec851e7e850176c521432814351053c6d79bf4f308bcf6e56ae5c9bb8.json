{"ast":null,"code":"import { ref } from 'vue';\nimport Header from './Header.vue';\nexport default {\n  name: \"ComplainPage\",\n  components: {\n    Header\n  },\n  setup() {\n    const toast = useToast(); // Get Toast instance\n    const subjectOptions = [{\n      label: 'Garbage not picked up',\n      value: 'garbage_not_picked_up'\n    }, {\n      label: 'No garbage pickup truck',\n      value: 'no_garbage_truck'\n    }, {\n      label: 'Request for garbage pickup',\n      value: 'request_pickup'\n    }, {\n      label: 'Too many garbage on the streets',\n      value: 'too_much_garbage'\n    }];\n    const form = ref({\n      subject: null,\n      email: '',\n      address: '',\n      description: '',\n      file: null\n    });\n    const getLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const lat = position.coords.latitude;\n          const lon = position.coords.longitude;\n          fetchAddress(lat, lon);\n        }, error => {\n          console.error(\"Geolocation error:\", error);\n          alert(\"Unable to fetch your location.\");\n        });\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    };\n    const fetchAddress = async (lat, lon) => {\n      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1`);\n      const data = await response.json();\n      if (data && data.address) {\n        const address = `${data.address.road || ''}, ${data.address.city || ''}, ${data.address.country || ''}`;\n        form.value.address = address;\n      }\n    };\n    const submitComplaint = () => {\n      console.log('Complaint submitted:', form.value);\n      // Handle the form submission logic here\n\n      // Show a toast notification on successful submission\n      toast.add({\n        severity: 'success',\n        summary: 'Success',\n        detail: 'Your complaint has been submitted successfully!',\n        life: 3000\n      });\n    };\n    return {\n      subjectOptions,\n      form,\n      submitComplaint,\n      getLocation\n    };\n  }\n};","map":{"version":3,"names":["ref","Header","name","components","setup","toast","useToast","subjectOptions","label","value","form","subject","email","address","description","file","getLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","fetchAddress","error","console","alert","response","fetch","data","json","road","city","country","submitComplaint","log","add","severity","summary","detail","life"],"sources":["C:\\Users\\darle\\solid-waste-management-system\\src\\components\\ComplainPage.vue"],"sourcesContent":["<template>\r\n   <Header />\r\n  <div class=\"complaint-form\">\r\n    <div class=\"form-container\">\r\n      <h2>Submit a Solid Waste Disposal Complaint</h2>\r\n      \r\n      <form @submit.prevent=\"submitComplaint\">\r\n        <!-- Subject Dropdown -->\r\n        <div class=\"p-field\">\r\n          <label for=\"subject\">Subject:</label>\r\n          <Select v-model=\"form.subject\" :options=\"subjectOptions\" optionLabel=\"label\" optionValue=\"value\" placeholder=\"Select Subject\" required class=\"w-full\"/>\r\n        </div>\r\n\r\n        <!-- Email Input -->\r\n        <div class=\"p-field\">\r\n          <label for=\"email\">Email:</label>\r\n          <InputText v-model=\"form.email\" id=\"email\" type=\"email\" placeholder=\"Enter your email\" required class=\"w-full\"/>\r\n        </div>\r\n\r\n        <!-- Address Input (Based on Location) -->\r\n        <div class=\"p-field\">\r\n          <label for=\"address\">Address:</label>\r\n          <InputText v-model=\"form.address\" id=\"address\" type=\"text\" placeholder=\"Fetching address...\" readonly class=\"w-full\"/>\r\n          <Button label=\"Get My Location\" icon=\"pi pi-map-marker\" @click=\"getLocation\" class=\"p-button-text p-button-sm\" />\r\n        </div>\r\n\r\n        <!-- Description Textarea -->\r\n        <div class=\"p-field\">\r\n          <label for=\"description\">Description:</label>\r\n          <Textarea v-model=\"form.description\" id=\"description\" rows=\"5\" placeholder=\"Describe the issue\" required class=\"w-full\"/>\r\n        </div>\r\n\r\n        <!-- File Upload -->\r\n        <div class=\"p-field\">\r\n          <label for=\"file\">Attachment:</label>\r\n          <FileUpload v-model=\"form.file\" name=\"file\" chooseLabel=\"Choose File\" uploadLabel=\"Upload\" class=\"w-full\"/>\r\n        </div>\r\n\r\n        <!-- Submit Button -->\r\n        <Button label=\"Submit Complaint\" type=\"submit\" icon=\"pi pi-send\" class=\"p-button-rounded p-button-success w-full\" />\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport Header from './Header.vue';\r\n\r\nexport default {\r\n  name: \"ComplainPage\",\r\n  components: {\r\n    Header,\r\n  },\r\n  setup() {\r\n    const toast = useToast(); // Get Toast instance\r\n    const subjectOptions = [\r\n      { label: 'Garbage not picked up', value: 'garbage_not_picked_up' },\r\n      { label: 'No garbage pickup truck', value: 'no_garbage_truck' },\r\n      { label: 'Request for garbage pickup', value: 'request_pickup' },\r\n      { label: 'Too many garbage on the streets', value: 'too_much_garbage' }\r\n    ];\r\n\r\n    const form = ref({\r\n      subject: null,\r\n      email: '',\r\n      address: '',\r\n      description: '',\r\n      file: null\r\n    });\r\n\r\n    const getLocation = () => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          const lat = position.coords.latitude;\r\n          const lon = position.coords.longitude;\r\n          fetchAddress(lat, lon);\r\n        }, error => {\r\n          console.error(\"Geolocation error:\", error);\r\n          alert(\"Unable to fetch your location.\");\r\n        });\r\n      } else {\r\n        alert(\"Geolocation is not supported by this browser.\");\r\n      }\r\n    };\r\n\r\n    const fetchAddress = async (lat, lon) => {\r\n      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1`);\r\n      const data = await response.json();\r\n      if (data && data.address) {\r\n        const address = `${data.address.road || ''}, ${data.address.city || ''}, ${data.address.country || ''}`;\r\n        form.value.address = address;\r\n      }\r\n    };\r\n\r\n    const submitComplaint = () => {\r\n      console.log('Complaint submitted:', form.value);\r\n      // Handle the form submission logic here\r\n\r\n      // Show a toast notification on successful submission\r\n      toast.add({ severity: 'success', summary: 'Success', detail: 'Your complaint has been submitted successfully!', life: 3000 });\r\n    };\r\n\r\n    return {\r\n      subjectOptions,\r\n      form,\r\n      submitComplaint,\r\n      getLocation\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.complaint-form {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #f0f4f8;\r\n}\r\n\r\n.form-container {\r\n  background-color: #ffffff;\r\n  padding: 30px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  max-width: 700px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  color: #333;\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.p-field {\r\n  margin-bottom: 1.5em;\r\n}\r\n\r\n.p-field label {\r\n  font-weight: bold;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n}\r\n\r\n.p-button-rounded {\r\n  border-radius: 50px;\r\n}\r\n\r\n.p-button-success {\r\n  background-color: #28a745;\r\n  border: none;\r\n}\r\n\r\n.p-button-success:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .form-container {\r\n    padding: 20px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 20px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AA8CA,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,MAAK,MAAO,cAAc;AAEjC,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIC,QAAQ,CAAC,CAAC,EAAE;IAC1B,MAAMC,cAAa,GAAI,CACrB;MAAEC,KAAK,EAAE,uBAAuB;MAAEC,KAAK,EAAE;IAAwB,CAAC,EAClE;MAAED,KAAK,EAAE,yBAAyB;MAAEC,KAAK,EAAE;IAAmB,CAAC,EAC/D;MAAED,KAAK,EAAE,4BAA4B;MAAEC,KAAK,EAAE;IAAiB,CAAC,EAChE;MAAED,KAAK,EAAE,iCAAiC;MAAEC,KAAK,EAAE;IAAmB,EACvE;IAED,MAAMC,IAAG,GAAIV,GAAG,CAAC;MACfW,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,MAAMC,WAAU,GAAIA,CAAA,KAAM;MACxB,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACC,QAAO,IAAK;UACnD,MAAMC,GAAE,GAAID,QAAQ,CAACE,MAAM,CAACC,QAAQ;UACpC,MAAMC,GAAE,GAAIJ,QAAQ,CAACE,MAAM,CAACG,SAAS;UACrCC,YAAY,CAACL,GAAG,EAAEG,GAAG,CAAC;QACxB,CAAC,EAAEG,KAAI,IAAK;UACVC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;UAC1CE,KAAK,CAAC,gCAAgC,CAAC;QACzC,CAAC,CAAC;MACJ,OAAO;QACLA,KAAK,CAAC,+CAA+C,CAAC;MACxD;IACF,CAAC;IAED,MAAMH,YAAW,GAAI,MAAAA,CAAOL,GAAG,EAAEG,GAAG,KAAK;MACvC,MAAMM,QAAO,GAAI,MAAMC,KAAK,CAAC,+DAA+DV,GAAG,QAAQG,GAAG,mBAAmB,CAAC;MAC9H,MAAMQ,IAAG,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAID,IAAG,IAAKA,IAAI,CAACnB,OAAO,EAAE;QACxB,MAAMA,OAAM,GAAI,GAAGmB,IAAI,CAACnB,OAAO,CAACqB,IAAG,IAAK,EAAE,KAAKF,IAAI,CAACnB,OAAO,CAACsB,IAAG,IAAK,EAAE,KAAKH,IAAI,CAACnB,OAAO,CAACuB,OAAM,IAAK,EAAE,EAAE;QACvG1B,IAAI,CAACD,KAAK,CAACI,OAAM,GAAIA,OAAO;MAC9B;IACF,CAAC;IAED,MAAMwB,eAAc,GAAIA,CAAA,KAAM;MAC5BT,OAAO,CAACU,GAAG,CAAC,sBAAsB,EAAE5B,IAAI,CAACD,KAAK,CAAC;MAC/C;;MAEA;MACAJ,KAAK,CAACkC,GAAG,CAAC;QAAEC,QAAQ,EAAE,SAAS;QAAEC,OAAO,EAAE,SAAS;QAAEC,MAAM,EAAE,iDAAiD;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;IAC/H,CAAC;IAED,OAAO;MACLpC,cAAc;MACdG,IAAI;MACJ2B,eAAe;MACfrB;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}