{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { resolveFieldData, isFunction } from '@primeuix/utils/object';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TreeStyle from 'primevue/tree/style';\nimport { getAttribute, findSingle, find } from '@primeuix/utils/dom';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\nimport { resolveComponent, resolveDirective, openBlock, createElementBlock, mergeProps, createElementVNode, withDirectives, Fragment, createBlock, resolveDynamicComponent, normalizeClass, withCtx, createCommentVNode, withModifiers, createTextVNode, toDisplayString, renderList, renderSlot, createVNode } from 'vue';\nvar script$2 = {\n  name: 'BaseTree',\n  \"extends\": BaseComponent,\n  props: {\n    value: {\n      type: null,\n      \"default\": null\n    },\n    expandedKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    },\n    filter: {\n      type: Boolean,\n      \"default\": false\n    },\n    filterBy: {\n      type: [String, Function],\n      \"default\": 'label'\n    },\n    filterMode: {\n      type: String,\n      \"default\": 'lenient'\n    },\n    filterPlaceholder: {\n      type: String,\n      \"default\": null\n    },\n    filterLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    highlightOnSelect: {\n      type: Boolean,\n      \"default\": false\n    },\n    scrollHeight: {\n      type: String,\n      \"default\": null\n    },\n    level: {\n      type: Number,\n      \"default\": 0\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: TreeStyle,\n  provide: function provide() {\n    return {\n      $pcTree: this,\n      $parentInstance: this\n    };\n  }\n};\nfunction _typeof$2(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$2(o);\n}\nfunction _createForOfIteratorHelper$1(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e) {\n      t && (r = t);\n      var _n = 0,\n        F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          return _n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[_n++]\n          };\n        },\n        e: function e(r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function s() {\n      t = t.call(r);\n    },\n    n: function n() {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function e(r) {\n      u = !0, o = r;\n    },\n    f: function f() {\n      try {\n        a || null == t[\"return\"] || t[\"return\"]();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction ownKeys$2(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) {\n      _defineProperty$2(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$2(e, r, t) {\n  return (r = _toPropertyKey$2(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey$2(t) {\n  var i = _toPrimitive$2(t, \"string\");\n  return \"symbol\" == _typeof$2(i) ? i : i + \"\";\n}\nfunction _toPrimitive$2(t, r) {\n  if (\"object\" != _typeof$2(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof$2(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toConsumableArray$1(r) {\n  return _arrayWithoutHoles$1(r) || _iterableToArray$1(r) || _unsupportedIterableToArray$1(r) || _nonIterableSpread$1();\n}\nfunction _nonIterableSpread$1() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray$1(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray$1(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0;\n  }\n}\nfunction _iterableToArray$1(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles$1(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray$1(r);\n}\nfunction _arrayLikeToArray$1(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script$1 = {\n  name: 'TreeNode',\n  hostName: 'Tree',\n  \"extends\": BaseComponent,\n  emits: ['node-toggle', 'node-click', 'checkbox-change'],\n  props: {\n    node: {\n      type: null,\n      \"default\": null\n    },\n    expandedKeys: {\n      type: null,\n      \"default\": null\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    templates: {\n      type: null,\n      \"default\": null\n    },\n    level: {\n      type: Number,\n      \"default\": null\n    },\n    index: null\n  },\n  nodeTouched: false,\n  toggleClicked: false,\n  mounted: function mounted() {\n    this.setAllNodesTabIndexes();\n  },\n  methods: {\n    toggle: function toggle() {\n      this.$emit('node-toggle', this.node);\n      this.toggleClicked = true;\n    },\n    label: function label(node) {\n      return typeof node.label === 'function' ? node.label() : node.label;\n    },\n    onChildNodeToggle: function onChildNodeToggle(node) {\n      this.$emit('node-toggle', node);\n    },\n    getPTOptions: function getPTOptions(key) {\n      return this.ptm(key, {\n        context: {\n          node: this.node,\n          index: this.index,\n          expanded: this.expanded,\n          selected: this.selected,\n          checked: this.checked,\n          partialChecked: this.partialChecked,\n          leaf: this.leaf\n        }\n      });\n    },\n    onClick: function onClick(event) {\n      if (this.toggleClicked || getAttribute(event.target, '[data-pc-section=\"nodetogglebutton\"]') || getAttribute(event.target.parentElement, '[data-pc-section=\"nodetogglebutton\"]')) {\n        this.toggleClicked = false;\n        return;\n      }\n      if (this.isCheckboxSelectionMode()) {\n        if (this.node.selectable != false) {\n          this.toggleCheckbox();\n        }\n      } else {\n        this.$emit('node-click', {\n          originalEvent: event,\n          nodeTouched: this.nodeTouched,\n          node: this.node\n        });\n      }\n      this.nodeTouched = false;\n    },\n    onChildNodeClick: function onChildNodeClick(event) {\n      this.$emit('node-click', event);\n    },\n    onTouchEnd: function onTouchEnd() {\n      this.nodeTouched = true;\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (!this.isSameNode(event)) return;\n      switch (event.code) {\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n        case 'ArrowDown':\n          this.onArrowDown(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUp(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRight(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeft(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          this.onEnterKey(event);\n          break;\n      }\n    },\n    onArrowDown: function onArrowDown(event) {\n      var nodeElement = event.target.getAttribute('data-pc-section') === 'nodetogglebutton' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n      var listElement = nodeElement.children[1];\n      if (listElement) {\n        this.focusRowChange(nodeElement, listElement.children[0]);\n      } else {\n        if (nodeElement.nextElementSibling) {\n          this.focusRowChange(nodeElement, nodeElement.nextElementSibling);\n        } else {\n          var nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n          if (nextSiblingAncestor) {\n            this.focusRowChange(nodeElement, nextSiblingAncestor);\n          }\n        }\n      }\n      event.preventDefault();\n    },\n    onArrowUp: function onArrowUp(event) {\n      var nodeElement = event.target;\n      if (nodeElement.previousElementSibling) {\n        this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n      } else {\n        var parentNodeElement = this.getParentNodeElement(nodeElement);\n        if (parentNodeElement) {\n          this.focusRowChange(nodeElement, parentNodeElement);\n        }\n      }\n      event.preventDefault();\n    },\n    onArrowRight: function onArrowRight(event) {\n      var _this = this;\n      if (this.leaf || this.expanded) return;\n      event.currentTarget.tabIndex = -1;\n      this.$emit('node-toggle', this.node);\n      this.$nextTick(function () {\n        _this.onArrowDown(event);\n      });\n    },\n    onArrowLeft: function onArrowLeft(event) {\n      var togglerElement = findSingle(event.currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n      if (this.level === 0 && !this.expanded) {\n        return false;\n      }\n      if (this.expanded && !this.leaf) {\n        togglerElement.click();\n        return false;\n      }\n      var target = this.findBeforeClickableNode(event.currentTarget);\n      if (target) {\n        this.focusRowChange(event.currentTarget, target);\n      }\n    },\n    onEnterKey: function onEnterKey(event) {\n      this.setTabIndexForSelectionMode(event, this.nodeTouched);\n      this.onClick(event);\n      event.preventDefault();\n    },\n    onTabKey: function onTabKey() {\n      this.setAllNodesTabIndexes();\n    },\n    setAllNodesTabIndexes: function setAllNodesTabIndexes() {\n      var nodes = find(this.$refs.currentNode.closest('[data-pc-section=\"rootchildren\"]'), '[role=\"treeitem\"]');\n      var hasSelectedNode = _toConsumableArray$1(nodes).some(function (node) {\n        return node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true';\n      });\n      _toConsumableArray$1(nodes).forEach(function (node) {\n        node.tabIndex = -1;\n      });\n      if (hasSelectedNode) {\n        var selectedNodes = _toConsumableArray$1(nodes).filter(function (node) {\n          return node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true';\n        });\n        selectedNodes[0].tabIndex = 0;\n        return;\n      }\n      _toConsumableArray$1(nodes)[0].tabIndex = 0;\n    },\n    setTabIndexForSelectionMode: function setTabIndexForSelectionMode(event, nodeTouched) {\n      if (this.selectionMode !== null) {\n        var elements = _toConsumableArray$1(find(this.$refs.currentNode.parentElement, '[role=\"treeitem\"]'));\n        event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n        if (elements.every(function (element) {\n          return element.tabIndex === -1;\n        })) {\n          elements[0].tabIndex = 0;\n        }\n      }\n    },\n    focusRowChange: function focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n      firstFocusableRow.tabIndex = '-1';\n      currentFocusedRow.tabIndex = '0';\n      this.focusNode(lastVisibleDescendant || currentFocusedRow);\n    },\n    findBeforeClickableNode: function findBeforeClickableNode(node) {\n      var parentListElement = node.closest('ul').closest('li');\n      if (parentListElement) {\n        var prevNodeButton = findSingle(parentListElement, 'button');\n        if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n          return parentListElement;\n        }\n        return this.findBeforeClickableNode(node.previousElementSibling);\n      }\n      return null;\n    },\n    toggleCheckbox: function toggleCheckbox() {\n      var _selectionKeys = this.selectionKeys ? _objectSpread$2({}, this.selectionKeys) : {};\n      var _check = !this.checked;\n      this.propagateDown(this.node, _check, _selectionKeys);\n      this.$emit('checkbox-change', {\n        node: this.node,\n        check: _check,\n        selectionKeys: _selectionKeys\n      });\n    },\n    propagateDown: function propagateDown(node, check, selectionKeys) {\n      if (check && node.selectable != false) selectionKeys[node.key] = {\n        checked: true,\n        partialChecked: false\n      };else delete selectionKeys[node.key];\n      if (node.children && node.children.length) {\n        var _iterator = _createForOfIteratorHelper$1(node.children),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n            this.propagateDown(child, check, selectionKeys);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    },\n    propagateUp: function propagateUp(event) {\n      var check = event.check;\n      var _selectionKeys = _objectSpread$2({}, event.selectionKeys);\n      var checkedChildCount = 0;\n      var childPartialSelected = false;\n      var _iterator2 = _createForOfIteratorHelper$1(this.node.children),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n          if (_selectionKeys[child.key] && _selectionKeys[child.key].checked) checkedChildCount++;else if (_selectionKeys[child.key] && _selectionKeys[child.key].partialChecked) childPartialSelected = true;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (check && checkedChildCount === this.node.children.length) {\n        _selectionKeys[this.node.key] = {\n          checked: true,\n          partialChecked: false\n        };\n      } else {\n        if (!check) {\n          delete _selectionKeys[this.node.key];\n        }\n        if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== this.node.children.length) _selectionKeys[this.node.key] = {\n          checked: false,\n          partialChecked: true\n        };else delete _selectionKeys[this.node.key];\n      }\n      this.$emit('checkbox-change', {\n        node: event.node,\n        check: event.check,\n        selectionKeys: _selectionKeys\n      });\n    },\n    onChildCheckboxChange: function onChildCheckboxChange(event) {\n      this.$emit('checkbox-change', event);\n    },\n    findNextSiblingOfAncestor: function findNextSiblingOfAncestor(nodeElement) {\n      var parentNodeElement = this.getParentNodeElement(nodeElement);\n      if (parentNodeElement) {\n        if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;else return this.findNextSiblingOfAncestor(parentNodeElement);\n      } else {\n        return null;\n      }\n    },\n    findLastVisibleDescendant: function findLastVisibleDescendant(nodeElement) {\n      var childrenListElement = nodeElement.children[1];\n      if (childrenListElement) {\n        var lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n        return this.findLastVisibleDescendant(lastChildElement);\n      } else {\n        return nodeElement;\n      }\n    },\n    getParentNodeElement: function getParentNodeElement(nodeElement) {\n      var parentNodeElement = nodeElement.parentElement.parentElement;\n      return getAttribute(parentNodeElement, 'role') === 'treeitem' ? parentNodeElement : null;\n    },\n    focusNode: function focusNode(element) {\n      element.focus();\n    },\n    isCheckboxSelectionMode: function isCheckboxSelectionMode() {\n      return this.selectionMode === 'checkbox';\n    },\n    isSameNode: function isSameNode(event) {\n      return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n    }\n  },\n  computed: {\n    hasChildren: function hasChildren() {\n      return this.node.children && this.node.children.length > 0;\n    },\n    expanded: function expanded() {\n      return this.expandedKeys && this.expandedKeys[this.node.key] === true;\n    },\n    leaf: function leaf() {\n      return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n    },\n    selectable: function selectable() {\n      return this.node.selectable === false ? false : this.selectionMode != null;\n    },\n    selected: function selected() {\n      return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.node.key] === true : false;\n    },\n    checkboxMode: function checkboxMode() {\n      return this.selectionMode === 'checkbox' && this.node.selectable !== false;\n    },\n    checked: function checked() {\n      return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].checked : false;\n    },\n    partialChecked: function partialChecked() {\n      return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].partialChecked : false;\n    },\n    ariaChecked: function ariaChecked() {\n      return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : undefined;\n    },\n    ariaSelected: function ariaSelected() {\n      return this.checkboxMode ? this.checked : undefined;\n    }\n  },\n  components: {\n    Checkbox: Checkbox,\n    ChevronDownIcon: ChevronDownIcon,\n    ChevronRightIcon: ChevronRightIcon,\n    CheckIcon: CheckIcon,\n    MinusIcon: MinusIcon,\n    SpinnerIcon: SpinnerIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\nvar _hoisted_1$1 = [\"aria-label\", \"aria-selected\", \"aria-expanded\", \"aria-setsize\", \"aria-posinset\", \"aria-level\", \"aria-checked\", \"tabindex\"];\nvar _hoisted_2 = [\"data-p-selected\", \"data-p-selectable\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_Checkbox = resolveComponent(\"Checkbox\");\n  var _component_TreeNode = resolveComponent(\"TreeNode\", true);\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"li\", mergeProps({\n    ref: \"currentNode\",\n    \"class\": _ctx.cx('node'),\n    role: \"treeitem\",\n    \"aria-label\": $options.label($props.node),\n    \"aria-selected\": $options.ariaSelected,\n    \"aria-expanded\": $options.expanded,\n    \"aria-setsize\": $props.node.children ? $props.node.children.length : 0,\n    \"aria-posinset\": $props.index + 1,\n    \"aria-level\": $props.level,\n    \"aria-checked\": $options.ariaChecked,\n    tabindex: $props.index === 0 ? 0 : -1,\n    onKeydown: _cache[4] || (_cache[4] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    })\n  }, $props.level === 1 ? $options.getPTOptions('node') : _ctx.ptm('nodeChildren')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('nodeContent'),\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    }),\n    onTouchend: _cache[3] || (_cache[3] = function () {\n      return $options.onTouchEnd && $options.onTouchEnd.apply($options, arguments);\n    }),\n    style: $props.node.style\n  }, $options.getPTOptions('nodeContent'), {\n    \"data-p-selected\": $options.checkboxMode ? $options.checked : $options.selected,\n    \"data-p-selectable\": $options.selectable\n  }), [withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    type: \"button\",\n    \"class\": _ctx.cx('nodeToggleButton'),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.toggle && $options.toggle.apply($options, arguments);\n    }),\n    tabindex: \"-1\"\n  }, $options.getPTOptions('nodeToggleButton')), [$props.node.loading && $props.loadingMode === 'icon' ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [$props.templates['nodetoggleicon'] || $props.templates['nodetogglericon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['nodetoggleicon'] || $props.templates['nodetogglericon']), {\n    key: 0,\n    node: $props.node,\n    expanded: $options.expanded,\n    \"class\": normalizeClass(_ctx.cx('nodeToggleIcon'))\n  }, null, 8, [\"node\", \"expanded\", \"class\"])) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n    key: 1,\n    spin: \"\",\n    \"class\": _ctx.cx('nodeToggleIcon')\n  }, $options.getPTOptions('nodeToggleIcon')), null, 16, [\"class\"]))], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [$props.templates['nodetoggleicon'] || $props.templates['togglericon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['nodetoggleicon'] || $props.templates['togglericon']), {\n    key: 0,\n    node: $props.node,\n    expanded: $options.expanded,\n    \"class\": normalizeClass(_ctx.cx('nodeToggleIcon'))\n  }, null, 8, [\"node\", \"expanded\", \"class\"])) : $options.expanded ? (openBlock(), createBlock(resolveDynamicComponent($props.node.expandedIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('nodeToggleIcon')\n  }, $options.getPTOptions('nodeToggleIcon')), null, 16, [\"class\"])) : (openBlock(), createBlock(resolveDynamicComponent($props.node.collapsedIcon ? 'span' : 'ChevronRightIcon'), mergeProps({\n    key: 2,\n    \"class\": _ctx.cx('nodeToggleIcon')\n  }, $options.getPTOptions('nodeToggleIcon')), null, 16, [\"class\"]))], 64))], 16)), [[_directive_ripple]]), $options.checkboxMode ? (openBlock(), createBlock(_component_Checkbox, {\n    key: 0,\n    defaultValue: $options.checked,\n    binary: true,\n    indeterminate: $options.partialChecked,\n    \"class\": normalizeClass(_ctx.cx('nodeCheckbox')),\n    tabindex: -1,\n    unstyled: _ctx.unstyled,\n    pt: $options.getPTOptions('pcNodeCheckbox'),\n    \"data-p-partialchecked\": $options.partialChecked\n  }, {\n    icon: withCtx(function (slotProps) {\n      return [$props.templates['checkboxicon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['checkboxicon']), {\n        key: 0,\n        checked: slotProps.checked,\n        partialChecked: $options.partialChecked,\n        \"class\": normalizeClass(slotProps[\"class\"])\n      }, null, 8, [\"checked\", \"partialChecked\", \"class\"])) : createCommentVNode(\"\", true)];\n    }),\n    _: 1\n  }, 8, [\"defaultValue\", \"indeterminate\", \"class\", \"unstyled\", \"pt\", \"data-p-partialchecked\"])) : createCommentVNode(\"\", true), $props.templates['nodeicon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['nodeicon']), mergeProps({\n    key: 1,\n    node: $props.node,\n    \"class\": [_ctx.cx('nodeIcon')]\n  }, $options.getPTOptions('nodeIcon')), null, 16, [\"node\", \"class\"])) : (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 2,\n    \"class\": [_ctx.cx('nodeIcon'), $props.node.icon]\n  }, $options.getPTOptions('nodeIcon')), null, 16)), createElementVNode(\"span\", mergeProps({\n    \"class\": _ctx.cx('nodeLabel')\n  }, $options.getPTOptions('nodeLabel'), {\n    onKeydown: _cache[1] || (_cache[1] = withModifiers(function () {}, [\"stop\"]))\n  }), [$props.templates[$props.node.type] || $props.templates['default'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates[$props.node.type] || $props.templates['default']), {\n    key: 0,\n    node: $props.node,\n    expanded: $options.expanded,\n    selected: $options.checkboxMode ? $options.checked : $options.selected\n  }, null, 8, [\"node\", \"expanded\", \"selected\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [createTextVNode(toDisplayString($options.label($props.node)), 1)], 64))], 16)], 16, _hoisted_2), $options.hasChildren && $options.expanded ? (openBlock(), createElementBlock(\"ul\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('nodeChildren'),\n    role: \"group\"\n  }, _ctx.ptm('nodeChildren')), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.node.children, function (childNode) {\n    return openBlock(), createBlock(_component_TreeNode, {\n      key: childNode.key,\n      node: childNode,\n      templates: $props.templates,\n      level: $props.level + 1,\n      loadingMode: $props.loadingMode,\n      expandedKeys: $props.expandedKeys,\n      onNodeToggle: $options.onChildNodeToggle,\n      onNodeClick: $options.onChildNodeClick,\n      selectionMode: $props.selectionMode,\n      selectionKeys: $props.selectionKeys,\n      onCheckboxChange: $options.propagateUp,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"node\", \"templates\", \"level\", \"loadingMode\", \"expandedKeys\", \"onNodeToggle\", \"onNodeClick\", \"selectionMode\", \"selectionKeys\", \"onCheckboxChange\", \"unstyled\", \"pt\"]);\n  }), 128))], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_1$1);\n}\nscript$1.render = render$1;\nfunction _typeof$1(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$1(o);\n}\nfunction _createForOfIteratorHelper(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {\n      t && (r = t);\n      var _n = 0,\n        F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          return _n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[_n++]\n          };\n        },\n        e: function e(r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function s() {\n      t = t.call(r);\n    },\n    n: function n() {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function e(r) {\n      u = !0, o = r;\n    },\n    f: function f() {\n      try {\n        a || null == t[\"return\"] || t[\"return\"]();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction ownKeys$1(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$1(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) {\n      _defineProperty$1(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$1(e, r, t) {\n  return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey$1(t) {\n  var i = _toPrimitive$1(t, \"string\");\n  return \"symbol\" == _typeof$1(i) ? i : i + \"\";\n}\nfunction _toPrimitive$1(t, r) {\n  if (\"object\" != _typeof$1(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof$1(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar script = {\n  name: 'Tree',\n  \"extends\": script$2,\n  inheritAttrs: false,\n  emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect', 'filter'],\n  data: function data() {\n    return {\n      d_expandedKeys: this.expandedKeys || {},\n      filterValue: null\n    };\n  },\n  watch: {\n    expandedKeys: function expandedKeys(newValue) {\n      this.d_expandedKeys = newValue;\n    }\n  },\n  methods: {\n    onNodeToggle: function onNodeToggle(node) {\n      var key = node.key;\n      if (this.d_expandedKeys[key]) {\n        delete this.d_expandedKeys[key];\n        this.$emit('node-collapse', node);\n      } else {\n        this.d_expandedKeys[key] = true;\n        this.$emit('node-expand', node);\n      }\n      this.d_expandedKeys = _objectSpread$1({}, this.d_expandedKeys);\n      this.$emit('update:expandedKeys', this.d_expandedKeys);\n    },\n    onNodeClick: function onNodeClick(event) {\n      if (this.selectionMode != null && event.node.selectable !== false) {\n        var metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n        var _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n        this.$emit('update:selectionKeys', _selectionKeys);\n      }\n    },\n    onCheckboxChange: function onCheckboxChange(event) {\n      this.$emit('update:selectionKeys', event.selectionKeys);\n      if (event.check) this.$emit('node-select', event.node);else this.$emit('node-unselect', event.node);\n    },\n    handleSelectionWithMetaKey: function handleSelectionWithMetaKey(event) {\n      var originalEvent = event.originalEvent;\n      var node = event.node;\n      var metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      var selected = this.isNodeSelected(node);\n      var _selectionKeys;\n      if (selected && metaKey) {\n        if (this.isSingleSelectionMode()) {\n          _selectionKeys = {};\n        } else {\n          _selectionKeys = _objectSpread$1({}, this.selectionKeys);\n          delete _selectionKeys[node.key];\n        }\n        this.$emit('node-unselect', node);\n      } else {\n        if (this.isSingleSelectionMode()) {\n          _selectionKeys = {};\n        } else if (this.isMultipleSelectionMode()) {\n          _selectionKeys = !metaKey ? {} : this.selectionKeys ? _objectSpread$1({}, this.selectionKeys) : {};\n        }\n        _selectionKeys[node.key] = true;\n        this.$emit('node-select', node);\n      }\n      return _selectionKeys;\n    },\n    handleSelectionWithoutMetaKey: function handleSelectionWithoutMetaKey(event) {\n      var node = event.node;\n      var selected = this.isNodeSelected(node);\n      var _selectionKeys;\n      if (this.isSingleSelectionMode()) {\n        if (selected) {\n          _selectionKeys = {};\n          this.$emit('node-unselect', node);\n        } else {\n          _selectionKeys = {};\n          _selectionKeys[node.key] = true;\n          this.$emit('node-select', node);\n        }\n      } else {\n        if (selected) {\n          _selectionKeys = _objectSpread$1({}, this.selectionKeys);\n          delete _selectionKeys[node.key];\n          this.$emit('node-unselect', node);\n        } else {\n          _selectionKeys = this.selectionKeys ? _objectSpread$1({}, this.selectionKeys) : {};\n          _selectionKeys[node.key] = true;\n          this.$emit('node-select', node);\n        }\n      }\n      return _selectionKeys;\n    },\n    isSingleSelectionMode: function isSingleSelectionMode() {\n      return this.selectionMode === 'single';\n    },\n    isMultipleSelectionMode: function isMultipleSelectionMode() {\n      return this.selectionMode === 'multiple';\n    },\n    isNodeSelected: function isNodeSelected(node) {\n      return this.selectionMode && this.selectionKeys ? this.selectionKeys[node.key] === true : false;\n    },\n    isChecked: function isChecked(node) {\n      return this.selectionKeys ? this.selectionKeys[node.key] && this.selectionKeys[node.key].checked : false;\n    },\n    isNodeLeaf: function isNodeLeaf(node) {\n      return node.leaf === false ? false : !(node.children && node.children.length);\n    },\n    onFilterKeydown: function onFilterKeydown(event) {\n      if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n        event.preventDefault();\n      }\n      this.$emit('filter', {\n        originalEvent: event,\n        value: event.target.value\n      });\n    },\n    findFilteredNodes: function findFilteredNodes(node, paramsWithoutNode) {\n      if (node) {\n        var matched = false;\n        if (node.children) {\n          var childNodes = _toConsumableArray(node.children);\n          node.children = [];\n          var _iterator = _createForOfIteratorHelper(childNodes),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var childNode = _step.value;\n              var copyChildNode = _objectSpread$1({}, childNode);\n              if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                matched = true;\n                node.children.push(copyChildNode);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n        if (matched) {\n          return true;\n        }\n      }\n    },\n    isFilterMatched: function isFilterMatched(node, _ref) {\n      var searchFields = _ref.searchFields,\n        filterText = _ref.filterText,\n        strict = _ref.strict;\n      var matched = false;\n      var _iterator2 = _createForOfIteratorHelper(searchFields),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var field = _step2.value;\n          var fieldValue = String(resolveFieldData(node, field)).toLocaleLowerCase(this.filterLocale);\n          if (fieldValue.indexOf(filterText) > -1) {\n            matched = true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (!matched || strict && !this.isNodeLeaf(node)) {\n        matched = this.findFilteredNodes(node, {\n          searchFields: searchFields,\n          filterText: filterText,\n          strict: strict\n        }) || matched;\n      }\n      return matched;\n    }\n  },\n  computed: {\n    filteredValue: function filteredValue() {\n      var filteredNodes = [];\n      var searchFields = isFunction(this.filterBy) ? [this.filterBy] : this.filterBy.split(',');\n      var filterText = this.filterValue.trim().toLocaleLowerCase(this.filterLocale);\n      var strict = this.filterMode === 'strict';\n      var _iterator3 = _createForOfIteratorHelper(this.value),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var node = _step3.value;\n          var _node = _objectSpread$1({}, node);\n          var paramsWithoutNode = {\n            searchFields: searchFields,\n            filterText: filterText,\n            strict: strict\n          };\n          if (strict && (this.findFilteredNodes(_node, paramsWithoutNode) || this.isFilterMatched(_node, paramsWithoutNode)) || !strict && (this.isFilterMatched(_node, paramsWithoutNode) || this.findFilteredNodes(_node, paramsWithoutNode))) {\n            filteredNodes.push(_node);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return filteredNodes;\n    },\n    valueToRender: function valueToRender() {\n      if (this.filterValue && this.filterValue.trim().length > 0) return this.filteredValue;else return this.value;\n    }\n  },\n  components: {\n    TreeNode: script$1,\n    InputText: InputText,\n    InputIcon: InputIcon,\n    IconField: IconField,\n    SearchIcon: SearchIcon,\n    SpinnerIcon: SpinnerIcon\n  }\n};\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar _hoisted_1 = [\"aria-labelledby\", \"aria-label\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_InputText = resolveComponent(\"InputText\");\n  var _component_SearchIcon = resolveComponent(\"SearchIcon\");\n  var _component_InputIcon = resolveComponent(\"InputIcon\");\n  var _component_IconField = resolveComponent(\"IconField\");\n  var _component_TreeNode = resolveComponent(\"TreeNode\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [_ctx.loading && _ctx.loadingMode === 'mask' ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('mask')\n  }, _ctx.ptm('mask')), [renderSlot(_ctx.$slots, \"loadingicon\", {\n    \"class\": normalizeClass(_ctx.cx('loadingIcon'))\n  }, function () {\n    return [_ctx.loadingIcon ? (openBlock(), createElementBlock(\"i\", mergeProps({\n      key: 0,\n      \"class\": [_ctx.cx('loadingIcon'), 'pi-spin', _ctx.loadingIcon]\n    }, _ctx.ptm('loadingIcon')), null, 16)) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n      key: 1,\n      spin: \"\",\n      \"class\": _ctx.cx('loadingIcon')\n    }, _ctx.ptm('loadingIcon')), null, 16, [\"class\"]))];\n  })], 16)) : createCommentVNode(\"\", true), _ctx.filter ? (openBlock(), createBlock(_component_IconField, {\n    key: 1,\n    unstyled: _ctx.unstyled,\n    pt: _objectSpread(_objectSpread({}, _ctx.ptm('pcFilter')), _ctx.ptm('pcFilterContainer')),\n    \"class\": normalizeClass(_ctx.cx('pcFilterContainer'))\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(_component_InputText, {\n        modelValue: $data.filterValue,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return $data.filterValue = $event;\n        }),\n        autocomplete: \"off\",\n        \"class\": normalizeClass(_ctx.cx('pcFilterInput')),\n        placeholder: _ctx.filterPlaceholder,\n        unstyled: _ctx.unstyled,\n        onKeydown: $options.onFilterKeydown,\n        pt: _ctx.ptm('pcFilterInput')\n      }, null, 8, [\"modelValue\", \"class\", \"placeholder\", \"unstyled\", \"onKeydown\", \"pt\"]), createVNode(_component_InputIcon, {\n        unstyled: _ctx.unstyled,\n        pt: _ctx.ptm('pcFilterIconContainer')\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, _ctx.$slots.filtericon ? 'filtericon' : 'searchicon', {\n            \"class\": normalizeClass(_ctx.cx('filterIcon'))\n          }, function () {\n            return [createVNode(_component_SearchIcon, mergeProps({\n              \"class\": _ctx.cx('filterIcon')\n            }, _ctx.ptm('filterIcon')), null, 16, [\"class\"])];\n          })];\n        }),\n        _: 3\n      }, 8, [\"unstyled\", \"pt\"])];\n    }),\n    _: 3\n  }, 8, [\"unstyled\", \"pt\", \"class\"])) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('wrapper'),\n    style: {\n      maxHeight: _ctx.scrollHeight\n    }\n  }, _ctx.ptm('wrapper')), [renderSlot(_ctx.$slots, \"header\", {\n    value: _ctx.value,\n    expandedKeys: _ctx.expandedKeys,\n    selectionKeys: _ctx.selectionKeys\n  }), createElementVNode(\"ul\", mergeProps({\n    \"class\": _ctx.cx('rootChildren'),\n    role: \"tree\",\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel\n  }, _ctx.ptm('rootChildren')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.valueToRender, function (node, index) {\n    return openBlock(), createBlock(_component_TreeNode, {\n      key: node.key,\n      node: node,\n      templates: _ctx.$slots,\n      level: _ctx.level + 1,\n      index: index,\n      expandedKeys: $data.d_expandedKeys,\n      onNodeToggle: $options.onNodeToggle,\n      onNodeClick: $options.onNodeClick,\n      selectionMode: _ctx.selectionMode,\n      selectionKeys: _ctx.selectionKeys,\n      onCheckboxChange: $options.onCheckboxChange,\n      loadingMode: _ctx.loadingMode,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"node\", \"templates\", \"level\", \"index\", \"expandedKeys\", \"onNodeToggle\", \"onNodeClick\", \"selectionMode\", \"selectionKeys\", \"onCheckboxChange\", \"loadingMode\", \"unstyled\", \"pt\"]);\n  }), 128))], 16, _hoisted_1), renderSlot(_ctx.$slots, \"footer\", {\n    value: _ctx.value,\n    expandedKeys: _ctx.expandedKeys,\n    selectionKeys: _ctx.selectionKeys\n  })], 16)], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$2","name","BaseComponent","props","value","type","expandedKeys","selectionKeys","selectionMode","String","metaKeySelection","Boolean","loading","loadingIcon","undefined","loadingMode","filter","filterBy","Function","filterMode","filterPlaceholder","filterLocale","highlightOnSelect","scrollHeight","level","Number","ariaLabelledby","ariaLabel","style","TreeStyle","provide","$pcTree","$parentInstance","script$1","hostName","emits","node","templates","index","nodeTouched","toggleClicked","mounted","setAllNodesTabIndexes","methods","toggle","$emit","label","onChildNodeToggle","getPTOptions","key","ptm","context","expanded","selected","checked","partialChecked","leaf","onClick","event","getAttribute","target","parentElement","isCheckboxSelectionMode","selectable","toggleCheckbox","originalEvent","onChildNodeClick","onTouchEnd","onKeyDown","isSameNode","code","onTabKey","onArrowDown","onArrowUp","onArrowRight","onArrowLeft","onEnterKey","nodeElement","closest","listElement","children","focusRowChange","nextElementSibling","nextSiblingAncestor","findNextSiblingOfAncestor","preventDefault","previousElementSibling","findLastVisibleDescendant","parentNodeElement","getParentNodeElement","_this","currentTarget","tabIndex","$nextTick","togglerElement","findSingle","click","findBeforeClickableNode","setTabIndexForSelectionMode","nodes","find","$refs","currentNode","hasSelectedNode","_toConsumableArray$1","some","forEach","selectedNodes","elements","every","element","firstFocusableRow","currentFocusedRow","lastVisibleDescendant","focusNode","parentListElement","prevNodeButton","visibility","_selectionKeys","_objectSpread$2","_check","propagateDown","check","length","_iterator","_createForOfIteratorHelper$1","_step","s","n","done","child","err","e","f","propagateUp","checkedChildCount","childPartialSelected","_iterator2","_step2","onChildCheckboxChange","childrenListElement","lastChildElement","focus","computed","hasChildren","checkboxMode","ariaChecked","ariaSelected","components","Checkbox","ChevronDownIcon","ChevronRightIcon","CheckIcon","MinusIcon","SpinnerIcon","directives","ripple","Ripple","openBlock","createElementBlock","mergeProps","ref","_ctx","cx","role","$options","$props","tabindex","onKeydown","_cache","apply","arguments","createElementVNode","onTouchend","withDirectives","Fragment","createBlock","resolveDynamicComponent","normalizeClass","_component_SpinnerIcon","spin","expandedIcon","collapsedIcon","_directive_ripple","_component_Checkbox","defaultValue","binary","indeterminate","unstyled","pt","icon","withCtx","slotProps","withModifiers","createTextVNode","toDisplayString","_hoisted_2","renderList","childNode","_component_TreeNode","onNodeToggle","onNodeClick","onCheckboxChange","script","inheritAttrs","data","d_expandedKeys","filterValue","watch","newValue","_objectSpread$1","metaSelection","handleSelectionWithMetaKey","handleSelectionWithoutMetaKey","metaKey","ctrlKey","isNodeSelected","isSingleSelectionMode","isMultipleSelectionMode","isChecked","isNodeLeaf","onFilterKeydown","findFilteredNodes","paramsWithoutNode","matched","childNodes","_toConsumableArray","_createForOfIteratorHelper","copyChildNode","isFilterMatched","push","_ref","searchFields","filterText","strict","field","fieldValue","resolveFieldData","toLocaleLowerCase","indexOf","filteredValue","filteredNodes","isFunction","split","trim","_iterator3","_step3","_node","valueToRender","TreeNode","InputText","InputIcon","IconField","SearchIcon","ptmi","renderSlot","$slots","_component_IconField","_objectSpread","createVNode","_component_InputText","$data","$event","autocomplete","placeholder","_component_InputIcon","filtericon","_component_SearchIcon"],"sources":["../../src/tree/BaseTree.vue","../../src/tree/TreeNode.vue","../../src/tree/TreeNode.vue?vue&type=template&id=a823e4cc&lang.js","../../src/tree/Tree.vue","../../src/tree/Tree.vue?vue&type=template&id=5631ee6b&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TreeStyle from 'primevue/tree/style';\n\nexport default {\n    name: 'BaseTree',\n    extends: BaseComponent,\n    props: {\n        value: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: undefined\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        filter: {\n            type: Boolean,\n            default: false\n        },\n        filterBy: {\n            type: [String, Function],\n            default: 'label'\n        },\n        filterMode: {\n            type: String,\n            default: 'lenient'\n        },\n        filterPlaceholder: {\n            type: String,\n            default: null\n        },\n        filterLocale: {\n            type: String,\n            default: undefined\n        },\n        highlightOnSelect: {\n            type: Boolean,\n            default: false\n        },\n        scrollHeight: {\n            type: String,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: TreeStyle,\n    provide() {\n        return {\n            $pcTree: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <li\n        ref=\"currentNode\"\n        :class=\"cx('node')\"\n        role=\"treeitem\"\n        :aria-label=\"label(node)\"\n        :aria-selected=\"ariaSelected\"\n        :aria-expanded=\"expanded\"\n        :aria-setsize=\"node.children ? node.children.length : 0\"\n        :aria-posinset=\"index + 1\"\n        :aria-level=\"level\"\n        :aria-checked=\"ariaChecked\"\n        :tabindex=\"index === 0 ? 0 : -1\"\n        @keydown=\"onKeyDown\"\n        v-bind=\"level === 1 ? getPTOptions('node') : ptm('nodeChildren')\"\n    >\n        <div :class=\"cx('nodeContent')\" @click=\"onClick\" @touchend=\"onTouchEnd\" :style=\"node.style\" v-bind=\"getPTOptions('nodeContent')\" :data-p-selected=\"checkboxMode ? checked : selected\" :data-p-selectable=\"selectable\">\n            <button v-ripple type=\"button\" :class=\"cx('nodeToggleButton')\" @click=\"toggle\" tabindex=\"-1\" v-bind=\"getPTOptions('nodeToggleButton')\">\n                <template v-if=\"node.loading && loadingMode === 'icon'\">\n                    <!-- TODO: nodetogglericon deprecated since v4.0-->\n                    <component v-if=\"templates['nodetoggleicon'] || templates['nodetogglericon']\" :is=\"templates['nodetoggleicon'] || templates['nodetogglericon']\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <SpinnerIcon v-else spin :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                </template>\n                <template v-else>\n                    <!-- TODO: togglericon deprecated since v4.0-->\n                    <component v-if=\"templates['nodetoggleicon'] || templates['togglericon']\" :is=\"templates['nodetoggleicon'] || templates['togglericon']\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <component v-else-if=\"expanded\" :is=\"node.expandedIcon ? 'span' : 'ChevronDownIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                    <component v-else :is=\"node.collapsedIcon ? 'span' : 'ChevronRightIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                </template>\n            </button>\n            <Checkbox\n                v-if=\"checkboxMode\"\n                :defaultValue=\"checked\"\n                :binary=\"true\"\n                :indeterminate=\"partialChecked\"\n                :class=\"cx('nodeCheckbox')\"\n                :tabindex=\"-1\"\n                :unstyled=\"unstyled\"\n                :pt=\"getPTOptions('pcNodeCheckbox')\"\n                :data-p-partialchecked=\"partialChecked\"\n            >\n                <template #icon=\"slotProps\">\n                    <component v-if=\"templates['checkboxicon']\" :is=\"templates['checkboxicon']\" :checked=\"slotProps.checked\" :partialChecked=\"partialChecked\" :class=\"slotProps.class\" />\n                </template>\n            </Checkbox>\n            <component v-if=\"templates['nodeicon']\" :is=\"templates['nodeicon']\" :node=\"node\" :class=\"[cx('nodeIcon')]\" v-bind=\"getPTOptions('nodeIcon')\"></component>\n            <span v-else :class=\"[cx('nodeIcon'), node.icon]\" v-bind=\"getPTOptions('nodeIcon')\"></span>\n            <span :class=\"cx('nodeLabel')\" v-bind=\"getPTOptions('nodeLabel')\" @keydown.stop>\n                <component v-if=\"templates[node.type] || templates['default']\" :is=\"templates[node.type] || templates['default']\" :node=\"node\" :expanded=\"expanded\" :selected=\"checkboxMode ? checked : selected\" />\n                <template v-else>{{ label(node) }}</template>\n            </span>\n        </div>\n        <ul v-if=\"hasChildren && expanded\" :class=\"cx('nodeChildren')\" role=\"group\" v-bind=\"ptm('nodeChildren')\">\n            <TreeNode\n                v-for=\"childNode of node.children\"\n                :key=\"childNode.key\"\n                :node=\"childNode\"\n                :templates=\"templates\"\n                :level=\"level + 1\"\n                :loadingMode=\"loadingMode\"\n                :expandedKeys=\"expandedKeys\"\n                @node-toggle=\"onChildNodeToggle\"\n                @node-click=\"onChildNodeClick\"\n                :selectionMode=\"selectionMode\"\n                :selectionKeys=\"selectionKeys\"\n                @checkbox-change=\"propagateUp\"\n                :unstyled=\"unstyled\"\n                :pt=\"pt\"\n            />\n        </ul>\n    </li>\n</template>\n\n<script>\nimport { find, findSingle, getAttribute } from '@primeuix/utils/dom';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'TreeNode',\n    hostName: 'Tree',\n    extends: BaseComponent,\n    emits: ['node-toggle', 'node-click', 'checkbox-change'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        templates: {\n            type: null,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: null\n        },\n        index: null\n    },\n    nodeTouched: false,\n    toggleClicked: false,\n    mounted() {\n        this.setAllNodesTabIndexes();\n    },\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n            this.toggleClicked = true;\n        },\n        label(node) {\n            return typeof node.label === 'function' ? node.label() : node.label;\n        },\n        onChildNodeToggle(node) {\n            this.$emit('node-toggle', node);\n        },\n        getPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    node: this.node,\n                    index: this.index,\n                    expanded: this.expanded,\n                    selected: this.selected,\n                    checked: this.checked,\n                    partialChecked: this.partialChecked,\n                    leaf: this.leaf\n                }\n            });\n        },\n        onClick(event) {\n            if (this.toggleClicked || getAttribute(event.target, '[data-pc-section=\"nodetogglebutton\"]') || getAttribute(event.target.parentElement, '[data-pc-section=\"nodetogglebutton\"]')) {\n                this.toggleClicked = false;\n\n                return;\n            }\n\n            if (this.isCheckboxSelectionMode()) {\n                if (this.node.selectable != false) {\n                    this.toggleCheckbox();\n                }\n            } else {\n                this.$emit('node-click', {\n                    originalEvent: event,\n                    nodeTouched: this.nodeTouched,\n                    node: this.node\n                });\n            }\n\n            this.nodeTouched = false;\n        },\n        onChildNodeClick(event) {\n            this.$emit('node-click', event);\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        onKeyDown(event) {\n            if (!this.isSameNode(event)) return;\n\n            switch (event.code) {\n                case 'Tab':\n                    this.onTabKey(event);\n\n                    break;\n\n                case 'ArrowDown':\n                    this.onArrowDown(event);\n\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUp(event);\n\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRight(event);\n\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeft(event);\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDown(event) {\n            const nodeElement = event.target.getAttribute('data-pc-section') === 'nodetogglebutton' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n            const listElement = nodeElement.children[1];\n\n            if (listElement) {\n                this.focusRowChange(nodeElement, listElement.children[0]);\n            } else {\n                if (nodeElement.nextElementSibling) {\n                    this.focusRowChange(nodeElement, nodeElement.nextElementSibling);\n                } else {\n                    let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n\n                    if (nextSiblingAncestor) {\n                        this.focusRowChange(nodeElement, nextSiblingAncestor);\n                    }\n                }\n            }\n\n            event.preventDefault();\n        },\n        onArrowUp(event) {\n            const nodeElement = event.target;\n\n            if (nodeElement.previousElementSibling) {\n                this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n            } else {\n                let parentNodeElement = this.getParentNodeElement(nodeElement);\n\n                if (parentNodeElement) {\n                    this.focusRowChange(nodeElement, parentNodeElement);\n                }\n            }\n\n            event.preventDefault();\n        },\n        onArrowRight(event) {\n            if (this.leaf || this.expanded) return;\n\n            event.currentTarget.tabIndex = -1;\n\n            this.$emit('node-toggle', this.node);\n            this.$nextTick(() => {\n                this.onArrowDown(event);\n            });\n        },\n        onArrowLeft(event) {\n            const togglerElement = findSingle(event.currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n\n            if (this.level === 0 && !this.expanded) {\n                return false;\n            }\n\n            if (this.expanded && !this.leaf) {\n                togglerElement.click();\n\n                return false;\n            }\n\n            const target = this.findBeforeClickableNode(event.currentTarget);\n\n            if (target) {\n                this.focusRowChange(event.currentTarget, target);\n            }\n        },\n        onEnterKey(event) {\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n            this.onClick(event);\n\n            event.preventDefault();\n        },\n        onTabKey() {\n            this.setAllNodesTabIndexes();\n        },\n        setAllNodesTabIndexes() {\n            const nodes = find(this.$refs.currentNode.closest('[data-pc-section=\"rootchildren\"]'), '[role=\"treeitem\"]');\n\n            const hasSelectedNode = [...nodes].some((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n\n            [...nodes].forEach((node) => {\n                node.tabIndex = -1;\n            });\n\n            if (hasSelectedNode) {\n                const selectedNodes = [...nodes].filter((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n\n                selectedNodes[0].tabIndex = 0;\n\n                return;\n            }\n\n            [...nodes][0].tabIndex = 0;\n        },\n        setTabIndexForSelectionMode(event, nodeTouched) {\n            if (this.selectionMode !== null) {\n                const elements = [...find(this.$refs.currentNode.parentElement, '[role=\"treeitem\"]')];\n\n                event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n\n                if (elements.every((element) => element.tabIndex === -1)) {\n                    elements[0].tabIndex = 0;\n                }\n            }\n        },\n        focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n            firstFocusableRow.tabIndex = '-1';\n            currentFocusedRow.tabIndex = '0';\n\n            this.focusNode(lastVisibleDescendant || currentFocusedRow);\n        },\n        findBeforeClickableNode(node) {\n            const parentListElement = node.closest('ul').closest('li');\n\n            if (parentListElement) {\n                const prevNodeButton = findSingle(parentListElement, 'button');\n\n                if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n                    return parentListElement;\n                }\n\n                return this.findBeforeClickableNode(node.previousElementSibling);\n            }\n\n            return null;\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check && node.selectable != false) selectionKeys[node.key] = { checked: true, partialChecked: false };\n            else delete selectionKeys[node.key];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[child.key] && _selectionKeys[child.key].checked) checkedChildCount++;\n                else if (_selectionKeys[child.key] && _selectionKeys[child.key].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.node.key] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.node.key];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.node.key] = { checked: false, partialChecked: true };\n                else delete _selectionKeys[this.node.key];\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onChildCheckboxChange(event) {\n            this.$emit('checkbox-change', event);\n        },\n        findNextSiblingOfAncestor(nodeElement) {\n            let parentNodeElement = this.getParentNodeElement(nodeElement);\n\n            if (parentNodeElement) {\n                if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;\n                else return this.findNextSiblingOfAncestor(parentNodeElement);\n            } else {\n                return null;\n            }\n        },\n        findLastVisibleDescendant(nodeElement) {\n            const childrenListElement = nodeElement.children[1];\n\n            if (childrenListElement) {\n                const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n\n                return this.findLastVisibleDescendant(lastChildElement);\n            } else {\n                return nodeElement;\n            }\n        },\n        getParentNodeElement(nodeElement) {\n            const parentNodeElement = nodeElement.parentElement.parentElement;\n\n            return getAttribute(parentNodeElement, 'role') === 'treeitem' ? parentNodeElement : null;\n        },\n        focusNode(element) {\n            element.focus();\n        },\n        isCheckboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        },\n        isSameNode(event) {\n            return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n        }\n    },\n    computed: {\n        hasChildren() {\n            return this.node.children && this.node.children.length > 0;\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.node.key] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selectable() {\n            return this.node.selectable === false ? false : this.selectionMode != null;\n        },\n        selected() {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.node.key] === true : false;\n        },\n        checkboxMode() {\n            return this.selectionMode === 'checkbox' && this.node.selectable !== false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].checked : false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].partialChecked : false;\n        },\n        ariaChecked() {\n            return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : undefined;\n        },\n        ariaSelected() {\n            return this.checkboxMode ? this.checked : undefined;\n        }\n    },\n    components: {\n        Checkbox,\n        ChevronDownIcon,\n        ChevronRightIcon,\n        CheckIcon,\n        MinusIcon,\n        SpinnerIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <li\n        ref=\"currentNode\"\n        :class=\"cx('node')\"\n        role=\"treeitem\"\n        :aria-label=\"label(node)\"\n        :aria-selected=\"ariaSelected\"\n        :aria-expanded=\"expanded\"\n        :aria-setsize=\"node.children ? node.children.length : 0\"\n        :aria-posinset=\"index + 1\"\n        :aria-level=\"level\"\n        :aria-checked=\"ariaChecked\"\n        :tabindex=\"index === 0 ? 0 : -1\"\n        @keydown=\"onKeyDown\"\n        v-bind=\"level === 1 ? getPTOptions('node') : ptm('nodeChildren')\"\n    >\n        <div :class=\"cx('nodeContent')\" @click=\"onClick\" @touchend=\"onTouchEnd\" :style=\"node.style\" v-bind=\"getPTOptions('nodeContent')\" :data-p-selected=\"checkboxMode ? checked : selected\" :data-p-selectable=\"selectable\">\n            <button v-ripple type=\"button\" :class=\"cx('nodeToggleButton')\" @click=\"toggle\" tabindex=\"-1\" v-bind=\"getPTOptions('nodeToggleButton')\">\n                <template v-if=\"node.loading && loadingMode === 'icon'\">\n                    <!-- TODO: nodetogglericon deprecated since v4.0-->\n                    <component v-if=\"templates['nodetoggleicon'] || templates['nodetogglericon']\" :is=\"templates['nodetoggleicon'] || templates['nodetogglericon']\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <SpinnerIcon v-else spin :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                </template>\n                <template v-else>\n                    <!-- TODO: togglericon deprecated since v4.0-->\n                    <component v-if=\"templates['nodetoggleicon'] || templates['togglericon']\" :is=\"templates['nodetoggleicon'] || templates['togglericon']\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <component v-else-if=\"expanded\" :is=\"node.expandedIcon ? 'span' : 'ChevronDownIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                    <component v-else :is=\"node.collapsedIcon ? 'span' : 'ChevronRightIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                </template>\n            </button>\n            <Checkbox\n                v-if=\"checkboxMode\"\n                :defaultValue=\"checked\"\n                :binary=\"true\"\n                :indeterminate=\"partialChecked\"\n                :class=\"cx('nodeCheckbox')\"\n                :tabindex=\"-1\"\n                :unstyled=\"unstyled\"\n                :pt=\"getPTOptions('pcNodeCheckbox')\"\n                :data-p-partialchecked=\"partialChecked\"\n            >\n                <template #icon=\"slotProps\">\n                    <component v-if=\"templates['checkboxicon']\" :is=\"templates['checkboxicon']\" :checked=\"slotProps.checked\" :partialChecked=\"partialChecked\" :class=\"slotProps.class\" />\n                </template>\n            </Checkbox>\n            <component v-if=\"templates['nodeicon']\" :is=\"templates['nodeicon']\" :node=\"node\" :class=\"[cx('nodeIcon')]\" v-bind=\"getPTOptions('nodeIcon')\"></component>\n            <span v-else :class=\"[cx('nodeIcon'), node.icon]\" v-bind=\"getPTOptions('nodeIcon')\"></span>\n            <span :class=\"cx('nodeLabel')\" v-bind=\"getPTOptions('nodeLabel')\" @keydown.stop>\n                <component v-if=\"templates[node.type] || templates['default']\" :is=\"templates[node.type] || templates['default']\" :node=\"node\" :expanded=\"expanded\" :selected=\"checkboxMode ? checked : selected\" />\n                <template v-else>{{ label(node) }}</template>\n            </span>\n        </div>\n        <ul v-if=\"hasChildren && expanded\" :class=\"cx('nodeChildren')\" role=\"group\" v-bind=\"ptm('nodeChildren')\">\n            <TreeNode\n                v-for=\"childNode of node.children\"\n                :key=\"childNode.key\"\n                :node=\"childNode\"\n                :templates=\"templates\"\n                :level=\"level + 1\"\n                :loadingMode=\"loadingMode\"\n                :expandedKeys=\"expandedKeys\"\n                @node-toggle=\"onChildNodeToggle\"\n                @node-click=\"onChildNodeClick\"\n                :selectionMode=\"selectionMode\"\n                :selectionKeys=\"selectionKeys\"\n                @checkbox-change=\"propagateUp\"\n                :unstyled=\"unstyled\"\n                :pt=\"pt\"\n            />\n        </ul>\n    </li>\n</template>\n\n<script>\nimport { find, findSingle, getAttribute } from '@primeuix/utils/dom';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'TreeNode',\n    hostName: 'Tree',\n    extends: BaseComponent,\n    emits: ['node-toggle', 'node-click', 'checkbox-change'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        templates: {\n            type: null,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: null\n        },\n        index: null\n    },\n    nodeTouched: false,\n    toggleClicked: false,\n    mounted() {\n        this.setAllNodesTabIndexes();\n    },\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n            this.toggleClicked = true;\n        },\n        label(node) {\n            return typeof node.label === 'function' ? node.label() : node.label;\n        },\n        onChildNodeToggle(node) {\n            this.$emit('node-toggle', node);\n        },\n        getPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    node: this.node,\n                    index: this.index,\n                    expanded: this.expanded,\n                    selected: this.selected,\n                    checked: this.checked,\n                    partialChecked: this.partialChecked,\n                    leaf: this.leaf\n                }\n            });\n        },\n        onClick(event) {\n            if (this.toggleClicked || getAttribute(event.target, '[data-pc-section=\"nodetogglebutton\"]') || getAttribute(event.target.parentElement, '[data-pc-section=\"nodetogglebutton\"]')) {\n                this.toggleClicked = false;\n\n                return;\n            }\n\n            if (this.isCheckboxSelectionMode()) {\n                if (this.node.selectable != false) {\n                    this.toggleCheckbox();\n                }\n            } else {\n                this.$emit('node-click', {\n                    originalEvent: event,\n                    nodeTouched: this.nodeTouched,\n                    node: this.node\n                });\n            }\n\n            this.nodeTouched = false;\n        },\n        onChildNodeClick(event) {\n            this.$emit('node-click', event);\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        onKeyDown(event) {\n            if (!this.isSameNode(event)) return;\n\n            switch (event.code) {\n                case 'Tab':\n                    this.onTabKey(event);\n\n                    break;\n\n                case 'ArrowDown':\n                    this.onArrowDown(event);\n\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUp(event);\n\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRight(event);\n\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeft(event);\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDown(event) {\n            const nodeElement = event.target.getAttribute('data-pc-section') === 'nodetogglebutton' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n            const listElement = nodeElement.children[1];\n\n            if (listElement) {\n                this.focusRowChange(nodeElement, listElement.children[0]);\n            } else {\n                if (nodeElement.nextElementSibling) {\n                    this.focusRowChange(nodeElement, nodeElement.nextElementSibling);\n                } else {\n                    let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n\n                    if (nextSiblingAncestor) {\n                        this.focusRowChange(nodeElement, nextSiblingAncestor);\n                    }\n                }\n            }\n\n            event.preventDefault();\n        },\n        onArrowUp(event) {\n            const nodeElement = event.target;\n\n            if (nodeElement.previousElementSibling) {\n                this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n            } else {\n                let parentNodeElement = this.getParentNodeElement(nodeElement);\n\n                if (parentNodeElement) {\n                    this.focusRowChange(nodeElement, parentNodeElement);\n                }\n            }\n\n            event.preventDefault();\n        },\n        onArrowRight(event) {\n            if (this.leaf || this.expanded) return;\n\n            event.currentTarget.tabIndex = -1;\n\n            this.$emit('node-toggle', this.node);\n            this.$nextTick(() => {\n                this.onArrowDown(event);\n            });\n        },\n        onArrowLeft(event) {\n            const togglerElement = findSingle(event.currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n\n            if (this.level === 0 && !this.expanded) {\n                return false;\n            }\n\n            if (this.expanded && !this.leaf) {\n                togglerElement.click();\n\n                return false;\n            }\n\n            const target = this.findBeforeClickableNode(event.currentTarget);\n\n            if (target) {\n                this.focusRowChange(event.currentTarget, target);\n            }\n        },\n        onEnterKey(event) {\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n            this.onClick(event);\n\n            event.preventDefault();\n        },\n        onTabKey() {\n            this.setAllNodesTabIndexes();\n        },\n        setAllNodesTabIndexes() {\n            const nodes = find(this.$refs.currentNode.closest('[data-pc-section=\"rootchildren\"]'), '[role=\"treeitem\"]');\n\n            const hasSelectedNode = [...nodes].some((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n\n            [...nodes].forEach((node) => {\n                node.tabIndex = -1;\n            });\n\n            if (hasSelectedNode) {\n                const selectedNodes = [...nodes].filter((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n\n                selectedNodes[0].tabIndex = 0;\n\n                return;\n            }\n\n            [...nodes][0].tabIndex = 0;\n        },\n        setTabIndexForSelectionMode(event, nodeTouched) {\n            if (this.selectionMode !== null) {\n                const elements = [...find(this.$refs.currentNode.parentElement, '[role=\"treeitem\"]')];\n\n                event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n\n                if (elements.every((element) => element.tabIndex === -1)) {\n                    elements[0].tabIndex = 0;\n                }\n            }\n        },\n        focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n            firstFocusableRow.tabIndex = '-1';\n            currentFocusedRow.tabIndex = '0';\n\n            this.focusNode(lastVisibleDescendant || currentFocusedRow);\n        },\n        findBeforeClickableNode(node) {\n            const parentListElement = node.closest('ul').closest('li');\n\n            if (parentListElement) {\n                const prevNodeButton = findSingle(parentListElement, 'button');\n\n                if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n                    return parentListElement;\n                }\n\n                return this.findBeforeClickableNode(node.previousElementSibling);\n            }\n\n            return null;\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check && node.selectable != false) selectionKeys[node.key] = { checked: true, partialChecked: false };\n            else delete selectionKeys[node.key];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[child.key] && _selectionKeys[child.key].checked) checkedChildCount++;\n                else if (_selectionKeys[child.key] && _selectionKeys[child.key].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.node.key] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.node.key];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.node.key] = { checked: false, partialChecked: true };\n                else delete _selectionKeys[this.node.key];\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onChildCheckboxChange(event) {\n            this.$emit('checkbox-change', event);\n        },\n        findNextSiblingOfAncestor(nodeElement) {\n            let parentNodeElement = this.getParentNodeElement(nodeElement);\n\n            if (parentNodeElement) {\n                if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;\n                else return this.findNextSiblingOfAncestor(parentNodeElement);\n            } else {\n                return null;\n            }\n        },\n        findLastVisibleDescendant(nodeElement) {\n            const childrenListElement = nodeElement.children[1];\n\n            if (childrenListElement) {\n                const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n\n                return this.findLastVisibleDescendant(lastChildElement);\n            } else {\n                return nodeElement;\n            }\n        },\n        getParentNodeElement(nodeElement) {\n            const parentNodeElement = nodeElement.parentElement.parentElement;\n\n            return getAttribute(parentNodeElement, 'role') === 'treeitem' ? parentNodeElement : null;\n        },\n        focusNode(element) {\n            element.focus();\n        },\n        isCheckboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        },\n        isSameNode(event) {\n            return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n        }\n    },\n    computed: {\n        hasChildren() {\n            return this.node.children && this.node.children.length > 0;\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.node.key] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selectable() {\n            return this.node.selectable === false ? false : this.selectionMode != null;\n        },\n        selected() {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.node.key] === true : false;\n        },\n        checkboxMode() {\n            return this.selectionMode === 'checkbox' && this.node.selectable !== false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].checked : false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].partialChecked : false;\n        },\n        ariaChecked() {\n            return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : undefined;\n        },\n        ariaSelected() {\n            return this.checkboxMode ? this.checked : undefined;\n        }\n    },\n    components: {\n        Checkbox,\n        ChevronDownIcon,\n        ChevronRightIcon,\n        CheckIcon,\n        MinusIcon,\n        SpinnerIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-if=\"loading && loadingMode === 'mask'\">\n            <div :class=\"cx('mask')\" v-bind=\"ptm('mask')\">\n                <slot name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                    <i v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" v-bind=\"ptm('loadingIcon')\" />\n                    <SpinnerIcon v-else spin :class=\"cx('loadingIcon')\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </template>\n        <IconField v-if=\"filter\" :unstyled=\"unstyled\" :pt=\"{ ...ptm('pcFilter'), ...ptm('pcFilterContainer') }\" :class=\"cx('pcFilterContainer')\">\n            <InputText v-model=\"filterValue\" autocomplete=\"off\" :class=\"cx('pcFilterInput')\" :placeholder=\"filterPlaceholder\" :unstyled=\"unstyled\" @keydown=\"onFilterKeydown\" :pt=\"ptm('pcFilterInput')\" />\n            <InputIcon :unstyled=\"unstyled\" :pt=\"ptm('pcFilterIconContainer')\">\n                <!--TODO: searchicon deprecated since v4.0-->\n                <slot :name=\"$slots.filtericon ? 'filtericon' : 'searchicon'\" :class=\"cx('filterIcon')\">\n                    <SearchIcon :class=\"cx('filterIcon')\" v-bind=\"ptm('filterIcon')\" />\n                </slot>\n            </InputIcon>\n        </IconField>\n        <div :class=\"cx('wrapper')\" :style=\"{ maxHeight: scrollHeight }\" v-bind=\"ptm('wrapper')\">\n            <slot name=\"header\" :value=\"value\" :expandedKeys=\"expandedKeys\" :selectionKeys=\"selectionKeys\" />\n            <ul :class=\"cx('rootChildren')\" role=\"tree\" :aria-labelledby=\"ariaLabelledby\" :aria-label=\"ariaLabel\" v-bind=\"ptm('rootChildren')\">\n                <TreeNode\n                    v-for=\"(node, index) of valueToRender\"\n                    :key=\"node.key\"\n                    :node=\"node\"\n                    :templates=\"$slots\"\n                    :level=\"level + 1\"\n                    :index=\"index\"\n                    :expandedKeys=\"d_expandedKeys\"\n                    @node-toggle=\"onNodeToggle\"\n                    @node-click=\"onNodeClick\"\n                    :selectionMode=\"selectionMode\"\n                    :selectionKeys=\"selectionKeys\"\n                    @checkbox-change=\"onCheckboxChange\"\n                    :loadingMode=\"loadingMode\"\n                    :unstyled=\"unstyled\"\n                    :pt=\"pt\"\n                ></TreeNode>\n            </ul>\n            <slot name=\"footer\" :value=\"value\" :expandedKeys=\"expandedKeys\" :selectionKeys=\"selectionKeys\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport { isFunction, resolveFieldData } from '@primeuix/utils/object';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport BaseTree from './BaseTree.vue';\nimport TreeNode from './TreeNode.vue';\n\nexport default {\n    name: 'Tree',\n    extends: BaseTree,\n    inheritAttrs: false,\n    emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect', 'filter'],\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            filterValue: null\n        };\n    },\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        }\n    },\n    methods: {\n        onNodeToggle(node) {\n            const key = node.key;\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            } else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = { ...this.d_expandedKeys };\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.selectionMode != null && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check) this.$emit('node-select', event.node);\n            else this.$emit('node-unselect', event.node);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[node.key];\n                }\n\n                this.$emit('node-unselect', node);\n            } else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : this.selectionKeys ? { ...this.selectionKeys } : {};\n                }\n\n                _selectionKeys[node.key] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = {};\n                    _selectionKeys[node.key] = true;\n                    this.$emit('node-select', node);\n                }\n            } else {\n                if (selected) {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[node.key];\n\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n                    _selectionKeys[node.key] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        isNodeSelected(node) {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[node.key] === true : false;\n        },\n        isChecked(node) {\n            return this.selectionKeys ? this.selectionKeys[node.key] && this.selectionKeys[node.key].checked : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        onFilterKeydown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n                event.preventDefault();\n            }\n\n            this.$emit('filter', { originalEvent: event, value: event.target.value });\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n\n                if (node.children) {\n                    let childNodes = [...node.children];\n\n                    node.children = [];\n\n                    for (let childNode of childNodes) {\n                        let copyChildNode = { ...childNode };\n\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, { searchFields, filterText, strict }) {\n            let matched = false;\n\n            for (let field of searchFields) {\n                let fieldValue = String(resolveFieldData(node, field)).toLocaleLowerCase(this.filterLocale);\n\n                if (fieldValue.indexOf(filterText) > -1) {\n                    matched = true;\n                }\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, { searchFields, filterText, strict }) || matched;\n            }\n\n            return matched;\n        }\n    },\n    computed: {\n        filteredValue() {\n            let filteredNodes = [];\n            const searchFields = isFunction(this.filterBy) ? [this.filterBy] : this.filterBy.split(',');\n            const filterText = this.filterValue.trim().toLocaleLowerCase(this.filterLocale);\n            const strict = this.filterMode === 'strict';\n\n            for (let node of this.value) {\n                let _node = { ...node };\n                let paramsWithoutNode = { searchFields, filterText, strict };\n\n                if (\n                    (strict && (this.findFilteredNodes(_node, paramsWithoutNode) || this.isFilterMatched(_node, paramsWithoutNode))) ||\n                    (!strict && (this.isFilterMatched(_node, paramsWithoutNode) || this.findFilteredNodes(_node, paramsWithoutNode)))\n                ) {\n                    filteredNodes.push(_node);\n                }\n            }\n\n            return filteredNodes;\n        },\n        valueToRender() {\n            if (this.filterValue && this.filterValue.trim().length > 0) return this.filteredValue;\n            else return this.value;\n        }\n    },\n    components: {\n        TreeNode,\n        InputText,\n        InputIcon,\n        IconField,\n        SearchIcon,\n        SpinnerIcon\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-if=\"loading && loadingMode === 'mask'\">\n            <div :class=\"cx('mask')\" v-bind=\"ptm('mask')\">\n                <slot name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                    <i v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" v-bind=\"ptm('loadingIcon')\" />\n                    <SpinnerIcon v-else spin :class=\"cx('loadingIcon')\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </template>\n        <IconField v-if=\"filter\" :unstyled=\"unstyled\" :pt=\"{ ...ptm('pcFilter'), ...ptm('pcFilterContainer') }\" :class=\"cx('pcFilterContainer')\">\n            <InputText v-model=\"filterValue\" autocomplete=\"off\" :class=\"cx('pcFilterInput')\" :placeholder=\"filterPlaceholder\" :unstyled=\"unstyled\" @keydown=\"onFilterKeydown\" :pt=\"ptm('pcFilterInput')\" />\n            <InputIcon :unstyled=\"unstyled\" :pt=\"ptm('pcFilterIconContainer')\">\n                <!--TODO: searchicon deprecated since v4.0-->\n                <slot :name=\"$slots.filtericon ? 'filtericon' : 'searchicon'\" :class=\"cx('filterIcon')\">\n                    <SearchIcon :class=\"cx('filterIcon')\" v-bind=\"ptm('filterIcon')\" />\n                </slot>\n            </InputIcon>\n        </IconField>\n        <div :class=\"cx('wrapper')\" :style=\"{ maxHeight: scrollHeight }\" v-bind=\"ptm('wrapper')\">\n            <slot name=\"header\" :value=\"value\" :expandedKeys=\"expandedKeys\" :selectionKeys=\"selectionKeys\" />\n            <ul :class=\"cx('rootChildren')\" role=\"tree\" :aria-labelledby=\"ariaLabelledby\" :aria-label=\"ariaLabel\" v-bind=\"ptm('rootChildren')\">\n                <TreeNode\n                    v-for=\"(node, index) of valueToRender\"\n                    :key=\"node.key\"\n                    :node=\"node\"\n                    :templates=\"$slots\"\n                    :level=\"level + 1\"\n                    :index=\"index\"\n                    :expandedKeys=\"d_expandedKeys\"\n                    @node-toggle=\"onNodeToggle\"\n                    @node-click=\"onNodeClick\"\n                    :selectionMode=\"selectionMode\"\n                    :selectionKeys=\"selectionKeys\"\n                    @checkbox-change=\"onCheckboxChange\"\n                    :loadingMode=\"loadingMode\"\n                    :unstyled=\"unstyled\"\n                    :pt=\"pt\"\n                ></TreeNode>\n            </ul>\n            <slot name=\"footer\" :value=\"value\" :expandedKeys=\"expandedKeys\" :selectionKeys=\"selectionKeys\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport { isFunction, resolveFieldData } from '@primeuix/utils/object';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport BaseTree from './BaseTree.vue';\nimport TreeNode from './TreeNode.vue';\n\nexport default {\n    name: 'Tree',\n    extends: BaseTree,\n    inheritAttrs: false,\n    emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect', 'filter'],\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            filterValue: null\n        };\n    },\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        }\n    },\n    methods: {\n        onNodeToggle(node) {\n            const key = node.key;\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            } else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = { ...this.d_expandedKeys };\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.selectionMode != null && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check) this.$emit('node-select', event.node);\n            else this.$emit('node-unselect', event.node);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[node.key];\n                }\n\n                this.$emit('node-unselect', node);\n            } else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : this.selectionKeys ? { ...this.selectionKeys } : {};\n                }\n\n                _selectionKeys[node.key] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = {};\n                    _selectionKeys[node.key] = true;\n                    this.$emit('node-select', node);\n                }\n            } else {\n                if (selected) {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[node.key];\n\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n                    _selectionKeys[node.key] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        isNodeSelected(node) {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[node.key] === true : false;\n        },\n        isChecked(node) {\n            return this.selectionKeys ? this.selectionKeys[node.key] && this.selectionKeys[node.key].checked : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        onFilterKeydown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n                event.preventDefault();\n            }\n\n            this.$emit('filter', { originalEvent: event, value: event.target.value });\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n\n                if (node.children) {\n                    let childNodes = [...node.children];\n\n                    node.children = [];\n\n                    for (let childNode of childNodes) {\n                        let copyChildNode = { ...childNode };\n\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, { searchFields, filterText, strict }) {\n            let matched = false;\n\n            for (let field of searchFields) {\n                let fieldValue = String(resolveFieldData(node, field)).toLocaleLowerCase(this.filterLocale);\n\n                if (fieldValue.indexOf(filterText) > -1) {\n                    matched = true;\n                }\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, { searchFields, filterText, strict }) || matched;\n            }\n\n            return matched;\n        }\n    },\n    computed: {\n        filteredValue() {\n            let filteredNodes = [];\n            const searchFields = isFunction(this.filterBy) ? [this.filterBy] : this.filterBy.split(',');\n            const filterText = this.filterValue.trim().toLocaleLowerCase(this.filterLocale);\n            const strict = this.filterMode === 'strict';\n\n            for (let node of this.value) {\n                let _node = { ...node };\n                let paramsWithoutNode = { searchFields, filterText, strict };\n\n                if (\n                    (strict && (this.findFilteredNodes(_node, paramsWithoutNode) || this.isFilterMatched(_node, paramsWithoutNode))) ||\n                    (!strict && (this.isFilterMatched(_node, paramsWithoutNode) || this.findFilteredNodes(_node, paramsWithoutNode)))\n                ) {\n                    filteredNodes.push(_node);\n                }\n            }\n\n            return filteredNodes;\n        },\n        valueToRender() {\n            if (this.filterValue && this.filterValue.trim().length > 0) return this.filteredValue;\n            else return this.value;\n        }\n    },\n    components: {\n        TreeNode,\n        InputText,\n        InputIcon,\n        IconField,\n        SearchIcon,\n        SpinnerIcon\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}