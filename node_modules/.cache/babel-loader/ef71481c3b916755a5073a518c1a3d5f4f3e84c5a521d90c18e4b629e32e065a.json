{"ast":null,"code":"import { UniqueComponentId } from '@primevue/core/utils';\nimport Dialog from 'primevue/dialog';\nimport DynamicDialogEventBus from 'primevue/dynamicdialogeventbus';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport DynamicDialogStyle from 'primevue/dynamicdialog/style';\nimport { resolveComponent, openBlock, createElementBlock, Fragment, renderList, createBlock, mergeProps, createSlots, withCtx, resolveDynamicComponent } from 'vue';\nvar script$1 = {\n  name: 'BaseDynamicDialog',\n  \"extends\": BaseComponent,\n  props: {},\n  style: DynamicDialogStyle,\n  provide: function provide() {\n    return {\n      $pcDynamicDialog: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script = {\n  name: 'DynamicDialog',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  data: function data() {\n    return {\n      instanceMap: {}\n    };\n  },\n  openListener: null,\n  closeListener: null,\n  currentInstance: null,\n  mounted: function mounted() {\n    var _this = this;\n    this.openListener = function (_ref) {\n      var instance = _ref.instance;\n      var key = UniqueComponentId() + '_dynamic_dialog';\n      instance.visible = true;\n      instance.key = key;\n      _this.instanceMap[key] = instance;\n    };\n    this.closeListener = function (_ref2) {\n      var instance = _ref2.instance,\n        params = _ref2.params;\n      var key = instance.key;\n      var currentInstance = _this.instanceMap[key];\n      if (currentInstance) {\n        currentInstance.visible = false;\n        currentInstance.options.onClose && currentInstance.options.onClose({\n          data: params,\n          type: 'config-close'\n        });\n        _this.currentInstance = currentInstance;\n      }\n    };\n    DynamicDialogEventBus.on('open', this.openListener);\n    DynamicDialogEventBus.on('close', this.closeListener);\n  },\n  beforeUnmount: function beforeUnmount() {\n    DynamicDialogEventBus.off('open', this.openListener);\n    DynamicDialogEventBus.off('close', this.closeListener);\n  },\n  methods: {\n    onDialogHide: function onDialogHide(instance) {\n      !this.currentInstance && instance.options.onClose && instance.options.onClose({\n        type: 'dialog-close'\n      });\n      delete this.instanceMap[instance.key];\n    },\n    onDialogAfterHide: function onDialogAfterHide() {\n      this.currentInstance && delete this.currentInstance;\n      this.currentInstance = null;\n    },\n    getTemplateItems: function getTemplateItems(template) {\n      return Array.isArray(template) ? template : [template];\n    }\n  },\n  components: {\n    DDialog: Dialog\n  }\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_DDialog = resolveComponent(\"DDialog\");\n  return openBlock(true), createElementBlock(Fragment, null, renderList($data.instanceMap, function (instance, key) {\n    return openBlock(), createBlock(_component_DDialog, mergeProps({\n      key: key,\n      visible: instance.visible,\n      \"onUpdate:visible\": function onUpdateVisible($event) {\n        return instance.visible = $event;\n      },\n      _instance: instance,\n      ref_for: true\n    }, instance.options.props, {\n      onHide: function onHide($event) {\n        return $options.onDialogHide(instance);\n      },\n      onAfterHide: $options.onDialogAfterHide\n    }), createSlots({\n      \"default\": withCtx(function () {\n        return [(openBlock(), createBlock(resolveDynamicComponent(instance.content), mergeProps({\n          ref_for: true\n        }, instance.options.emits), null, 16))];\n      }),\n      _: 2\n    }, [instance.options.templates && instance.options.templates.header ? {\n      name: \"header\",\n      fn: withCtx(function () {\n        return [(openBlock(true), createElementBlock(Fragment, null, renderList($options.getTemplateItems(instance.options.templates.header), function (header, index) {\n          return openBlock(), createBlock(resolveDynamicComponent(header), mergeProps({\n            key: index + '_header',\n            ref_for: true\n          }, instance.options.emits), null, 16);\n        }), 128))];\n      }),\n      key: \"0\"\n    } : undefined, instance.options.templates && instance.options.templates.footer ? {\n      name: \"footer\",\n      fn: withCtx(function () {\n        return [(openBlock(true), createElementBlock(Fragment, null, renderList($options.getTemplateItems(instance.options.templates.footer), function (footer, index) {\n          return openBlock(), createBlock(resolveDynamicComponent(footer), mergeProps({\n            key: index + '_footer',\n            ref_for: true\n          }, instance.options.emits), null, 16);\n        }), 128))];\n      }),\n      key: \"1\"\n    } : undefined]), 1040, [\"visible\", \"onUpdate:visible\", \"_instance\", \"onHide\", \"onAfterHide\"]);\n  }), 128);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","style","DynamicDialogStyle","provide","$pcDynamicDialog","$parentInstance","script","inheritAttrs","data","instanceMap","openListener","closeListener","currentInstance","mounted","_this","_ref","instance","key","UniqueComponentId","visible","_ref2","params","options","onClose","type","DynamicDialogEventBus","on","beforeUnmount","off","methods","onDialogHide","onDialogAfterHide","getTemplateItems","template","Array","isArray","components","DDialog","Dialog","openBlock","createElementBlock","Fragment","renderList","$data","createBlock","_component_DDialog","mergeProps","onUpdateVisible","$event","_instance","onHide","$options","onAfterHide","resolveDynamicComponent","content","ref_for","emits","templates","header","index","footer"],"sources":["../../src/dynamicdialog/BaseDynamicDialog.vue","../../src/dynamicdialog/DynamicDialog.vue","../../src/dynamicdialog/DynamicDialog.vue?vue&type=template&id=062216e0&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport DynamicDialogStyle from 'primevue/dynamicdialog/style';\n\nexport default {\n    name: 'BaseDynamicDialog',\n    extends: BaseComponent,\n    props: {},\n    style: DynamicDialogStyle,\n    provide() {\n        return {\n            $pcDynamicDialog: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <template v-for=\"(instance, key) in instanceMap\" :key=\"key\">\n        <DDialog v-model:visible=\"instance.visible\" :_instance=\"instance\" v-bind=\"instance.options.props\" @hide=\"onDialogHide(instance)\" @after-hide=\"onDialogAfterHide\">\n            <template v-if=\"instance.options.templates && instance.options.templates.header\" #header>\n                <component v-for=\"(header, index) in getTemplateItems(instance.options.templates.header)\" :is=\"header\" :key=\"index + '_header'\" v-bind=\"instance.options.emits\"></component>\n            </template>\n            <component :is=\"instance.content\" v-bind=\"instance.options.emits\"></component>\n            <template v-if=\"instance.options.templates && instance.options.templates.footer\" #footer>\n                <component v-for=\"(footer, index) in getTemplateItems(instance.options.templates.footer)\" :is=\"footer\" :key=\"index + '_footer'\" v-bind=\"instance.options.emits\"></component>\n            </template>\n        </DDialog>\n    </template>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Dialog from 'primevue/dialog';\nimport DynamicDialogEventBus from 'primevue/dynamicdialogeventbus';\nimport BaseDynamicDialog from './BaseDynamicDialog.vue';\n\nexport default {\n    name: 'DynamicDialog',\n    extends: BaseDynamicDialog,\n    inheritAttrs: false,\n    data() {\n        return {\n            instanceMap: {}\n        };\n    },\n    openListener: null,\n    closeListener: null,\n    currentInstance: null,\n    mounted() {\n        this.openListener = ({ instance }) => {\n            const key = UniqueComponentId() + '_dynamic_dialog';\n\n            instance.visible = true;\n            instance.key = key;\n            this.instanceMap[key] = instance;\n        };\n\n        this.closeListener = ({ instance, params }) => {\n            const key = instance.key;\n            const currentInstance = this.instanceMap[key];\n\n            if (currentInstance) {\n                currentInstance.visible = false;\n                currentInstance.options.onClose && currentInstance.options.onClose({ data: params, type: 'config-close' });\n\n                this.currentInstance = currentInstance;\n            }\n        };\n\n        DynamicDialogEventBus.on('open', this.openListener);\n        DynamicDialogEventBus.on('close', this.closeListener);\n    },\n    beforeUnmount() {\n        DynamicDialogEventBus.off('open', this.openListener);\n        DynamicDialogEventBus.off('close', this.closeListener);\n    },\n    methods: {\n        onDialogHide(instance) {\n            !this.currentInstance && instance.options.onClose && instance.options.onClose({ type: 'dialog-close' });\n            delete this.instanceMap[instance.key];\n        },\n        onDialogAfterHide() {\n            this.currentInstance && delete this.currentInstance;\n            this.currentInstance = null;\n        },\n        getTemplateItems(template) {\n            return Array.isArray(template) ? template : [template];\n        }\n    },\n    components: {\n        DDialog: Dialog\n    }\n};\n</script>\n","<template>\n    <template v-for=\"(instance, key) in instanceMap\" :key=\"key\">\n        <DDialog v-model:visible=\"instance.visible\" :_instance=\"instance\" v-bind=\"instance.options.props\" @hide=\"onDialogHide(instance)\" @after-hide=\"onDialogAfterHide\">\n            <template v-if=\"instance.options.templates && instance.options.templates.header\" #header>\n                <component v-for=\"(header, index) in getTemplateItems(instance.options.templates.header)\" :is=\"header\" :key=\"index + '_header'\" v-bind=\"instance.options.emits\"></component>\n            </template>\n            <component :is=\"instance.content\" v-bind=\"instance.options.emits\"></component>\n            <template v-if=\"instance.options.templates && instance.options.templates.footer\" #footer>\n                <component v-for=\"(footer, index) in getTemplateItems(instance.options.templates.footer)\" :is=\"footer\" :key=\"index + '_footer'\" v-bind=\"instance.options.emits\"></component>\n            </template>\n        </DDialog>\n    </template>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Dialog from 'primevue/dialog';\nimport DynamicDialogEventBus from 'primevue/dynamicdialogeventbus';\nimport BaseDynamicDialog from './BaseDynamicDialog.vue';\n\nexport default {\n    name: 'DynamicDialog',\n    extends: BaseDynamicDialog,\n    inheritAttrs: false,\n    data() {\n        return {\n            instanceMap: {}\n        };\n    },\n    openListener: null,\n    closeListener: null,\n    currentInstance: null,\n    mounted() {\n        this.openListener = ({ instance }) => {\n            const key = UniqueComponentId() + '_dynamic_dialog';\n\n            instance.visible = true;\n            instance.key = key;\n            this.instanceMap[key] = instance;\n        };\n\n        this.closeListener = ({ instance, params }) => {\n            const key = instance.key;\n            const currentInstance = this.instanceMap[key];\n\n            if (currentInstance) {\n                currentInstance.visible = false;\n                currentInstance.options.onClose && currentInstance.options.onClose({ data: params, type: 'config-close' });\n\n                this.currentInstance = currentInstance;\n            }\n        };\n\n        DynamicDialogEventBus.on('open', this.openListener);\n        DynamicDialogEventBus.on('close', this.closeListener);\n    },\n    beforeUnmount() {\n        DynamicDialogEventBus.off('open', this.openListener);\n        DynamicDialogEventBus.off('close', this.closeListener);\n    },\n    methods: {\n        onDialogHide(instance) {\n            !this.currentInstance && instance.options.onClose && instance.options.onClose({ type: 'dialog-close' });\n            delete this.instanceMap[instance.key];\n        },\n        onDialogAfterHide() {\n            this.currentInstance && delete this.currentInstance;\n            this.currentInstance = null;\n        },\n        getTemplateItems(template) {\n            return Array.isArray(template) ? template : [template];\n        }\n    },\n    components: {\n        DDialog: Dialog\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}