{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      tab: 'messages',\n      // Default tab is 'messages'\n      compose: {\n        recipient: '',\n        subject: '',\n        message: '',\n        attachment: null\n      },\n      messages: [],\n      // Combined inbox and sent messages\n      groupedMessages: {},\n      // Grouped messages by recipient\n      users: [] // List of users to populate the dropdown\n    };\n  },\n  mounted() {\n    this.fetchMessages(); // Fetch messages (both inbox and sent)\n    this.fetchUsers(); // Fetch the list of users\n  },\n  methods: {\n    async fetchUsers() {\n      try {\n        const response = await axios.get('http://127.0.0.1:8000/api/users', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`\n          }\n        });\n        this.users = response.data;\n      } catch (error) {\n        console.error(error);\n        alert('Failed to load users.');\n      }\n    },\n    async sendMessage() {\n      if (!this.compose.recipient || !this.compose.subject || !this.compose.message) {\n        alert('All fields are required.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('recipient', this.compose.recipient);\n      formData.append('subject', this.compose.subject);\n      formData.append('message', this.compose.message);\n      if (this.compose.attachment) {\n        formData.append('attachment', this.compose.attachment);\n      }\n      try {\n        await axios.post('http://127.0.0.1:8000/api/messages/send', formData, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        alert('Message sent successfully.');\n        this.fetchMessages(); // Refresh the messages after sending\n        this.compose = {\n          recipient: '',\n          subject: '',\n          message: '',\n          attachment: null\n        };\n      } catch (error) {\n        console.error(error);\n        alert('Failed to send message.');\n      }\n    },\n    async fetchMessages() {\n      try {\n        // Fetch both inbox and sent messages\n        const inboxResponse = await axios.get('http://127.0.0.1:8000/api/messages/inbox', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`\n          }\n        });\n        const sentResponse = await axios.get('http://127.0.0.1:8000/api/messages/sent', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`\n          }\n        });\n\n        // Combine inbox and sent messages into one array\n        this.messages = [...inboxResponse.data, ...sentResponse.data];\n\n        // Group messages by recipient\n        this.groupMessagesByRecipient();\n      } catch (error) {\n        console.error(error);\n        alert('Failed to load messages.');\n      }\n    },\n    groupMessagesByRecipient() {\n      // Clear existing grouped messages\n      this.groupedMessages = {};\n\n      // Group messages by recipient\n      this.messages.forEach(message => {\n        const recipientId = message.recipient_id;\n        if (!this.groupedMessages[recipientId]) {\n          this.groupedMessages[recipientId] = [];\n        }\n        this.groupedMessages[recipientId].push(message);\n      });\n    },\n    getUserNameById(id) {\n      const user = this.users.find(user => user.id === id);\n      return user ? user.name : 'Unknown User';\n    },\n    onFileChange(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.compose.attachment = file;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","tab","compose","recipient","subject","message","attachment","messages","groupedMessages","users","mounted","fetchMessages","fetchUsers","methods","response","get","headers","Authorization","localStorage","getItem","error","console","alert","sendMessage","formData","FormData","append","post","inboxResponse","sentResponse","groupMessagesByRecipient","forEach","recipientId","recipient_id","push","getUserNameById","id","user","find","name","onFileChange","event","file","target","files"],"sources":["C:\\Users\\darle\\solid-waste-management-system\\src\\components\\MessagePage.vue"],"sourcesContent":["<template>\r\n  <div class=\"space-y-8\">\r\n    <div class=\"max-w-5xl mx-auto p-6 bg-white rounded-lg shadow-md\">\r\n      <h2 class=\"text-xl font-semibold text-gray-800 mb-6\">Messaging</h2>\r\n\r\n      <!-- Tabs -->\r\n      <div class=\"flex border-b border-gray-200 mb-6\">\r\n        <button\r\n          @click=\"tab = 'compose'\"\r\n          class=\"px-4 py-2 focus:outline-none\"\r\n          :class=\"tab === 'compose' ? 'text-green-600 border-b-2 border-green-600' : 'text-gray-600'\"\r\n        >\r\n          Compose\r\n        </button>\r\n        <button\r\n          @click=\"tab = 'messages'\"\r\n          class=\"px-4 py-2 focus:outline-none\"\r\n          :class=\"tab === 'messages' ? 'text-green-600 border-b-2 border-green-600' : 'text-gray-600'\"\r\n        >\r\n          Messages\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Compose Tab -->\r\n      <div v-if=\"tab === 'compose'\" class=\"space-y-6\">\r\n        <h3 class=\"text-lg font-semibold text-gray-800\">Compose Message</h3>\r\n\r\n        <form @submit.prevent=\"sendMessage\" class=\"space-y-4\">\r\n          <!-- Recipient Dropdown -->\r\n          <div>\r\n            <label for=\"recipient\" class=\"block text-sm font-medium text-gray-700 mb-1\">Recipient</label>\r\n            <select\r\n              id=\"recipient\"\r\n              v-model=\"compose.recipient\"\r\n              class=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500\"\r\n            >\r\n              <option value=\"\" disabled>Select a recipient</option>\r\n              <option v-for=\"user in users\" :key=\"user.id\" :value=\"user.id\">{{ user.name }}</option>\r\n            </select>\r\n          </div>\r\n\r\n          <!-- Subject -->\r\n          <div>\r\n            <label for=\"subject\" class=\"block text-sm font-medium text-gray-700 mb-1\">Subject</label>\r\n            <input\r\n              id=\"subject\"\r\n              v-model=\"compose.subject\"\r\n              type=\"text\"\r\n              placeholder=\"Enter subject\"\r\n              class=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Message -->\r\n          <div>\r\n            <label for=\"message\" class=\"block text-sm font-medium text-gray-700 mb-1\">Message</label>\r\n            <textarea\r\n              id=\"message\"\r\n              v-model=\"compose.message\"\r\n              rows=\"5\"\r\n              placeholder=\"Write your message here...\"\r\n              class=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500\"\r\n            ></textarea>\r\n          </div>\r\n\r\n          <!-- Attach Image -->\r\n          <div>\r\n            <label for=\"attachment\" class=\"block text-sm font-medium text-gray-700 mb-1\">Attach Image</label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"attachment\"\r\n              accept=\"image/*\"\r\n              @change=\"onFileChange\"\r\n              class=\"w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Submit Button -->\r\n          <div class=\"flex justify-center\">\r\n            <button\r\n              type=\"submit\"\r\n              class=\"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500\"\r\n            >\r\n              Send\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <!-- Messages Tab -->\r\n      <div v-if=\"tab === 'messages'\" class=\"space-y-6\">\r\n        <h3 class=\"text-lg font-semibold text-gray-800\">Messages</h3>\r\n\r\n        <div v-for=\"(messages, recipientId) in groupedMessages\" :key=\"recipientId\" class=\"border-b pb-4 mb-4\">\r\n          <h4 class=\"text-lg font-semibold text-gray-800 mb-2\">{{ getUserNameById(recipientId) }}</h4>\r\n          <ul class=\"bg-white shadow rounded-lg p-4\">\r\n            <li v-for=\"message in messages\" :key=\"message.id\" class=\"border-b py-2\">\r\n              <strong>{{ message.subject }}</strong> - {{ message.message }}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      tab: 'messages', // Default tab is 'messages'\r\n      compose: {\r\n        recipient: '',\r\n        subject: '',\r\n        message: '',\r\n        attachment: null,\r\n      },\r\n      messages: [], // Combined inbox and sent messages\r\n      groupedMessages: {}, // Grouped messages by recipient\r\n      users: [], // List of users to populate the dropdown\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchMessages(); // Fetch messages (both inbox and sent)\r\n    this.fetchUsers(); // Fetch the list of users\r\n  },\r\n  methods: {\r\n    async fetchUsers() {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:8000/api/users', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`,\r\n          },\r\n        });\r\n        this.users = response.data;\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to load users.');\r\n      }\r\n    },\r\n    async sendMessage() {\r\n      if (!this.compose.recipient || !this.compose.subject || !this.compose.message) {\r\n        alert('All fields are required.');\r\n        return;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('recipient', this.compose.recipient);\r\n      formData.append('subject', this.compose.subject);\r\n      formData.append('message', this.compose.message);\r\n      if (this.compose.attachment) {\r\n        formData.append('attachment', this.compose.attachment);\r\n      }\r\n\r\n      try {\r\n        await axios.post('http://127.0.0.1:8000/api/messages/send', formData, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`,\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        });\r\n        alert('Message sent successfully.');\r\n        this.fetchMessages(); // Refresh the messages after sending\r\n        this.compose = { recipient: '', subject: '', message: '', attachment: null };\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to send message.');\r\n      }\r\n    },\r\n    async fetchMessages() {\r\n      try {\r\n        // Fetch both inbox and sent messages\r\n        const inboxResponse = await axios.get('http://127.0.0.1:8000/api/messages/inbox', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`,\r\n          },\r\n        });\r\n        const sentResponse = await axios.get('http://127.0.0.1:8000/api/messages/sent', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`,\r\n          },\r\n        });\r\n\r\n        // Combine inbox and sent messages into one array\r\n        this.messages = [...inboxResponse.data, ...sentResponse.data];\r\n\r\n        // Group messages by recipient\r\n        this.groupMessagesByRecipient();\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to load messages.');\r\n      }\r\n    },\r\n    groupMessagesByRecipient() {\r\n      // Clear existing grouped messages\r\n      this.groupedMessages = {};\r\n\r\n      // Group messages by recipient\r\n      this.messages.forEach((message) => {\r\n        const recipientId = message.recipient_id;\r\n        if (!this.groupedMessages[recipientId]) {\r\n          this.groupedMessages[recipientId] = [];\r\n        }\r\n        this.groupedMessages[recipientId].push(message);\r\n      });\r\n    },\r\n    getUserNameById(id) {\r\n      const user = this.users.find((user) => user.id === id);\r\n      return user ? user.name : 'Unknown User';\r\n    },\r\n    onFileChange(event) {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        this.compose.attachment = file;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}