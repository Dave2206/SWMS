{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard-actions\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"announcement-placeholder\"\n};\nconst _hoisted_4 = {\n  key: 2,\n  class: \"loading\"\n};\nconst _hoisted_5 = {\n  key: 3,\n  class: \"no-announcements\"\n};\nconst _hoisted_6 = {\n  key: 4,\n  class: \"announcement-feed\"\n};\nconst _hoisted_7 = {\n  class: \"announcement-header\"\n};\nconst _hoisted_8 = {\n  class: \"announcement-meta\"\n};\nconst _hoisted_9 = {\n  class: \"announcement-body\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"announcement-image\"\n};\nconst _hoisted_11 = [\"src\"];\nconst _hoisted_12 = {\n  class: \"announcement-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Button = _resolveComponent(\"Button\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.isLoggedIn ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, [_createElementVNode(\"h1\", null, \"Welcome, \" + _toDisplayString($data.username) + \"!\", 1), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_Button, {\n    label: \"Create Announcement\",\n    icon: \"pi pi-plus\",\n    class: \"p-button-success\",\n    onClick: $options.navigateToCreateAnnouncement\n  }, null, 8, [\"onClick\"])])], 64)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[0] || (_cache[0] = [_createElementVNode(\"h1\", {\n    class: \"text-2xl font-bold text-gray-800\"\n  }, \"Announcements\", -1)]))), $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"Loading announcements...\")) : $data.announcements.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _cache[1] || (_cache[1] = [_createElementVNode(\"p\", null, \"No announcements available. Be the first to create one!\", -1)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.announcements, announcement => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: announcement.id,\n      class: \"announcement-card\"\n    }, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", {\n      class: \"avatar\",\n      style: _normalizeStyle({\n        backgroundColor: $options.getAvatarBackgroundColor(announcement.author)\n      })\n    }, [_createElementVNode(\"span\", null, _toDisplayString($options.getInitials(announcement.author)), 1)], 4), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"h3\", null, _toDisplayString(announcement.subject), 1), _createElementVNode(\"small\", null, _toDisplayString($options.formatDate(announcement.created_at)), 1)])]), _createElementVNode(\"p\", _hoisted_9, _toDisplayString(announcement.body), 1), announcement.image_path ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"img\", {\n      src: `http://127.0.0.1:8000/storage/${announcement.image_path}`,\n      alt: \"Announcement Image\",\n      class: \"resized-image\"\n    }, null, 8, _hoisted_11)])) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"small\", null, \"Effective Date: \" + _toDisplayString($options.formatDate(announcement.effective_date)), 1), _cache[2] || (_cache[2] = _createElementVNode(\"br\", null, null, -1)), _createElementVNode(\"small\", null, \"Posted by: \" + _toDisplayString(announcement.author || \"Unknown\"), 1)])]);\n  }), 128))])]))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$data","isLoggedIn","_Fragment","_createElementVNode","_toDisplayString","username","_hoisted_2","_createVNode","_component_Button","label","icon","onClick","$options","navigateToCreateAnnouncement","_hoisted_3","_cache","loading","_hoisted_4","announcements","length","_hoisted_5","_hoisted_6","_renderList","announcement","id","_hoisted_7","style","_normalizeStyle","backgroundColor","getAvatarBackgroundColor","author","getInitials","_hoisted_8","subject","formatDate","created_at","_hoisted_9","body","image_path","_hoisted_10","src","alt","_hoisted_11","_createCommentVNode","_hoisted_12","effective_date"],"sources":["C:\\Users\\darle\\solid-waste-management-system\\src\\components\\DashboardPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <!-- Conditional rendering based on login status -->\r\n    <template v-if=\"isLoggedIn\">\r\n      <h1>Welcome, {{ username }}!</h1>\r\n\r\n      <div class=\"dashboard-actions\">\r\n        <Button \r\n          label=\"Create Announcement\" \r\n          icon=\"pi pi-plus\" \r\n          class=\"p-button-success\" \r\n          @click=\"navigateToCreateAnnouncement\" \r\n        />\r\n      </div>\r\n    </template>\r\n        <!-- Not Logged In Message -->\r\n  <template v-else>\r\n  <div class=\"announcement-placeholder\">\r\n    <h1 class=\"text-2xl font-bold text-gray-800\">Announcements</h1>\r\n  </div>\r\n</template>\r\n      <div v-if=\"loading\" class=\"loading\">Loading announcements...</div>\r\n\r\n      <div v-else-if=\"announcements.length === 0\" class=\"no-announcements\">\r\n        <p>No announcements available. Be the first to create one!</p>\r\n      </div>\r\n\r\n      <div v-else class=\"announcement-feed\">\r\n        <ul>\r\n          <li v-for=\"announcement in announcements\" :key=\"announcement.id\" class=\"announcement-card\">\r\n            <div class=\"announcement-header\">\r\n              <div class=\"avatar\" :style=\"{ backgroundColor: getAvatarBackgroundColor(announcement.author) }\">\r\n                <span>{{ getInitials(announcement.author) }}</span>\r\n              </div>\r\n              <div class=\"announcement-meta\">\r\n                <h3>{{ announcement.subject }}</h3>\r\n                <small>{{ formatDate(announcement.created_at) }}</small>\r\n              </div>\r\n            </div>\r\n\r\n            <p class=\"announcement-body\">{{ announcement.body }}</p>\r\n\r\n            <div v-if=\"announcement.image_path\" class=\"announcement-image\">\r\n              <img \r\n                :src=\"`http://127.0.0.1:8000/storage/${announcement.image_path}`\" \r\n                alt=\"Announcement Image\" \r\n                class=\"resized-image\"\r\n              />\r\n            </div>\r\n\r\n            <div class=\"announcement-footer\">\r\n              <small>Effective Date: {{ formatDate(announcement.effective_date) }}</small>\r\n              <br />\r\n              <small>Posted by: {{ announcement.author || \"Unknown\" }}</small>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { format } from \"date-fns\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: \"\", // Logged-in user's username\r\n      announcements: [], // List of announcements\r\n      loading: true, // Loading state\r\n      isLoggedIn: false, // Check if the user is logged in\r\n    };\r\n  },\r\n  created() {\r\n    this.checkAuthentication(); // Check login status\r\n    this.fetchAnnouncements(); // Fetch announcements\r\n  },\r\n  methods: {\r\n    checkAuthentication() {\r\n      const token = localStorage.getItem(\"auth_token\");\r\n      if (token) {\r\n        this.isLoggedIn = true;\r\n        this.fetchUserData();\r\n      }\r\n    },\r\n    async fetchUserData() {\r\n      try {\r\n        const response = await axios.get(\"http://127.0.0.1:8000/api/user/profile\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth_token\")}`,\r\n          },\r\n        });\r\n        this.username = response.data.username || \"User\"; // Fallback if no username is provided\r\n      } catch (error) {\r\n        console.error(\"Error fetching user data:\", error);\r\n      }\r\n    },\r\n    async fetchAnnouncements() {\r\n      try {\r\n        const response = await axios.get(\"http://127.0.0.1:8000/api/announcements\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth_token\")}`,\r\n          },\r\n        });\r\n        this.announcements = response.data.data || []; // Handle API response\r\n      } catch (error) {\r\n        console.error(\"Error fetching announcements:\", error);\r\n      } finally {\r\n        this.loading = false; // End loading state\r\n      }\r\n    },\r\n    formatDate(date) {\r\n      return format(new Date(date), \"MMMM d, yyyy h:mm a\"); // Format the date\r\n    },\r\n    navigateToCreateAnnouncement() {\r\n      this.$router.push({ name: \"AnnouncementPage\" }); // Navigate to the create announcement page\r\n    },\r\n    getInitials(name) {\r\n      if (!name) return \"\"; // Check if the name is available\r\n      const nameParts = name.split(\" \");\r\n      const firstName = nameParts[0] || \"\";\r\n      const lastName = nameParts[1] || \"\";\r\n      return (firstName[0] || \"\") + (lastName[0] || \"\"); // Return initials\r\n    },\r\n    getAvatarBackgroundColor(name) {\r\n      if (!name) return \"#007bff\"; // Default color if no name is provided\r\n      const colors = [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A6\", \"#FFC300\", \"#FF6347\", \"#32CD32\"];\r\n      const index = name.charCodeAt(0) % colors.length; // Pick color based on first character of name\r\n      return colors[index];\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 20px;\r\n}\r\n\r\nh1 {\r\n  font-size: 2rem;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.dashboard-actions {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.loading,\r\n.no-announcements {\r\n  text-align: center;\r\n  font-size: 1.2rem;\r\n  color: #777;\r\n}\r\n\r\n.announcement-feed {\r\n  margin-top: 20px;\r\n}\r\n\r\n.announcement-card {\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 10px;\r\n  border: 1px solid #ddd;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.announcement-card:hover {\r\n  transform: scale(1.02);\r\n}\r\n\r\n.announcement-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n  color: white;\r\n  margin-right: 15px;\r\n  background-color: #007bff; /* Default background color */\r\n}\r\n\r\n.announcement-meta {\r\n  flex: 1;\r\n}\r\n\r\n.announcement-meta h3 {\r\n  font-size: 1.2rem;\r\n  margin: 0;\r\n  font-weight: bold;\r\n}\r\n\r\n.announcement-meta small {\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n}\r\n\r\n.announcement-body {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin: 15px 0;\r\n}\r\n\r\n.announcement-image img {\r\n  width: 100%;\r\n  max-height: 300px;\r\n  object-fit: cover;\r\n  border-radius: 10px;\r\n  margin-top: 15px;\r\n}\r\n\r\n.announcement-footer {\r\n  font-size: 0.9rem;\r\n  color: #777;\r\n  margin-top: 15px;\r\n}\r\n\r\n.resized-image {\r\n  max-width: 100%;\r\n  max-height: 400px;\r\n  object-fit: contain;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n  padding: 8px 20px;\r\n  background-color: #007bff;\r\n  border: none;\r\n  color: white;\r\n  font-size: 1rem;\r\n  border-radius: 5px;\r\n}\r\n\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EAKbA,KAAK,EAAC;AAAmB;;EANpCC,GAAA;EAiBOD,KAAK,EAAC;;;EAjBbC,GAAA;EAqB0BD,KAAK,EAAC;;;EArBhCC,GAAA;EAuBkDD,KAAK,EAAC;;;EAvBxDC,GAAA;EA2BkBD,KAAK,EAAC;;;EAGPA,KAAK,EAAC;AAAqB;;EAIzBA,KAAK,EAAC;AAAmB;;EAM7BA,KAAK,EAAC;AAAmB;;EAxCxCC,GAAA;EA0CgDD,KAAK,EAAC;;oBA1CtD;;EAkDiBA,KAAK,EAAC;AAAqB;;;uBAjD1CE,mBAAA,CAyDM,OAzDNC,UAyDM,GAvDYC,KAAA,CAAAC,UAAU,I,cAA1BH,mBAAA,CAWWI,SAAA;IAdfL,GAAA;EAAA,IAIMM,mBAAA,CAAiC,YAA7B,WAAS,GAAAC,gBAAA,CAAGJ,KAAA,CAAAK,QAAQ,IAAG,GAAC,MAE5BF,mBAAA,CAOM,OAPNG,UAOM,GANJC,YAAA,CAKEC,iBAAA;IAJAC,KAAK,EAAC,qBAAqB;IAC3BC,IAAI,EAAC,YAAY;IACjBd,KAAK,EAAC,kBAAkB;IACvBe,OAAK,EAAEC,QAAA,CAAAC;qDAMhBf,mBAAA,CAEM,OAFNgB,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJZ,mBAAA,CAA+D;IAA3DP,KAAK,EAAC;EAAkC,GAAC,eAAa,M,KAG7CI,KAAA,CAAAgB,OAAO,I,cAAlBlB,mBAAA,CAAkE,OAAlEmB,UAAkE,EAA9B,0BAAwB,KAE5CjB,KAAA,CAAAkB,aAAa,CAACC,MAAM,U,cAApCrB,mBAAA,CAEM,OAFNsB,UAEM,EAAAL,MAAA,QAAAA,MAAA,OADJZ,mBAAA,CAA8D,WAA3D,yDAAuD,M,qBAG5DL,mBAAA,CA8BM,OA9BNuB,UA8BM,GA7BJlB,mBAAA,CA4BK,c,kBA3BHL,mBAAA,CA0BKI,SAAA,QAvDfoB,WAAA,CA6BqCtB,KAAA,CAAAkB,aAAa,EAA7BK,YAAY;yBAAvBzB,mBAAA,CA0BK;MA1BsCD,GAAG,EAAE0B,YAAY,CAACC,EAAE;MAAE5B,KAAK,EAAC;QACrEO,mBAAA,CAQM,OARNsB,UAQM,GAPJtB,mBAAA,CAEM;MAFDP,KAAK,EAAC,QAAQ;MAAE8B,KAAK,EA/BxCC,eAAA;QAAAC,eAAA,EA+B6DhB,QAAA,CAAAiB,wBAAwB,CAACN,YAAY,CAACO,MAAM;MAAA;QACzF3B,mBAAA,CAAmD,cAAAC,gBAAA,CAA1CQ,QAAA,CAAAmB,WAAW,CAACR,YAAY,CAACO,MAAM,O,MAE1C3B,mBAAA,CAGM,OAHN6B,UAGM,GAFJ7B,mBAAA,CAAmC,YAAAC,gBAAA,CAA5BmB,YAAY,CAACU,OAAO,OAC3B9B,mBAAA,CAAwD,eAAAC,gBAAA,CAA9CQ,QAAA,CAAAsB,UAAU,CAACX,YAAY,CAACY,UAAU,O,KAIhDhC,mBAAA,CAAwD,KAAxDiC,UAAwD,EAAAhC,gBAAA,CAAxBmB,YAAY,CAACc,IAAI,OAEtCd,YAAY,CAACe,UAAU,I,cAAlCxC,mBAAA,CAMM,OANNyC,WAMM,GALJpC,mBAAA,CAIE;MAHCqC,GAAG,mCAAmCjB,YAAY,CAACe,UAAU;MAC9DG,GAAG,EAAC,oBAAoB;MACxB7C,KAAK,EAAC;gBA9CtB8C,WAAA,E,KAAAC,mBAAA,YAkDYxC,mBAAA,CAIM,OAJNyC,WAIM,GAHJzC,mBAAA,CAA4E,eAArE,kBAAgB,GAAAC,gBAAA,CAAGQ,QAAA,CAAAsB,UAAU,CAACX,YAAY,CAACsB,cAAc,Q,0BAChE1C,mBAAA,CAAM,wBACNA,mBAAA,CAAgE,eAAzD,aAAW,GAAAC,gBAAA,CAAGmB,YAAY,CAACO,MAAM,mB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}