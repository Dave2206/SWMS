{"ast":null,"code":"import { getWidth, isRTL, findSingle, getOuterHeight, getOffset, getOuterWidth, getHeight } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TabListStyle from 'primevue/tablist/style';\nimport { resolveDirective, openBlock, createElementBlock, mergeProps, withDirectives, createBlock, resolveDynamicComponent, createCommentVNode, createElementVNode, renderSlot } from 'vue';\nvar script$1 = {\n  name: 'BaseTabList',\n  \"extends\": BaseComponent,\n  props: {},\n  style: TabListStyle,\n  provide: function provide() {\n    return {\n      $pcTabList: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script = {\n  name: 'TabList',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  inject: ['$pcTabs'],\n  data: function data() {\n    return {\n      isPrevButtonEnabled: false,\n      isNextButtonEnabled: true\n    };\n  },\n  resizeObserver: undefined,\n  watch: {\n    showNavigators: function showNavigators(newValue) {\n      newValue ? this.bindResizeObserver() : this.unbindResizeObserver();\n    },\n    activeValue: {\n      flush: 'post',\n      handler: function handler() {\n        this.updateInkBar();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.$nextTick(function () {\n      _this.updateInkBar();\n    });\n    if (this.showNavigators) {\n      this.updateButtonState();\n      this.bindResizeObserver();\n    }\n  },\n  updated: function updated() {\n    this.showNavigators && this.updateButtonState();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindResizeObserver();\n  },\n  methods: {\n    onScroll: function onScroll(event) {\n      this.showNavigators && this.updateButtonState();\n      event.preventDefault();\n    },\n    onPrevButtonClick: function onPrevButtonClick() {\n      var content = this.$refs.content;\n      var buttonWidths = this.getVisibleButtonWidths();\n      var width = getWidth(content) - buttonWidths;\n      var currentScrollLeft = Math.abs(content.scrollLeft);\n      var scrollStep = width * 0.8;\n      var targetScrollLeft = currentScrollLeft - scrollStep;\n      var scrollLeft = Math.max(targetScrollLeft, 0);\n      content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n    },\n    onNextButtonClick: function onNextButtonClick() {\n      var content = this.$refs.content;\n      var buttonWidths = this.getVisibleButtonWidths();\n      var width = getWidth(content) - buttonWidths;\n      var currentScrollLeft = Math.abs(content.scrollLeft);\n      var scrollStep = width * 0.8;\n      var targetScrollLeft = currentScrollLeft + scrollStep;\n      var maxScrollLeft = content.scrollWidth - width;\n      var scrollLeft = Math.min(targetScrollLeft, maxScrollLeft);\n      content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n    },\n    bindResizeObserver: function bindResizeObserver() {\n      var _this2 = this;\n      this.resizeObserver = new ResizeObserver(function () {\n        return _this2.updateButtonState();\n      });\n      this.resizeObserver.observe(this.$refs.list);\n    },\n    unbindResizeObserver: function unbindResizeObserver() {\n      var _this$resizeObserver;\n      (_this$resizeObserver = this.resizeObserver) === null || _this$resizeObserver === void 0 || _this$resizeObserver.unobserve(this.$refs.list);\n      this.resizeObserver = undefined;\n    },\n    updateInkBar: function updateInkBar() {\n      var _this$$refs = this.$refs,\n        content = _this$$refs.content,\n        inkbar = _this$$refs.inkbar,\n        tabs = _this$$refs.tabs;\n      var activeTab = findSingle(content, '[data-pc-name=\"tab\"][data-p-active=\"true\"]');\n      if (this.$pcTabs.isVertical()) {\n        inkbar.style.height = getOuterHeight(activeTab) + 'px';\n        inkbar.style.top = getOffset(activeTab).top - getOffset(tabs).top + 'px';\n      } else {\n        inkbar.style.width = getOuterWidth(activeTab) + 'px';\n        inkbar.style.left = getOffset(activeTab).left - getOffset(tabs).left + 'px';\n      }\n    },\n    updateButtonState: function updateButtonState() {\n      var _this$$refs2 = this.$refs,\n        list = _this$$refs2.list,\n        content = _this$$refs2.content;\n      var scrollTop = content.scrollTop,\n        scrollWidth = content.scrollWidth,\n        scrollHeight = content.scrollHeight,\n        offsetWidth = content.offsetWidth,\n        offsetHeight = content.offsetHeight;\n      var scrollLeft = Math.abs(content.scrollLeft);\n      var _ref = [getWidth(content), getHeight(content)],\n        width = _ref[0],\n        height = _ref[1];\n      if (this.$pcTabs.isVertical()) {\n        this.isPrevButtonEnabled = scrollTop !== 0;\n        this.isNextButtonEnabled = list.offsetHeight >= offsetHeight && parseInt(scrollTop) !== scrollHeight - height;\n      } else {\n        this.isPrevButtonEnabled = scrollLeft !== 0;\n        this.isNextButtonEnabled = list.offsetWidth >= offsetWidth && parseInt(scrollLeft) !== scrollWidth - width;\n      }\n    },\n    getVisibleButtonWidths: function getVisibleButtonWidths() {\n      var _this$$refs3 = this.$refs,\n        prevButton = _this$$refs3.prevButton,\n        nextButton = _this$$refs3.nextButton;\n      var width = 0;\n      if (this.showNavigators) {\n        width = ((prevButton === null || prevButton === void 0 ? void 0 : prevButton.offsetWidth) || 0) + ((nextButton === null || nextButton === void 0 ? void 0 : nextButton.offsetWidth) || 0);\n      }\n      return width;\n    }\n  },\n  computed: {\n    templates: function templates() {\n      return this.$pcTabs.$slots;\n    },\n    activeValue: function activeValue() {\n      return this.$pcTabs.d_value;\n    },\n    showNavigators: function showNavigators() {\n      return this.$pcTabs.scrollable && this.$pcTabs.showNavigators;\n    },\n    prevButtonAriaLabel: function prevButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n    },\n    nextButtonAriaLabel: function nextButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n    }\n  },\n  components: {\n    ChevronLeftIcon: ChevronLeftIcon,\n    ChevronRightIcon: ChevronRightIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\nvar _hoisted_1 = [\"aria-label\", \"tabindex\"];\nvar _hoisted_2 = [\"aria-orientation\"];\nvar _hoisted_3 = [\"aria-label\", \"tabindex\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"list\",\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [$options.showNavigators && $data.isPrevButtonEnabled ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 0,\n    ref: \"prevButton\",\n    \"class\": _ctx.cx('prevButton'),\n    \"aria-label\": $options.prevButtonAriaLabel,\n    tabindex: $options.$pcTabs.tabindex,\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.onPrevButtonClick && $options.onPrevButtonClick.apply($options, arguments);\n    })\n  }, _ctx.ptm('prevButton'), {\n    \"data-pc-group-section\": \"navigator\"\n  }), [(openBlock(), createBlock(resolveDynamicComponent($options.templates.previcon || 'ChevronLeftIcon'), mergeProps({\n    \"aria-hidden\": \"true\"\n  }, _ctx.ptm('prevIcon')), null, 16))], 16, _hoisted_1)), [[_directive_ripple]]) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    ref: \"content\",\n    \"class\": _ctx.cx('content'),\n    onScroll: _cache[1] || (_cache[1] = function () {\n      return $options.onScroll && $options.onScroll.apply($options, arguments);\n    })\n  }, _ctx.ptm('content')), [createElementVNode(\"div\", mergeProps({\n    ref: \"tabs\",\n    \"class\": _ctx.cx('tabList'),\n    role: \"tablist\",\n    \"aria-orientation\": $options.$pcTabs.orientation || 'horizontal'\n  }, _ctx.ptm('tabList')), [renderSlot(_ctx.$slots, \"default\"), createElementVNode(\"span\", mergeProps({\n    ref: \"inkbar\",\n    \"class\": _ctx.cx('activeBar'),\n    role: \"presentation\",\n    \"aria-hidden\": \"true\"\n  }, _ctx.ptm('activeBar')), null, 16)], 16, _hoisted_2)], 16), $options.showNavigators && $data.isNextButtonEnabled ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 1,\n    ref: \"nextButton\",\n    \"class\": _ctx.cx('nextButton'),\n    \"aria-label\": $options.nextButtonAriaLabel,\n    tabindex: $options.$pcTabs.tabindex,\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.onNextButtonClick && $options.onNextButtonClick.apply($options, arguments);\n    })\n  }, _ctx.ptm('nextButton'), {\n    \"data-pc-group-section\": \"navigator\"\n  }), [(openBlock(), createBlock(resolveDynamicComponent($options.templates.nexticon || 'ChevronRightIcon'), mergeProps({\n    \"aria-hidden\": \"true\"\n  }, _ctx.ptm('nextIcon')), null, 16))], 16, _hoisted_3)), [[_directive_ripple]]) : createCommentVNode(\"\", true)], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","style","TabListStyle","provide","$pcTabList","$parentInstance","script","inheritAttrs","inject","data","isPrevButtonEnabled","isNextButtonEnabled","resizeObserver","undefined","watch","showNavigators","newValue","bindResizeObserver","unbindResizeObserver","activeValue","flush","handler","updateInkBar","mounted","_this","$nextTick","updateButtonState","updated","beforeUnmount","methods","onScroll","event","preventDefault","onPrevButtonClick","content","$refs","buttonWidths","getVisibleButtonWidths","width","getWidth","currentScrollLeft","Math","abs","scrollLeft","scrollStep","targetScrollLeft","max","isRTL","onNextButtonClick","maxScrollLeft","scrollWidth","min","_this2","ResizeObserver","observe","list","_this$resizeObserver","unobserve","_this$$refs","inkbar","tabs","activeTab","findSingle","$pcTabs","isVertical","height","getOuterHeight","top","getOffset","getOuterWidth","left","_this$$refs2","scrollTop","scrollHeight","offsetWidth","offsetHeight","_ref","getHeight","parseInt","_this$$refs3","prevButton","nextButton","computed","templates","$slots","d_value","scrollable","prevButtonAriaLabel","$primevue","config","locale","aria","previous","nextButtonAriaLabel","next","components","ChevronLeftIcon","ChevronRightIcon","directives","ripple","Ripple","openBlock","createElementBlock","mergeProps","ref","_ctx","cx","ptmi","$options","$data","withDirectives","tabindex","onClick","_cache","apply","arguments","ptm","createBlock","resolveDynamicComponent","previcon","_hoisted_1","_directive_ripple","createCommentVNode","createElementVNode","role","orientation","renderSlot","_hoisted_2","nexticon","_hoisted_3"],"sources":["../../src/tablist/BaseTabList.vue","../../src/tablist/TabList.vue","../../src/tablist/TabList.vue?vue&type=template&id=ea331ab4&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TabListStyle from 'primevue/tablist/style';\n\nexport default {\n    name: 'BaseTabList',\n    extends: BaseComponent,\n    props: {},\n    style: TabListStyle,\n    provide() {\n        return {\n            $pcTabList: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div ref=\"list\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <button\n            v-if=\"showNavigators && isPrevButtonEnabled\"\n            ref=\"prevButton\"\n            v-ripple\n            :class=\"cx('prevButton')\"\n            :aria-label=\"prevButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onPrevButtonClick\"\n            v-bind=\"ptm('prevButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.previcon || 'ChevronLeftIcon'\" aria-hidden=\"true\" v-bind=\"ptm('prevIcon')\" />\n        </button>\n        <div ref=\"content\" :class=\"cx('content')\" @scroll=\"onScroll\" v-bind=\"ptm('content')\">\n            <div ref=\"tabs\" :class=\"cx('tabList')\" role=\"tablist\" :aria-orientation=\"$pcTabs.orientation || 'horizontal'\" v-bind=\"ptm('tabList')\">\n                <slot></slot>\n                <span ref=\"inkbar\" :class=\"cx('activeBar')\" role=\"presentation\" aria-hidden=\"true\" v-bind=\"ptm('activeBar')\"></span>\n            </div>\n        </div>\n        <button\n            v-if=\"showNavigators && isNextButtonEnabled\"\n            ref=\"nextButton\"\n            v-ripple\n            :class=\"cx('nextButton')\"\n            :aria-label=\"nextButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onNextButtonClick\"\n            v-bind=\"ptm('nextButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.nexticon || 'ChevronRightIcon'\" aria-hidden=\"true\" v-bind=\"ptm('nextIcon')\" />\n        </button>\n    </div>\n</template>\n\n<script>\nimport { findSingle, getHeight, getOffset, getOuterHeight, getOuterWidth, getWidth, isRTL } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport BaseTabList from './BaseTabList.vue';\n\nexport default {\n    name: 'TabList',\n    extends: BaseTabList,\n    inheritAttrs: false,\n    inject: ['$pcTabs'],\n    data() {\n        return {\n            isPrevButtonEnabled: false,\n            isNextButtonEnabled: true\n        };\n    },\n    resizeObserver: undefined,\n    watch: {\n        showNavigators(newValue) {\n            newValue ? this.bindResizeObserver() : this.unbindResizeObserver();\n        },\n        activeValue: {\n            flush: 'post',\n            handler() {\n                this.updateInkBar();\n            }\n        }\n    },\n    mounted() {\n        this.$nextTick(() => {\n            this.updateInkBar();\n        });\n\n        if (this.showNavigators) {\n            this.updateButtonState();\n            this.bindResizeObserver();\n        }\n    },\n    updated() {\n        this.showNavigators && this.updateButtonState();\n    },\n    beforeUnmount() {\n        this.unbindResizeObserver();\n    },\n    methods: {\n        onScroll(event) {\n            this.showNavigators && this.updateButtonState();\n\n            event.preventDefault();\n        },\n        onPrevButtonClick() {\n            const content = this.$refs.content;\n            const buttonWidths = this.getVisibleButtonWidths();\n            const width = getWidth(content) - buttonWidths;\n            const currentScrollLeft = Math.abs(content.scrollLeft);\n            const scrollStep = width * 0.8;\n            const targetScrollLeft = currentScrollLeft - scrollStep;\n            const scrollLeft = Math.max(targetScrollLeft, 0);\n\n            content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n        },\n        onNextButtonClick() {\n            const content = this.$refs.content;\n            const buttonWidths = this.getVisibleButtonWidths();\n            const width = getWidth(content) - buttonWidths;\n            const currentScrollLeft = Math.abs(content.scrollLeft);\n            const scrollStep = width * 0.8;\n            const targetScrollLeft = currentScrollLeft + scrollStep;\n            const maxScrollLeft = content.scrollWidth - width;\n            const scrollLeft = Math.min(targetScrollLeft, maxScrollLeft);\n\n            content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n        },\n        bindResizeObserver() {\n            this.resizeObserver = new ResizeObserver(() => this.updateButtonState());\n            this.resizeObserver.observe(this.$refs.list);\n        },\n        unbindResizeObserver() {\n            this.resizeObserver?.unobserve(this.$refs.list);\n            this.resizeObserver = undefined;\n        },\n        updateInkBar() {\n            const { content, inkbar, tabs } = this.$refs;\n            const activeTab = findSingle(content, '[data-pc-name=\"tab\"][data-p-active=\"true\"]');\n\n            if (this.$pcTabs.isVertical()) {\n                inkbar.style.height = getOuterHeight(activeTab) + 'px';\n                inkbar.style.top = getOffset(activeTab).top - getOffset(tabs).top + 'px';\n            } else {\n                inkbar.style.width = getOuterWidth(activeTab) + 'px';\n                inkbar.style.left = getOffset(activeTab).left - getOffset(tabs).left + 'px';\n            }\n        },\n        updateButtonState() {\n            const { list, content } = this.$refs;\n            const { scrollTop, scrollWidth, scrollHeight, offsetWidth, offsetHeight } = content;\n            const scrollLeft = Math.abs(content.scrollLeft);\n            const [width, height] = [getWidth(content), getHeight(content)];\n\n            if (this.$pcTabs.isVertical()) {\n                this.isPrevButtonEnabled = scrollTop !== 0;\n                this.isNextButtonEnabled = list.offsetHeight >= offsetHeight && parseInt(scrollTop) !== scrollHeight - height;\n            } else {\n                this.isPrevButtonEnabled = scrollLeft !== 0;\n                this.isNextButtonEnabled = list.offsetWidth >= offsetWidth && parseInt(scrollLeft) !== scrollWidth - width;\n            }\n        },\n        getVisibleButtonWidths() {\n            const { prevButton, nextButton } = this.$refs;\n            let width = 0;\n\n            if (this.showNavigators) {\n                width = (prevButton?.offsetWidth || 0) + (nextButton?.offsetWidth || 0);\n            }\n\n            return width;\n        }\n    },\n    computed: {\n        templates() {\n            return this.$pcTabs.$slots;\n        },\n        activeValue() {\n            return this.$pcTabs.d_value;\n        },\n        showNavigators() {\n            return this.$pcTabs.scrollable && this.$pcTabs.showNavigators;\n        },\n        prevButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n        },\n        nextButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n        }\n    },\n    components: {\n        ChevronLeftIcon,\n        ChevronRightIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <div ref=\"list\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <button\n            v-if=\"showNavigators && isPrevButtonEnabled\"\n            ref=\"prevButton\"\n            v-ripple\n            :class=\"cx('prevButton')\"\n            :aria-label=\"prevButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onPrevButtonClick\"\n            v-bind=\"ptm('prevButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.previcon || 'ChevronLeftIcon'\" aria-hidden=\"true\" v-bind=\"ptm('prevIcon')\" />\n        </button>\n        <div ref=\"content\" :class=\"cx('content')\" @scroll=\"onScroll\" v-bind=\"ptm('content')\">\n            <div ref=\"tabs\" :class=\"cx('tabList')\" role=\"tablist\" :aria-orientation=\"$pcTabs.orientation || 'horizontal'\" v-bind=\"ptm('tabList')\">\n                <slot></slot>\n                <span ref=\"inkbar\" :class=\"cx('activeBar')\" role=\"presentation\" aria-hidden=\"true\" v-bind=\"ptm('activeBar')\"></span>\n            </div>\n        </div>\n        <button\n            v-if=\"showNavigators && isNextButtonEnabled\"\n            ref=\"nextButton\"\n            v-ripple\n            :class=\"cx('nextButton')\"\n            :aria-label=\"nextButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onNextButtonClick\"\n            v-bind=\"ptm('nextButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.nexticon || 'ChevronRightIcon'\" aria-hidden=\"true\" v-bind=\"ptm('nextIcon')\" />\n        </button>\n    </div>\n</template>\n\n<script>\nimport { findSingle, getHeight, getOffset, getOuterHeight, getOuterWidth, getWidth, isRTL } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport BaseTabList from './BaseTabList.vue';\n\nexport default {\n    name: 'TabList',\n    extends: BaseTabList,\n    inheritAttrs: false,\n    inject: ['$pcTabs'],\n    data() {\n        return {\n            isPrevButtonEnabled: false,\n            isNextButtonEnabled: true\n        };\n    },\n    resizeObserver: undefined,\n    watch: {\n        showNavigators(newValue) {\n            newValue ? this.bindResizeObserver() : this.unbindResizeObserver();\n        },\n        activeValue: {\n            flush: 'post',\n            handler() {\n                this.updateInkBar();\n            }\n        }\n    },\n    mounted() {\n        this.$nextTick(() => {\n            this.updateInkBar();\n        });\n\n        if (this.showNavigators) {\n            this.updateButtonState();\n            this.bindResizeObserver();\n        }\n    },\n    updated() {\n        this.showNavigators && this.updateButtonState();\n    },\n    beforeUnmount() {\n        this.unbindResizeObserver();\n    },\n    methods: {\n        onScroll(event) {\n            this.showNavigators && this.updateButtonState();\n\n            event.preventDefault();\n        },\n        onPrevButtonClick() {\n            const content = this.$refs.content;\n            const buttonWidths = this.getVisibleButtonWidths();\n            const width = getWidth(content) - buttonWidths;\n            const currentScrollLeft = Math.abs(content.scrollLeft);\n            const scrollStep = width * 0.8;\n            const targetScrollLeft = currentScrollLeft - scrollStep;\n            const scrollLeft = Math.max(targetScrollLeft, 0);\n\n            content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n        },\n        onNextButtonClick() {\n            const content = this.$refs.content;\n            const buttonWidths = this.getVisibleButtonWidths();\n            const width = getWidth(content) - buttonWidths;\n            const currentScrollLeft = Math.abs(content.scrollLeft);\n            const scrollStep = width * 0.8;\n            const targetScrollLeft = currentScrollLeft + scrollStep;\n            const maxScrollLeft = content.scrollWidth - width;\n            const scrollLeft = Math.min(targetScrollLeft, maxScrollLeft);\n\n            content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n        },\n        bindResizeObserver() {\n            this.resizeObserver = new ResizeObserver(() => this.updateButtonState());\n            this.resizeObserver.observe(this.$refs.list);\n        },\n        unbindResizeObserver() {\n            this.resizeObserver?.unobserve(this.$refs.list);\n            this.resizeObserver = undefined;\n        },\n        updateInkBar() {\n            const { content, inkbar, tabs } = this.$refs;\n            const activeTab = findSingle(content, '[data-pc-name=\"tab\"][data-p-active=\"true\"]');\n\n            if (this.$pcTabs.isVertical()) {\n                inkbar.style.height = getOuterHeight(activeTab) + 'px';\n                inkbar.style.top = getOffset(activeTab).top - getOffset(tabs).top + 'px';\n            } else {\n                inkbar.style.width = getOuterWidth(activeTab) + 'px';\n                inkbar.style.left = getOffset(activeTab).left - getOffset(tabs).left + 'px';\n            }\n        },\n        updateButtonState() {\n            const { list, content } = this.$refs;\n            const { scrollTop, scrollWidth, scrollHeight, offsetWidth, offsetHeight } = content;\n            const scrollLeft = Math.abs(content.scrollLeft);\n            const [width, height] = [getWidth(content), getHeight(content)];\n\n            if (this.$pcTabs.isVertical()) {\n                this.isPrevButtonEnabled = scrollTop !== 0;\n                this.isNextButtonEnabled = list.offsetHeight >= offsetHeight && parseInt(scrollTop) !== scrollHeight - height;\n            } else {\n                this.isPrevButtonEnabled = scrollLeft !== 0;\n                this.isNextButtonEnabled = list.offsetWidth >= offsetWidth && parseInt(scrollLeft) !== scrollWidth - width;\n            }\n        },\n        getVisibleButtonWidths() {\n            const { prevButton, nextButton } = this.$refs;\n            let width = 0;\n\n            if (this.showNavigators) {\n                width = (prevButton?.offsetWidth || 0) + (nextButton?.offsetWidth || 0);\n            }\n\n            return width;\n        }\n    },\n    computed: {\n        templates() {\n            return this.$pcTabs.$slots;\n        },\n        activeValue() {\n            return this.$pcTabs.d_value;\n        },\n        showNavigators() {\n            return this.$pcTabs.scrollable && this.$pcTabs.showNavigators;\n        },\n        prevButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n        },\n        nextButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n        }\n    },\n    components: {\n        ChevronLeftIcon,\n        ChevronRightIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}