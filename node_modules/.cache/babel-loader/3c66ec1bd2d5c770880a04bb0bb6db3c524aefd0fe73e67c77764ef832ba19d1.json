{"ast":null,"code":"import { $dt } from '@primeuix/styled';\nimport { addStyle, absolutePosition, getOffset, addClass, focus, isClient, isTouchDevice, setAttribute } from '@primeuix/utils/dom';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport FocusTrap from 'primevue/focustrap';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport PopoverStyle from 'primevue/popover/style';\nimport { resolveComponent, resolveDirective, openBlock, createBlock, withCtx, createVNode, Transition, mergeProps, withDirectives, createElementBlock, renderSlot, createCommentVNode } from 'vue';\nvar script$1 = {\n  name: 'BasePopover',\n  \"extends\": BaseComponent,\n  props: {\n    dismissable: {\n      type: Boolean,\n      \"default\": true\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    baseZIndex: {\n      type: Number,\n      \"default\": 0\n    },\n    autoZIndex: {\n      type: Boolean,\n      \"default\": true\n    },\n    breakpoints: {\n      type: Object,\n      \"default\": null\n    },\n    closeOnEscape: {\n      type: Boolean,\n      \"default\": true\n    }\n  },\n  style: PopoverStyle,\n  provide: function provide() {\n    return {\n      $pcPopover: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script = {\n  name: 'Popover',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['show', 'hide'],\n  data: function data() {\n    return {\n      visible: false\n    };\n  },\n  watch: {\n    dismissable: {\n      immediate: true,\n      handler: function handler(newValue) {\n        if (newValue) {\n          this.bindOutsideClickListener();\n        } else {\n          this.unbindOutsideClickListener();\n        }\n      }\n    }\n  },\n  selfClick: false,\n  target: null,\n  eventTarget: null,\n  outsideClickListener: null,\n  scrollHandler: null,\n  resizeListener: null,\n  container: null,\n  styleElement: null,\n  overlayEventListener: null,\n  documentKeydownListener: null,\n  beforeUnmount: function beforeUnmount() {\n    if (this.dismissable) {\n      this.unbindOutsideClickListener();\n    }\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    this.destroyStyle();\n    this.unbindResizeListener();\n    this.target = null;\n    if (this.container && this.autoZIndex) {\n      ZIndex.clear(this.container);\n    }\n    if (this.overlayEventListener) {\n      OverlayEventBus.off('overlay-click', this.overlayEventListener);\n      this.overlayEventListener = null;\n    }\n    this.container = null;\n  },\n  mounted: function mounted() {\n    if (this.breakpoints) {\n      this.createStyle();\n    }\n  },\n  methods: {\n    toggle: function toggle(event, target) {\n      if (this.visible) this.hide();else this.show(event, target);\n    },\n    show: function show(event, target) {\n      this.visible = true;\n      this.eventTarget = event.currentTarget;\n      this.target = target || event.currentTarget;\n    },\n    hide: function hide() {\n      this.visible = false;\n    },\n    onContentClick: function onContentClick() {\n      this.selfClick = true;\n    },\n    onEnter: function onEnter(el) {\n      var _this = this;\n      addStyle(el, {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      });\n      this.alignOverlay();\n      if (this.dismissable) {\n        this.bindOutsideClickListener();\n      }\n      this.bindScrollListener();\n      this.bindResizeListener();\n      if (this.autoZIndex) {\n        ZIndex.set('overlay', el, this.baseZIndex + this.$primevue.config.zIndex.overlay);\n      }\n      this.overlayEventListener = function (e) {\n        if (_this.container.contains(e.target)) {\n          _this.selfClick = true;\n        }\n      };\n      this.focus();\n      OverlayEventBus.on('overlay-click', this.overlayEventListener);\n      this.$emit('show');\n      if (this.closeOnEscape) {\n        this.bindDocumentKeyDownListener();\n      }\n    },\n    onLeave: function onLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.unbindDocumentKeyDownListener();\n      OverlayEventBus.off('overlay-click', this.overlayEventListener);\n      this.overlayEventListener = null;\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      if (this.autoZIndex) {\n        ZIndex.clear(el);\n      }\n    },\n    alignOverlay: function alignOverlay() {\n      absolutePosition(this.container, this.target, false);\n      var containerOffset = getOffset(this.container);\n      var targetOffset = getOffset(this.target);\n      var arrowLeft = 0;\n      if (containerOffset.left < targetOffset.left) {\n        arrowLeft = targetOffset.left - containerOffset.left;\n      }\n      this.container.style.setProperty($dt('popover.arrow.left').name, \"\".concat(arrowLeft, \"px\"));\n      if (containerOffset.top < targetOffset.top) {\n        this.container.setAttribute('data-p-popover-flipped', 'true');\n        !this.isUnstyled && addClass(this.container, 'p-popover-flipped');\n      }\n    },\n    onContentKeydown: function onContentKeydown(event) {\n      if (event.code === 'Escape' && this.closeOnEscape) {\n        this.hide();\n        focus(this.target);\n      }\n    },\n    onButtonKeydown: function onButtonKeydown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n        case 'ArrowUp':\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          event.preventDefault();\n      }\n    },\n    focus: function focus() {\n      var focusTarget = this.container.querySelector('[autofocus]');\n      if (focusTarget) {\n        focusTarget.focus();\n      }\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (event.code === 'Escape' && this.closeOnEscape) {\n        this.visible = false;\n      }\n    },\n    bindDocumentKeyDownListener: function bindDocumentKeyDownListener() {\n      if (!this.documentKeydownListener) {\n        this.documentKeydownListener = this.onKeyDown.bind(this);\n        window.document.addEventListener('keydown', this.documentKeydownListener);\n      }\n    },\n    unbindDocumentKeyDownListener: function unbindDocumentKeyDownListener() {\n      if (this.documentKeydownListener) {\n        window.document.removeEventListener('keydown', this.documentKeydownListener);\n        this.documentKeydownListener = null;\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this2 = this;\n      if (!this.outsideClickListener && isClient()) {\n        this.outsideClickListener = function (event) {\n          if (_this2.visible && !_this2.selfClick && !_this2.isTargetClicked(event)) {\n            _this2.visible = false;\n          }\n          _this2.selfClick = false;\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n        this.selfClick = false;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this3 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, function () {\n          if (_this3.visible) {\n            _this3.visible = false;\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this4 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this4.visible && !isTouchDevice()) {\n            _this4.visible = false;\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    isTargetClicked: function isTargetClicked(event) {\n      return this.eventTarget && (this.eventTarget === event.target || this.eventTarget.contains(event.target));\n    },\n    containerRef: function containerRef(el) {\n      this.container = el;\n    },\n    createStyle: function createStyle() {\n      if (!this.styleElement && !this.isUnstyled) {\n        var _this$$primevue;\n        this.styleElement = document.createElement('style');\n        this.styleElement.type = 'text/css';\n        setAttribute(this.styleElement, 'nonce', (_this$$primevue = this.$primevue) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.config) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.csp) === null || _this$$primevue === void 0 ? void 0 : _this$$primevue.nonce);\n        document.head.appendChild(this.styleElement);\n        var innerHTML = '';\n        for (var breakpoint in this.breakpoints) {\n          innerHTML += \"\\n                        @media screen and (max-width: \".concat(breakpoint, \") {\\n                            .p-popover[\").concat(this.$attrSelector, \"] {\\n                                width: \").concat(this.breakpoints[breakpoint], \" !important;\\n                            }\\n                        }\\n                    \");\n        }\n        this.styleElement.innerHTML = innerHTML;\n      }\n    },\n    destroyStyle: function destroyStyle() {\n      if (this.styleElement) {\n        document.head.removeChild(this.styleElement);\n        this.styleElement = null;\n      }\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.target\n      });\n    }\n  },\n  directives: {\n    focustrap: FocusTrap,\n    ripple: Ripple\n  },\n  components: {\n    Portal: Portal\n  }\n};\nvar _hoisted_1 = [\"aria-modal\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_focustrap = resolveDirective(\"focustrap\");\n  return openBlock(), createBlock(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-popover\",\n        onEnter: $options.onEnter,\n        onLeave: $options.onLeave,\n        onAfterLeave: $options.onAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.visible ? withDirectives((openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.containerRef,\n            role: \"dialog\",\n            \"aria-modal\": $data.visible,\n            onClick: _cache[3] || (_cache[3] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            \"class\": _ctx.cx('root')\n          }, _ctx.ptmi('root')), [_ctx.$slots.container ? renderSlot(_ctx.$slots, \"container\", {\n            key: 0,\n            closeCallback: $options.hide,\n            keydownCallback: function keydownCallback(event) {\n              return $options.onButtonKeydown(event);\n            }\n          }) : (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 1,\n            \"class\": _ctx.cx('content'),\n            onClick: _cache[0] || (_cache[0] = function () {\n              return $options.onContentClick && $options.onContentClick.apply($options, arguments);\n            }),\n            onMousedown: _cache[1] || (_cache[1] = function () {\n              return $options.onContentClick && $options.onContentClick.apply($options, arguments);\n            }),\n            onKeydown: _cache[2] || (_cache[2] = function () {\n              return $options.onContentKeydown && $options.onContentKeydown.apply($options, arguments);\n            })\n          }, _ctx.ptm('content')), [renderSlot(_ctx.$slots, \"default\")], 16))], 16, _hoisted_1)), [[_directive_focustrap]]) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","dismissable","type","Boolean","appendTo","String","Object","baseZIndex","Number","autoZIndex","breakpoints","closeOnEscape","style","PopoverStyle","provide","$pcPopover","$parentInstance","script","inheritAttrs","emits","data","visible","watch","immediate","handler","newValue","bindOutsideClickListener","unbindOutsideClickListener","selfClick","target","eventTarget","outsideClickListener","scrollHandler","resizeListener","container","styleElement","overlayEventListener","documentKeydownListener","beforeUnmount","destroy","destroyStyle","unbindResizeListener","ZIndex","clear","OverlayEventBus","off","mounted","createStyle","methods","toggle","event","hide","show","currentTarget","onContentClick","onEnter","el","_this","addStyle","position","top","left","alignOverlay","bindScrollListener","bindResizeListener","set","$primevue","config","zIndex","overlay","e","contains","focus","on","$emit","bindDocumentKeyDownListener","onLeave","unbindScrollListener","unbindDocumentKeyDownListener","onAfterLeave","absolutePosition","containerOffset","getOffset","targetOffset","arrowLeft","setProperty","$dt","concat","setAttribute","isUnstyled","addClass","onContentKeydown","code","onButtonKeydown","preventDefault","focusTarget","querySelector","onKeyDown","bind","window","document","addEventListener","removeEventListener","_this2","isClient","isTargetClicked","_this3","ConnectedOverlayScrollHandler","_this4","isTouchDevice","containerRef","_this$$primevue","createElement","csp","nonce","head","appendChild","innerHTML","breakpoint","$attrSelector","removeChild","onOverlayClick","emit","originalEvent","directives","focustrap","FocusTrap","ripple","Ripple","components","Portal","createBlock","_component_Portal","_ctx","createVNode","Transition","mergeProps","$options","ptm","$data","withDirectives","openBlock","createElementBlock","ref","role","onClick","_cache","apply","arguments","cx","ptmi","$slots","renderSlot","closeCallback","keydownCallback","onMousedown","onKeydown","_hoisted_1","_directive_focustrap","createCommentVNode"],"sources":["../../src/popover/BasePopover.vue","../../src/popover/Popover.vue","../../src/popover/Popover.vue?vue&type=template&id=d6705c34&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport PopoverStyle from 'primevue/popover/style';\n\nexport default {\n    name: 'BasePopover',\n    extends: BaseComponent,\n    props: {\n        dismissable: {\n            type: Boolean,\n            default: true\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        baseZIndex: {\n            type: Number,\n            default: 0\n        },\n        autoZIndex: {\n            type: Boolean,\n            default: true\n        },\n        breakpoints: {\n            type: Object,\n            default: null\n        },\n        closeOnEscape: {\n            type: Boolean,\n            default: true\n        }\n    },\n    style: PopoverStyle,\n    provide() {\n        return {\n            $pcPopover: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <Portal :appendTo=\"appendTo\">\n        <transition name=\"p-popover\" @enter=\"onEnter\" @leave=\"onLeave\" @after-leave=\"onAfterLeave\" v-bind=\"ptm('transition')\">\n            <div v-if=\"visible\" :ref=\"containerRef\" v-focustrap role=\"dialog\" :aria-modal=\"visible\" @click=\"onOverlayClick\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n                <slot v-if=\"$slots.container\" name=\"container\" :closeCallback=\"hide\" :keydownCallback=\"(event) => onButtonKeydown(event)\"></slot>\n                <template v-else>\n                    <div :class=\"cx('content')\" @click=\"onContentClick\" @mousedown=\"onContentClick\" @keydown=\"onContentKeydown\" v-bind=\"ptm('content')\">\n                        <slot></slot>\n                    </div>\n                </template>\n            </div>\n        </transition>\n    </Portal>\n</template>\n\n<script>\nimport { $dt } from '@primeuix/styled';\nimport { absolutePosition, addClass, addStyle, focus, getOffset, isClient, isTouchDevice, setAttribute } from '@primeuix/utils/dom';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport FocusTrap from 'primevue/focustrap';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport BasePopover from './BasePopover.vue';\n\nexport default {\n    name: 'Popover',\n    extends: BasePopover,\n    inheritAttrs: false,\n    emits: ['show', 'hide'],\n    data() {\n        return {\n            visible: false\n        };\n    },\n    watch: {\n        dismissable: {\n            immediate: true,\n            handler(newValue) {\n                if (newValue) {\n                    this.bindOutsideClickListener();\n                } else {\n                    this.unbindOutsideClickListener();\n                }\n            }\n        }\n    },\n    selfClick: false,\n    target: null,\n    eventTarget: null,\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    container: null,\n    styleElement: null,\n    overlayEventListener: null,\n    documentKeydownListener: null,\n    beforeUnmount() {\n        if (this.dismissable) {\n            this.unbindOutsideClickListener();\n        }\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        this.destroyStyle();\n        this.unbindResizeListener();\n        this.target = null;\n\n        if (this.container && this.autoZIndex) {\n            ZIndex.clear(this.container);\n        }\n\n        if (this.overlayEventListener) {\n            OverlayEventBus.off('overlay-click', this.overlayEventListener);\n            this.overlayEventListener = null;\n        }\n\n        this.container = null;\n    },\n    mounted() {\n        if (this.breakpoints) {\n            this.createStyle();\n        }\n    },\n    methods: {\n        toggle(event, target) {\n            if (this.visible) this.hide();\n            else this.show(event, target);\n        },\n        show(event, target) {\n            this.visible = true;\n            this.eventTarget = event.currentTarget;\n            this.target = target || event.currentTarget;\n        },\n        hide() {\n            this.visible = false;\n        },\n        onContentClick() {\n            this.selfClick = true;\n        },\n        onEnter(el) {\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n\n            if (this.dismissable) {\n                this.bindOutsideClickListener();\n            }\n\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            if (this.autoZIndex) {\n                ZIndex.set('overlay', el, this.baseZIndex + this.$primevue.config.zIndex.overlay);\n            }\n\n            this.overlayEventListener = (e) => {\n                if (this.container.contains(e.target)) {\n                    this.selfClick = true;\n                }\n            };\n\n            this.focus();\n            OverlayEventBus.on('overlay-click', this.overlayEventListener);\n            this.$emit('show');\n\n            if (this.closeOnEscape) {\n                this.bindDocumentKeyDownListener();\n            }\n        },\n        onLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.unbindDocumentKeyDownListener();\n            OverlayEventBus.off('overlay-click', this.overlayEventListener);\n            this.overlayEventListener = null;\n            this.$emit('hide');\n        },\n        onAfterLeave(el) {\n            if (this.autoZIndex) {\n                ZIndex.clear(el);\n            }\n        },\n        alignOverlay() {\n            absolutePosition(this.container, this.target, false);\n\n            const containerOffset = getOffset(this.container);\n            const targetOffset = getOffset(this.target);\n            let arrowLeft = 0;\n\n            if (containerOffset.left < targetOffset.left) {\n                arrowLeft = targetOffset.left - containerOffset.left;\n            }\n\n            this.container.style.setProperty($dt('popover.arrow.left').name, `${arrowLeft}px`);\n\n            if (containerOffset.top < targetOffset.top) {\n                this.container.setAttribute('data-p-popover-flipped', 'true');\n                !this.isUnstyled && addClass(this.container, 'p-popover-flipped');\n            }\n        },\n        onContentKeydown(event) {\n            if (event.code === 'Escape' && this.closeOnEscape) {\n                this.hide();\n                focus(this.target);\n            }\n        },\n        onButtonKeydown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                case 'ArrowUp':\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    event.preventDefault();\n\n                default:\n                    break;\n            }\n        },\n        focus() {\n            let focusTarget = this.container.querySelector('[autofocus]');\n\n            if (focusTarget) {\n                focusTarget.focus();\n            }\n        },\n        onKeyDown(event) {\n            if (event.code === 'Escape' && this.closeOnEscape) {\n                this.visible = false;\n            }\n        },\n        bindDocumentKeyDownListener() {\n            if (!this.documentKeydownListener) {\n                this.documentKeydownListener = this.onKeyDown.bind(this);\n                window.document.addEventListener('keydown', this.documentKeydownListener);\n            }\n        },\n        unbindDocumentKeyDownListener() {\n            if (this.documentKeydownListener) {\n                window.document.removeEventListener('keydown', this.documentKeydownListener);\n                this.documentKeydownListener = null;\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener && isClient()) {\n                this.outsideClickListener = (event) => {\n                    if (this.visible && !this.selfClick && !this.isTargetClicked(event)) {\n                        this.visible = false;\n                    }\n\n                    this.selfClick = false;\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n                this.selfClick = false;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                    if (this.visible) {\n                        this.visible = false;\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.visible && !isTouchDevice()) {\n                        this.visible = false;\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isTargetClicked(event) {\n            return this.eventTarget && (this.eventTarget === event.target || this.eventTarget.contains(event.target));\n        },\n        containerRef(el) {\n            this.container = el;\n        },\n        createStyle() {\n            if (!this.styleElement && !this.isUnstyled) {\n                this.styleElement = document.createElement('style');\n                this.styleElement.type = 'text/css';\n                setAttribute(this.styleElement, 'nonce', this.$primevue?.config?.csp?.nonce);\n                document.head.appendChild(this.styleElement);\n\n                let innerHTML = '';\n\n                for (let breakpoint in this.breakpoints) {\n                    innerHTML += `\n                        @media screen and (max-width: ${breakpoint}) {\n                            .p-popover[${this.$attrSelector}] {\n                                width: ${this.breakpoints[breakpoint]} !important;\n                            }\n                        }\n                    `;\n                }\n\n                this.styleElement.innerHTML = innerHTML;\n            }\n        },\n        destroyStyle() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.target\n            });\n        }\n    },\n    directives: {\n        focustrap: FocusTrap,\n        ripple: Ripple\n    },\n    components: {\n        Portal\n    }\n};\n</script>\n","<template>\n    <Portal :appendTo=\"appendTo\">\n        <transition name=\"p-popover\" @enter=\"onEnter\" @leave=\"onLeave\" @after-leave=\"onAfterLeave\" v-bind=\"ptm('transition')\">\n            <div v-if=\"visible\" :ref=\"containerRef\" v-focustrap role=\"dialog\" :aria-modal=\"visible\" @click=\"onOverlayClick\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n                <slot v-if=\"$slots.container\" name=\"container\" :closeCallback=\"hide\" :keydownCallback=\"(event) => onButtonKeydown(event)\"></slot>\n                <template v-else>\n                    <div :class=\"cx('content')\" @click=\"onContentClick\" @mousedown=\"onContentClick\" @keydown=\"onContentKeydown\" v-bind=\"ptm('content')\">\n                        <slot></slot>\n                    </div>\n                </template>\n            </div>\n        </transition>\n    </Portal>\n</template>\n\n<script>\nimport { $dt } from '@primeuix/styled';\nimport { absolutePosition, addClass, addStyle, focus, getOffset, isClient, isTouchDevice, setAttribute } from '@primeuix/utils/dom';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport FocusTrap from 'primevue/focustrap';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport BasePopover from './BasePopover.vue';\n\nexport default {\n    name: 'Popover',\n    extends: BasePopover,\n    inheritAttrs: false,\n    emits: ['show', 'hide'],\n    data() {\n        return {\n            visible: false\n        };\n    },\n    watch: {\n        dismissable: {\n            immediate: true,\n            handler(newValue) {\n                if (newValue) {\n                    this.bindOutsideClickListener();\n                } else {\n                    this.unbindOutsideClickListener();\n                }\n            }\n        }\n    },\n    selfClick: false,\n    target: null,\n    eventTarget: null,\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    container: null,\n    styleElement: null,\n    overlayEventListener: null,\n    documentKeydownListener: null,\n    beforeUnmount() {\n        if (this.dismissable) {\n            this.unbindOutsideClickListener();\n        }\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        this.destroyStyle();\n        this.unbindResizeListener();\n        this.target = null;\n\n        if (this.container && this.autoZIndex) {\n            ZIndex.clear(this.container);\n        }\n\n        if (this.overlayEventListener) {\n            OverlayEventBus.off('overlay-click', this.overlayEventListener);\n            this.overlayEventListener = null;\n        }\n\n        this.container = null;\n    },\n    mounted() {\n        if (this.breakpoints) {\n            this.createStyle();\n        }\n    },\n    methods: {\n        toggle(event, target) {\n            if (this.visible) this.hide();\n            else this.show(event, target);\n        },\n        show(event, target) {\n            this.visible = true;\n            this.eventTarget = event.currentTarget;\n            this.target = target || event.currentTarget;\n        },\n        hide() {\n            this.visible = false;\n        },\n        onContentClick() {\n            this.selfClick = true;\n        },\n        onEnter(el) {\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n\n            if (this.dismissable) {\n                this.bindOutsideClickListener();\n            }\n\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            if (this.autoZIndex) {\n                ZIndex.set('overlay', el, this.baseZIndex + this.$primevue.config.zIndex.overlay);\n            }\n\n            this.overlayEventListener = (e) => {\n                if (this.container.contains(e.target)) {\n                    this.selfClick = true;\n                }\n            };\n\n            this.focus();\n            OverlayEventBus.on('overlay-click', this.overlayEventListener);\n            this.$emit('show');\n\n            if (this.closeOnEscape) {\n                this.bindDocumentKeyDownListener();\n            }\n        },\n        onLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.unbindDocumentKeyDownListener();\n            OverlayEventBus.off('overlay-click', this.overlayEventListener);\n            this.overlayEventListener = null;\n            this.$emit('hide');\n        },\n        onAfterLeave(el) {\n            if (this.autoZIndex) {\n                ZIndex.clear(el);\n            }\n        },\n        alignOverlay() {\n            absolutePosition(this.container, this.target, false);\n\n            const containerOffset = getOffset(this.container);\n            const targetOffset = getOffset(this.target);\n            let arrowLeft = 0;\n\n            if (containerOffset.left < targetOffset.left) {\n                arrowLeft = targetOffset.left - containerOffset.left;\n            }\n\n            this.container.style.setProperty($dt('popover.arrow.left').name, `${arrowLeft}px`);\n\n            if (containerOffset.top < targetOffset.top) {\n                this.container.setAttribute('data-p-popover-flipped', 'true');\n                !this.isUnstyled && addClass(this.container, 'p-popover-flipped');\n            }\n        },\n        onContentKeydown(event) {\n            if (event.code === 'Escape' && this.closeOnEscape) {\n                this.hide();\n                focus(this.target);\n            }\n        },\n        onButtonKeydown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                case 'ArrowUp':\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    event.preventDefault();\n\n                default:\n                    break;\n            }\n        },\n        focus() {\n            let focusTarget = this.container.querySelector('[autofocus]');\n\n            if (focusTarget) {\n                focusTarget.focus();\n            }\n        },\n        onKeyDown(event) {\n            if (event.code === 'Escape' && this.closeOnEscape) {\n                this.visible = false;\n            }\n        },\n        bindDocumentKeyDownListener() {\n            if (!this.documentKeydownListener) {\n                this.documentKeydownListener = this.onKeyDown.bind(this);\n                window.document.addEventListener('keydown', this.documentKeydownListener);\n            }\n        },\n        unbindDocumentKeyDownListener() {\n            if (this.documentKeydownListener) {\n                window.document.removeEventListener('keydown', this.documentKeydownListener);\n                this.documentKeydownListener = null;\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener && isClient()) {\n                this.outsideClickListener = (event) => {\n                    if (this.visible && !this.selfClick && !this.isTargetClicked(event)) {\n                        this.visible = false;\n                    }\n\n                    this.selfClick = false;\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n                this.selfClick = false;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                    if (this.visible) {\n                        this.visible = false;\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.visible && !isTouchDevice()) {\n                        this.visible = false;\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isTargetClicked(event) {\n            return this.eventTarget && (this.eventTarget === event.target || this.eventTarget.contains(event.target));\n        },\n        containerRef(el) {\n            this.container = el;\n        },\n        createStyle() {\n            if (!this.styleElement && !this.isUnstyled) {\n                this.styleElement = document.createElement('style');\n                this.styleElement.type = 'text/css';\n                setAttribute(this.styleElement, 'nonce', this.$primevue?.config?.csp?.nonce);\n                document.head.appendChild(this.styleElement);\n\n                let innerHTML = '';\n\n                for (let breakpoint in this.breakpoints) {\n                    innerHTML += `\n                        @media screen and (max-width: ${breakpoint}) {\n                            .p-popover[${this.$attrSelector}] {\n                                width: ${this.breakpoints[breakpoint]} !important;\n                            }\n                        }\n                    `;\n                }\n\n                this.styleElement.innerHTML = innerHTML;\n            }\n        },\n        destroyStyle() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.target\n            });\n        }\n    },\n    directives: {\n        focustrap: FocusTrap,\n        ripple: Ripple\n    },\n    components: {\n        Portal\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}