{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { focus, getFirstFocusableElement, getLastFocusableElement, find, getFocusableElements, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice, findSingle } from '@primeuix/utils/dom';\nimport { isNotEmpty, isEmpty } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { UniqueComponentId, ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport TimesIcon from '@primevue/icons/times';\nimport Chip from 'primevue/chip';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport Tree from 'primevue/tree';\nimport BaseInput from '@primevue/core/baseinput';\nimport TreeSelectStyle from 'primevue/treeselect/style';\nimport { resolveComponent, openBlock, createElementBlock, mergeProps, createElementVNode, renderSlot, Fragment, createTextVNode, toDisplayString, renderList, createVNode, normalizeClass, createCommentVNode, createBlock, resolveDynamicComponent, withCtx, Transition, withModifiers, createSlots } from 'vue';\nvar script$1 = {\n  name: 'BaseTreeSelect',\n  \"extends\": BaseInput,\n  props: {\n    options: Array,\n    scrollHeight: {\n      type: String,\n      \"default\": '20rem'\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    tabindex: {\n      type: Number,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    selectedItemsLabel: {\n      type: String,\n      \"default\": null\n    },\n    maxSelectedLabels: {\n      type: Number,\n      \"default\": null\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    emptyMessage: {\n      type: String,\n      \"default\": null\n    },\n    display: {\n      type: String,\n      \"default\": 'comma'\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    },\n    showClear: {\n      type: Boolean,\n      \"default\": false\n    },\n    clearIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    filter: {\n      type: Boolean,\n      \"default\": false\n    },\n    filterBy: {\n      type: [String, Function],\n      \"default\": 'label'\n    },\n    filterMode: {\n      type: String,\n      \"default\": 'lenient'\n    },\n    filterPlaceholder: {\n      type: String,\n      \"default\": null\n    },\n    filterLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputProps: {\n      type: null,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelProps: {\n      type: null,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    expandedKeys: {\n      type: null,\n      \"default\": null\n    }\n  },\n  style: TreeSelectStyle,\n  provide: function provide() {\n    return {\n      $pcTreeSelect: this,\n      $parentInstance: this\n    };\n  }\n};\nfunction _typeof$1(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$1(o);\n}\nfunction ownKeys$1(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$1(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) {\n      _defineProperty$1(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$1(e, r, t) {\n  return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey$1(t) {\n  var i = _toPrimitive$1(t, \"string\");\n  return \"symbol\" == _typeof$1(i) ? i : i + \"\";\n}\nfunction _toPrimitive$1(t, r) {\n  if (\"object\" != _typeof$1(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof$1(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _createForOfIteratorHelper(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {\n      t && (r = t);\n      var _n = 0,\n        F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          return _n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[_n++]\n          };\n        },\n        e: function e(r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function s() {\n      t = t.call(r);\n    },\n    n: function n() {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function e(r) {\n      u = !0, o = r;\n    },\n    f: function f() {\n      try {\n        a || null == t[\"return\"] || t[\"return\"]();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script = {\n  name: 'TreeSelect',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['before-show', 'before-hide', 'change', 'show', 'hide', 'node-select', 'node-unselect', 'node-expand', 'node-collapse', 'focus', 'blur', 'update:expandedKeys'],\n  inject: {\n    $pcFluid: {\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      focused: false,\n      overlayVisible: false,\n      d_expandedKeys: this.expandedKeys || {}\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    },\n    modelValue: {\n      handler: function handler() {\n        if (!this.selfChange) {\n          this.updateTreeState();\n        }\n        this.selfChange = false;\n      },\n      immediate: true\n    },\n    options: function options() {\n      this.updateTreeState();\n    },\n    expandedKeys: function expandedKeys(value) {\n      this.d_expandedKeys = value;\n    }\n  },\n  outsideClickListener: null,\n  resizeListener: null,\n  scrollHandler: null,\n  overlay: null,\n  selfChange: false,\n  selfClick: false,\n  beforeUnmount: function beforeUnmount() {\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndex.clear(this.overlay);\n      this.overlay = null;\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    this.updateTreeState();\n  },\n  methods: {\n    show: function show() {\n      this.$emit('before-show');\n      this.overlayVisible = true;\n    },\n    hide: function hide() {\n      this.$emit('before-hide');\n      this.overlayVisible = false;\n      this.$refs.focusInput.focus();\n    },\n    onFocus: function onFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      this.focused = false;\n      this.$emit('blur', event);\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField);\n    },\n    onClick: function onClick(event) {\n      if (this.disabled) {\n        return;\n      }\n      if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n        return;\n      } else if (!this.overlay || !this.overlay.contains(event.target)) {\n        if (this.overlayVisible) this.hide();else this.show();\n        focus(this.$refs.focusInput);\n      }\n    },\n    onClearClick: function onClearClick() {\n      this.onSelectionChange(null);\n    },\n    onSelectionChange: function onSelectionChange(keys) {\n      this.selfChange = true;\n      this.writeValue(keys);\n      this.$emit('change', keys);\n    },\n    onNodeSelect: function onNodeSelect(node) {\n      this.$emit('node-select', node);\n      if (this.selectionMode === 'single') {\n        this.hide();\n      }\n    },\n    onNodeUnselect: function onNodeUnselect(node) {\n      this.$emit('node-unselect', node);\n    },\n    onNodeToggle: function onNodeToggle(keys) {\n      this.d_expandedKeys = keys;\n      this.$emit('update:expandedKeys', this.d_expandedKeys);\n    },\n    getSelectedItemsLabel: function getSelectedItemsLabel() {\n      var pattern = /{(.*?)}/;\n      var selectedItemsLabel = this.selectedItemsLabel || this.$primevue.config.locale.selectionMessage;\n      if (pattern.test(selectedItemsLabel)) {\n        return selectedItemsLabel.replace(selectedItemsLabel.match(pattern)[0], Object.keys(this.d_value).length + '');\n      }\n      return selectedItemsLabel;\n    },\n    onFirstHiddenFocus: function onFirstHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      focus(focusableEl);\n    },\n    onLastHiddenFocus: function onLastHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      focus(focusableEl);\n    },\n    onKeyDown: function onKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'Space':\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      var _this = this;\n      if (this.overlayVisible) return;\n      this.show();\n      this.$nextTick(function () {\n        var treeNodeEl = find(_this.$refs.tree.$el, '[data-pc-section=\"treeitem\"]');\n        var focusedElement = _toConsumableArray(treeNodeEl).find(function (item) {\n          return item.getAttribute('tabindex') === '0';\n        });\n        focus(focusedElement);\n      });\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (this.overlayVisible) {\n        this.hide();\n      } else {\n        this.onArrowDownKey(event);\n      }\n      event.preventDefault();\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      if (this.overlayVisible) {\n        this.hide();\n        event.preventDefault();\n      }\n    },\n    onTabKey: function onTabKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!pressedInInputText) {\n        if (this.overlayVisible && this.hasFocusableElements()) {\n          focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n          event.preventDefault();\n        }\n      }\n    },\n    hasFocusableElements: function hasFocusableElements() {\n      return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      addStyle(el, {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      });\n      this.alignOverlay();\n      this.focus();\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.scrollValueInView();\n      this.$emit('show');\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.$emit('hide');\n      this.overlay = null;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    focus: function focus() {\n      var focusableElements = getFocusableElements(this.overlay);\n      if (focusableElements && focusableElements.length > 0) {\n        focusableElements[0].focus();\n      }\n    },\n    alignOverlay: function alignOverlay() {\n      if (this.appendTo === 'self') {\n        relativePosition(this.overlay, this.$el);\n      } else {\n        this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n        absolutePosition(this.overlay, this.$el);\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this2 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this2.overlayVisible && !_this2.selfClick && _this2.isOutsideClicked(event)) {\n            _this2.hide();\n          }\n          _this2.selfClick = false;\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this3 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, function () {\n          if (_this3.overlayVisible) {\n            _this3.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this4 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this4.overlayVisible && !isTouchDevice()) {\n            _this4.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    isOutsideClicked: function isOutsideClicked(event) {\n      return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || this.overlay && this.overlay.contains(event.target));\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n      this.selfClick = true;\n    },\n    onOverlayKeydown: function onOverlayKeydown(event) {\n      if (event.code === 'Escape') this.hide();\n    },\n    findSelectedNodes: function findSelectedNodes(node, keys, selectedNodes) {\n      if (node) {\n        if (this.isSelected(node, keys)) {\n          selectedNodes.push(node);\n          delete keys[node.key];\n        }\n        if (Object.keys(keys).length && node.children) {\n          var _iterator = _createForOfIteratorHelper(node.children),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var childNode = _step.value;\n              this.findSelectedNodes(childNode, keys, selectedNodes);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      } else {\n        var _iterator2 = _createForOfIteratorHelper(this.options),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _childNode = _step2.value;\n            this.findSelectedNodes(_childNode, keys, selectedNodes);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    },\n    isSelected: function isSelected(node, keys) {\n      return this.selectionMode === 'checkbox' ? keys[node.key] && keys[node.key].checked : keys[node.key];\n    },\n    updateTreeState: function updateTreeState() {\n      var keys = _objectSpread$1({}, this.d_value);\n      if (keys && this.options) {\n        this.updateTreeBranchState(null, null, keys);\n      }\n    },\n    updateTreeBranchState: function updateTreeBranchState(node, path, keys) {\n      if (node) {\n        if (this.isSelected(node, keys)) {\n          this.expandPath(path);\n          delete keys[node.key];\n        }\n        if (Object.keys(keys).length && node.children) {\n          var _iterator3 = _createForOfIteratorHelper(node.children),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var childNode = _step3.value;\n              path.push(node.key);\n              this.updateTreeBranchState(childNode, path, keys);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } else {\n        var _iterator4 = _createForOfIteratorHelper(this.options),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _childNode2 = _step4.value;\n            this.updateTreeBranchState(_childNode2, [], keys);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    },\n    expandPath: function expandPath(path) {\n      if (path.length > 0) {\n        var _iterator5 = _createForOfIteratorHelper(path),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var key = _step5.value;\n            this.d_expandedKeys[key] = true;\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        this.d_expandedKeys = _objectSpread$1({}, this.d_expandedKeys);\n        this.$emit('update:expandedKeys', this.d_expandedKeys);\n      }\n    },\n    scrollValueInView: function scrollValueInView() {\n      if (this.overlay) {\n        var selectedItem = findSingle(this.overlay, '[data-p-selected=\"true\"]');\n        if (selectedItem) {\n          selectedItem.scrollIntoView({\n            block: 'nearest',\n            inline: 'start'\n          });\n        }\n      }\n    }\n  },\n  computed: {\n    selectedNodes: function selectedNodes() {\n      var selectedNodes = [];\n      if (this.d_value && this.options) {\n        var keys = _objectSpread$1({}, this.d_value);\n        this.findSelectedNodes(null, keys, selectedNodes);\n      }\n      return selectedNodes;\n    },\n    label: function label() {\n      var value = this.selectedNodes;\n      var label;\n      if (value.length) {\n        if (isNotEmpty(this.maxSelectedLabels) && value.length > this.maxSelectedLabels) {\n          label = this.getSelectedItemsLabel();\n        } else {\n          label = value.map(function (node) {\n            return node.label;\n          }).join(', ');\n        }\n      } else {\n        label = this.placeholder;\n      }\n      return label;\n    },\n    chipSelectedItems: function chipSelectedItems() {\n      return isNotEmpty(this.maxSelectedLabels) && this.d_value && Object.keys(this.d_value).length > this.maxSelectedLabels;\n    },\n    emptyMessageText: function emptyMessageText() {\n      return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n    },\n    emptyValue: function emptyValue() {\n      return !this.$filled;\n    },\n    emptyOptions: function emptyOptions() {\n      return !this.options || this.options.length === 0;\n    },\n    listId: function listId() {\n      return this.id + '_list';\n    },\n    hasFluid: function hasFluid() {\n      return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n    },\n    isClearIconVisible: function isClearIconVisible() {\n      return this.showClear && this.d_value != null && isNotEmpty(this.options);\n    }\n  },\n  components: {\n    TSTree: Tree,\n    Chip: Chip,\n    Portal: Portal,\n    ChevronDownIcon: ChevronDownIcon,\n    TimesIcon: TimesIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar _hoisted_1 = [\"id\", \"disabled\", \"tabindex\", \"aria-labelledby\", \"aria-label\", \"aria-expanded\", \"aria-controls\"];\nvar _hoisted_2 = {\n  key: 0\n};\nvar _hoisted_3 = [\"aria-expanded\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Chip = resolveComponent(\"Chip\");\n  var _component_TSTree = resolveComponent(\"TSTree\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    onClick: _cache[10] || (_cache[10] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [createElementVNode(\"div\", mergeProps({\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenInputContainer'), {\n    \"data-p-hidden-accessible\": true\n  }), [createElementVNode(\"input\", mergeProps({\n    ref: \"focusInput\",\n    id: _ctx.inputId,\n    type: \"text\",\n    role: \"combobox\",\n    \"class\": _ctx.inputClass,\n    style: _ctx.inputStyle,\n    readonly: \"\",\n    disabled: _ctx.disabled,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-haspopup\": \"tree\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $options.listId,\n    onFocus: _cache[0] || (_cache[0] = function ($event) {\n      return $options.onFocus($event);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function ($event) {\n      return $options.onBlur($event);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function ($event) {\n      return $options.onKeyDown($event);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.inputProps), _ctx.ptm('hiddenInput'))), null, 16, _hoisted_1)], 16), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('labelContainer')\n  }, _ctx.ptm('labelContainer')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('label')\n  }, _ctx.ptm('label')), [renderSlot(_ctx.$slots, \"value\", {\n    value: $options.selectedNodes,\n    placeholder: _ctx.placeholder\n  }, function () {\n    return [_ctx.display === 'comma' ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [createTextVNode(toDisplayString($options.label || 'empty'), 1)], 64)) : _ctx.display === 'chip' ? (openBlock(), createElementBlock(Fragment, {\n      key: 1\n    }, [$options.chipSelectedItems ? (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString($options.label), 1)) : (openBlock(), createElementBlock(Fragment, {\n      key: 1\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList($options.selectedNodes, function (node) {\n      return openBlock(), createElementBlock(\"div\", mergeProps({\n        key: node.key,\n        \"class\": _ctx.cx('chipItem'),\n        ref_for: true\n      }, _ctx.ptm('chipItem')), [createVNode(_component_Chip, {\n        \"class\": normalizeClass(_ctx.cx('pcChip')),\n        label: node.label,\n        unstyled: _ctx.unstyled,\n        pt: _ctx.ptm('pcChip')\n      }, null, 8, [\"class\", \"label\", \"unstyled\", \"pt\"])], 16);\n    }), 128)), $options.emptyValue ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [createTextVNode(toDisplayString(_ctx.placeholder || 'empty'), 1)], 64)) : createCommentVNode(\"\", true)], 64))], 64)) : createCommentVNode(\"\", true)];\n  })], 16)], 16), $options.isClearIconVisible ? renderSlot(_ctx.$slots, \"clearicon\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('clearIcon')),\n    clearCallback: $options.onClearClick\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon ? 'i' : 'TimesIcon'), mergeProps({\n      ref: \"clearIcon\",\n      \"class\": [_ctx.cx('clearIcon'), _ctx.clearIcon],\n      onClick: $options.onClearClick\n    }, _ctx.ptm('clearIcon'), {\n      \"data-pc-section\": \"clearicon\"\n    }), null, 16, [\"class\", \"onClick\"]))];\n  }) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('dropdown'),\n    role: \"button\",\n    \"aria-haspopup\": \"tree\",\n    \"aria-expanded\": $data.overlayVisible\n  }, _ctx.ptm('dropdown')), [renderSlot(_ctx.$slots, _ctx.$slots.dropdownicon ? 'dropdownicon' : 'triggericon', {\n    \"class\": normalizeClass(_ctx.cx('dropdownIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent('ChevronDownIcon'), mergeProps({\n      \"class\": _ctx.cx('dropdownIcon')\n    }, _ctx.ptm('dropdownIcon')), null, 16, [\"class\"]))];\n  })], 16, _hoisted_3), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            onClick: _cache[8] || (_cache[8] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            \"class\": [_ctx.cx('panel'), _ctx.panelClass],\n            onKeydown: _cache[9] || (_cache[9] = function () {\n              return $options.onOverlayKeydown && $options.onOverlayKeydown.apply($options, arguments);\n            })\n          }, _objectSpread(_objectSpread({}, _ctx.panelProps), _ctx.ptm('panel'))), [createElementVNode(\"span\", mergeProps({\n            ref: \"firstHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[3] || (_cache[3] = function () {\n              return $options.onFirstHiddenFocus && $options.onFirstHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenFirstFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16), renderSlot(_ctx.$slots, \"header\", {\n            value: _ctx.d_value,\n            options: _ctx.options\n          }), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('treeContainer'),\n            style: {\n              'max-height': _ctx.scrollHeight\n            }\n          }, _ctx.ptm('treeContainer')), [createVNode(_component_TSTree, {\n            ref: \"tree\",\n            id: $options.listId,\n            value: _ctx.options,\n            selectionMode: _ctx.selectionMode,\n            loading: _ctx.loading,\n            loadingIcon: _ctx.loadingIcon,\n            loadingMode: _ctx.loadingMode,\n            filter: _ctx.filter,\n            filterBy: _ctx.filterBy,\n            filterMode: _ctx.filterMode,\n            filterPlaceholder: _ctx.filterPlaceholder,\n            filterLocale: _ctx.filterLocale,\n            \"onUpdate:selectionKeys\": $options.onSelectionChange,\n            selectionKeys: _ctx.d_value,\n            expandedKeys: $data.d_expandedKeys,\n            \"onUpdate:expandedKeys\": $options.onNodeToggle,\n            metaKeySelection: _ctx.metaKeySelection,\n            onNodeExpand: _cache[4] || (_cache[4] = function ($event) {\n              return _ctx.$emit('node-expand', $event);\n            }),\n            onNodeCollapse: _cache[5] || (_cache[5] = function ($event) {\n              return _ctx.$emit('node-collapse', $event);\n            }),\n            onNodeSelect: $options.onNodeSelect,\n            onNodeUnselect: $options.onNodeUnselect,\n            onClick: _cache[6] || (_cache[6] = withModifiers(function () {}, [\"stop\"])),\n            level: 0,\n            unstyled: _ctx.unstyled,\n            pt: _ctx.ptm('pcTree')\n          }, createSlots({\n            _: 2\n          }, [_ctx.$slots.option ? {\n            name: \"default\",\n            fn: withCtx(function (optionSlotProps) {\n              return [renderSlot(_ctx.$slots, \"option\", {\n                node: optionSlotProps.node,\n                expanded: optionSlotProps.expanded,\n                selected: optionSlotProps.selected\n              })];\n            }),\n            key: \"0\"\n          } : undefined, _ctx.$slots.itemtoggleicon ? {\n            name: \"toggleicon\",\n            fn: withCtx(function (iconSlotProps) {\n              return [renderSlot(_ctx.$slots, \"itemtoggleicon\", {\n                node: iconSlotProps.node,\n                expanded: iconSlotProps.expanded,\n                \"class\": normalizeClass(iconSlotProps[\"class\"])\n              })];\n            }),\n            key: \"1\"\n          } : _ctx.$slots.itemtogglericon ? {\n            name: \"togglericon\",\n            fn: withCtx(function (iconSlotProps) {\n              return [renderSlot(_ctx.$slots, \"itemtogglericon\", {\n                node: iconSlotProps.node,\n                expanded: iconSlotProps.expanded,\n                \"class\": normalizeClass(iconSlotProps[\"class\"])\n              })];\n            }),\n            key: \"2\"\n          } : undefined, _ctx.$slots.itemcheckboxicon ? {\n            name: \"checkboxicon\",\n            fn: withCtx(function (iconSlotProps) {\n              return [renderSlot(_ctx.$slots, \"itemcheckboxicon\", {\n                checked: iconSlotProps.checked,\n                partialChecked: iconSlotProps.partialChecked,\n                \"class\": normalizeClass(iconSlotProps[\"class\"])\n              })];\n            }),\n            key: \"3\"\n          } : undefined]), 1032, [\"id\", \"value\", \"selectionMode\", \"loading\", \"loadingIcon\", \"loadingMode\", \"filter\", \"filterBy\", \"filterMode\", \"filterPlaceholder\", \"filterLocale\", \"onUpdate:selectionKeys\", \"selectionKeys\", \"expandedKeys\", \"onUpdate:expandedKeys\", \"metaKeySelection\", \"onNodeSelect\", \"onNodeUnselect\", \"unstyled\", \"pt\"]), $options.emptyOptions && !_ctx.loading ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            \"class\": _ctx.cx('emptyMessage')\n          }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n            return [createTextVNode(toDisplayString($options.emptyMessageText), 1)];\n          })], 16)) : createCommentVNode(\"\", true)], 16), renderSlot(_ctx.$slots, \"footer\", {\n            value: _ctx.d_value,\n            options: _ctx.options\n          }), createElementVNode(\"span\", mergeProps({\n            ref: \"lastHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[7] || (_cache[7] = function () {\n              return $options.onLastHiddenFocus && $options.onLastHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenLastFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16)], 16)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseInput","props","options","Array","scrollHeight","type","String","placeholder","tabindex","Number","selectionMode","selectedItemsLabel","maxSelectedLabels","appendTo","Object","emptyMessage","display","metaKeySelection","Boolean","loading","loadingIcon","undefined","loadingMode","showClear","clearIcon","filter","filterBy","Function","filterMode","filterPlaceholder","filterLocale","inputId","inputClass","inputStyle","inputProps","panelClass","panelProps","ariaLabelledby","ariaLabel","expandedKeys","style","TreeSelectStyle","provide","$pcTreeSelect","$parentInstance","script","inheritAttrs","emits","inject","$pcFluid","data","id","$attrs","focused","overlayVisible","d_expandedKeys","watch","$attrsId","newValue","UniqueComponentId","modelValue","handler","selfChange","updateTreeState","immediate","value","outsideClickListener","resizeListener","scrollHandler","overlay","selfClick","beforeUnmount","unbindOutsideClickListener","unbindResizeListener","destroy","ZIndex","clear","mounted","methods","show","$emit","hide","$refs","focusInput","focus","onFocus","event","onBlur","_this$formField$onBlu","_this$formField","formField","call","onClick","disabled","target","tagName","getAttribute","closest","contains","onClearClick","onSelectionChange","keys","writeValue","onNodeSelect","node","onNodeUnselect","onNodeToggle","getSelectedItemsLabel","pattern","$primevue","config","locale","selectionMessage","test","replace","match","d_value","length","onFirstHiddenFocus","focusableEl","relatedTarget","getFirstFocusableElement","onLastHiddenFocus","getLastFocusableElement","onKeyDown","code","onArrowDownKey","onEnterKey","onEscapeKey","onTabKey","_this","$nextTick","treeNodeEl","find","tree","$el","focusedElement","_toConsumableArray","item","preventDefault","pressedInInputText","arguments","hasFocusableElements","firstHiddenFocusableElementOnOverlay","getFocusableElements","onOverlayEnter","el","set","zIndex","addStyle","position","top","left","alignOverlay","onOverlayAfterEnter","bindOutsideClickListener","bindScrollListener","bindResizeListener","scrollValueInView","onOverlayLeave","unbindScrollListener","onOverlayAfterLeave","focusableElements","relativePosition","minWidth","getOuterWidth","absolutePosition","_this2","isOutsideClicked","document","addEventListener","removeEventListener","_this3","ConnectedOverlayScrollHandler","container","_this4","isTouchDevice","window","isSameNode","overlayRef","onOverlayClick","OverlayEventBus","emit","originalEvent","onOverlayKeydown","findSelectedNodes","selectedNodes","isSelected","push","key","children","_iterator","_createForOfIteratorHelper","_step","s","n","done","childNode","err","e","f","_iterator2","_step2","_childNode","checked","_objectSpread$1","updateTreeBranchState","path","expandPath","_iterator3","_step3","_iterator4","_step4","_childNode2","_iterator5","_step5","selectedItem","findSingle","scrollIntoView","block","inline","computed","label","isNotEmpty","map","join","chipSelectedItems","emptyMessageText","emptyValue","$filled","emptyOptions","listId","hasFluid","isEmpty","fluid","isClearIconVisible","components","TSTree","Tree","Chip","Portal","ChevronDownIcon","TimesIcon","directives","ripple","Ripple","openBlock","createElementBlock","mergeProps","ref","_ctx","cx","sx","_cache","$options","apply","ptmi","createElementVNode","ptm","role","readonly","$data","$event","onKeydown","_objectSpread","_hoisted_1","renderSlot","$slots","Fragment","createTextVNode","toDisplayString","_hoisted_2","renderList","createVNode","_component_Chip","normalizeClass","unstyled","pt","createCommentVNode","clearCallback","createBlock","resolveDynamicComponent","dropdownicon","_component_Portal","Transition","onEnter","onAfterEnter","onLeave","onAfterLeave","_component_TSTree","selectionKeys","onNodeExpand","onNodeCollapse","withModifiers","level","option","fn","withCtx","optionSlotProps","expanded","selected","itemtoggleicon","iconSlotProps","itemtogglericon","itemcheckboxicon","partialChecked"],"sources":["../../src/treeselect/BaseTreeSelect.vue","../../src/treeselect/TreeSelect.vue","../../src/treeselect/TreeSelect.vue?vue&type=template&id=4befeb92&lang.js"],"sourcesContent":["<script>\nimport BaseInput from '@primevue/core/baseinput';\nimport TreeSelectStyle from 'primevue/treeselect/style';\n\nexport default {\n    name: 'BaseTreeSelect',\n    extends: BaseInput,\n    props: {\n        options: Array,\n        scrollHeight: {\n            type: String,\n            default: '20rem'\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: 'single'\n        },\n        selectedItemsLabel: {\n            type: String,\n            default: null\n        },\n        maxSelectedLabels: {\n            type: Number,\n            default: null\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        display: {\n            type: String,\n            default: 'comma'\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: undefined\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        showClear: {\n            type: Boolean,\n            default: false\n        },\n        clearIcon: {\n            type: String,\n            default: undefined\n        },\n        filter: {\n            type: Boolean,\n            default: false\n        },\n        filterBy: {\n            type: [String, Function],\n            default: 'label'\n        },\n        filterMode: {\n            type: String,\n            default: 'lenient'\n        },\n        filterPlaceholder: {\n            type: String,\n            default: null\n        },\n        filterLocale: {\n            type: String,\n            default: undefined\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        inputProps: {\n            type: null,\n            default: null\n        },\n        panelClass: {\n            type: [String, Object],\n            default: null\n        },\n        panelProps: {\n            type: null,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        }\n    },\n    style: TreeSelectStyle,\n    provide() {\n        return {\n            $pcTreeSelect: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onClick\" v-bind=\"ptmi('root')\">\n        <div class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenInputContainer')\" :data-p-hidden-accessible=\"true\">\n            <input\n                ref=\"focusInput\"\n                :id=\"inputId\"\n                type=\"text\"\n                role=\"combobox\"\n                :class=\"inputClass\"\n                :style=\"inputStyle\"\n                readonly\n                :disabled=\"disabled\"\n                :tabindex=\"!disabled ? tabindex : -1\"\n                :aria-labelledby=\"ariaLabelledby\"\n                :aria-label=\"ariaLabel\"\n                aria-haspopup=\"tree\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"listId\"\n                @focus=\"onFocus($event)\"\n                @blur=\"onBlur($event)\"\n                @keydown=\"onKeyDown($event)\"\n                v-bind=\"{ ...inputProps, ...ptm('hiddenInput') }\"\n            />\n        </div>\n        <div :class=\"cx('labelContainer')\" v-bind=\"ptm('labelContainer')\">\n            <div :class=\"cx('label')\" v-bind=\"ptm('label')\">\n                <slot name=\"value\" :value=\"selectedNodes\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{ label || 'empty' }}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <template v-if=\"chipSelectedItems\">\n                            <span>{{ label }}</span>\n                        </template>\n                        <template v-else>\n                            <div v-for=\"node of selectedNodes\" :key=\"node.key\" :class=\"cx('chipItem')\" v-bind=\"ptm('chipItem')\">\n                                <Chip :class=\"cx('pcChip')\" :label=\"node.label\" :unstyled=\"unstyled\" :pt=\"ptm('pcChip')\" />\n                            </div>\n                            <template v-if=\"emptyValue\">{{ placeholder || 'empty' }}</template>\n                        </template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <slot v-if=\"isClearIconVisible\" name=\"clearicon\" :class=\"cx('clearIcon')\" :clearCallback=\"onClearClick\">\n            <component :is=\"clearIcon ? 'i' : 'TimesIcon'\" ref=\"clearIcon\" :class=\"[cx('clearIcon'), clearIcon]\" @click=\"onClearClick\" v-bind=\"ptm('clearIcon')\" data-pc-section=\"clearicon\" />\n        </slot>\n        <div :class=\"cx('dropdown')\" role=\"button\" aria-haspopup=\"tree\" :aria-expanded=\"overlayVisible\" v-bind=\"ptm('dropdown')\">\n            <!-- TODO: triggericon is deprecated since v4.0 -->\n            <slot :name=\"$slots.dropdownicon ? 'dropdownicon' : 'triggericon'\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"'ChevronDownIcon'\" :class=\"cx('dropdownIcon')\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" @click=\"onOverlayClick\" :class=\"[cx('panel'), panelClass]\" @keydown=\"onOverlayKeydown\" v-bind=\"{ ...panelProps, ...ptm('panel') }\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"d_value\" :options=\"options\"></slot>\n                    <div :class=\"cx('treeContainer')\" :style=\"{ 'max-height': scrollHeight }\" v-bind=\"ptm('treeContainer')\">\n                        <TSTree\n                            ref=\"tree\"\n                            :id=\"listId\"\n                            :value=\"options\"\n                            :selectionMode=\"selectionMode\"\n                            :loading=\"loading\"\n                            :loadingIcon=\"loadingIcon\"\n                            :loadingMode=\"loadingMode\"\n                            :filter=\"filter\"\n                            :filterBy=\"filterBy\"\n                            :filterMode=\"filterMode\"\n                            :filterPlaceholder=\"filterPlaceholder\"\n                            :filterLocale=\"filterLocale\"\n                            @update:selectionKeys=\"onSelectionChange\"\n                            :selectionKeys=\"d_value\"\n                            :expandedKeys=\"d_expandedKeys\"\n                            @update:expandedKeys=\"onNodeToggle\"\n                            :metaKeySelection=\"metaKeySelection\"\n                            @node-expand=\"$emit('node-expand', $event)\"\n                            @node-collapse=\"$emit('node-collapse', $event)\"\n                            @node-select=\"onNodeSelect\"\n                            @node-unselect=\"onNodeUnselect\"\n                            @click.stop\n                            :level=\"0\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"ptm('pcTree')\"\n                        >\n                            <template v-if=\"$slots.option\" #default=\"optionSlotProps\">\n                                <slot name=\"option\" :node=\"optionSlotProps.node\" :expanded=\"optionSlotProps.expanded\" :selected=\"optionSlotProps.selected\" />\n                            </template>\n                            <template v-if=\"$slots.itemtoggleicon\" #toggleicon=\"iconSlotProps\">\n                                <slot name=\"itemtoggleicon\" :node=\"iconSlotProps.node\" :expanded=\"iconSlotProps.expanded\" :class=\"iconSlotProps.class\" />\n                            </template>\n                            <!--TODO: itemtogglericon deprecated since v4.0-->\n                            <template v-else-if=\"$slots.itemtogglericon\" #togglericon=\"iconSlotProps\">\n                                <slot name=\"itemtogglericon\" :node=\"iconSlotProps.node\" :expanded=\"iconSlotProps.expanded\" :class=\"iconSlotProps.class\" />\n                            </template>\n                            <template v-if=\"$slots.itemcheckboxicon\" #checkboxicon=\"iconSlotProps\">\n                                <slot name=\"itemcheckboxicon\" :checked=\"iconSlotProps.checked\" :partialChecked=\"iconSlotProps.partialChecked\" :class=\"iconSlotProps.class\" />\n                            </template>\n                        </TSTree>\n                        <div v-if=\"emptyOptions && !loading\" :class=\"cx('emptyMessage')\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                        </div>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :options=\"options\"></slot>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { absolutePosition, addStyle, find, findSingle, focus, getFirstFocusableElement, getFocusableElements, getLastFocusableElement, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { isEmpty, isNotEmpty } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport TimesIcon from '@primevue/icons/times';\nimport Chip from 'primevue/chip';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport Tree from 'primevue/tree';\nimport BaseTreeSelect from './BaseTreeSelect.vue';\n\nexport default {\n    name: 'TreeSelect',\n    extends: BaseTreeSelect,\n    inheritAttrs: false,\n    emits: ['before-show', 'before-hide', 'change', 'show', 'hide', 'node-select', 'node-unselect', 'node-expand', 'node-collapse', 'focus', 'blur', 'update:expandedKeys'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    data() {\n        return {\n            id: this.$attrs.id,\n            focused: false,\n            overlayVisible: false,\n            d_expandedKeys: this.expandedKeys || {}\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        modelValue: {\n            handler: function () {\n                if (!this.selfChange) {\n                    this.updateTreeState();\n                }\n\n                this.selfChange = false;\n            },\n            immediate: true\n        },\n        options() {\n            this.updateTreeState();\n        },\n        expandedKeys(value) {\n            this.d_expandedKeys = value;\n        }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    selfChange: false,\n    selfClick: false,\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.updateTreeState();\n    },\n    methods: {\n        show() {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n        },\n        hide() {\n            this.$emit('before-hide');\n            this.overlayVisible = false;\n            this.$refs.focusInput.focus();\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onClick(event) {\n            if (this.disabled) {\n                return;\n            }\n\n            if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n                return;\n            } else if (!this.overlay || !this.overlay.contains(event.target)) {\n                if (this.overlayVisible) this.hide();\n                else this.show();\n\n                focus(this.$refs.focusInput);\n            }\n        },\n        onClearClick() {\n            this.onSelectionChange(null);\n        },\n        onSelectionChange(keys) {\n            this.selfChange = true;\n            this.writeValue(keys);\n            this.$emit('change', keys);\n        },\n        onNodeSelect(node) {\n            this.$emit('node-select', node);\n\n            if (this.selectionMode === 'single') {\n                this.hide();\n            }\n        },\n        onNodeUnselect(node) {\n            this.$emit('node-unselect', node);\n        },\n        onNodeToggle(keys) {\n            this.d_expandedKeys = keys;\n\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        getSelectedItemsLabel() {\n            let pattern = /{(.*?)}/;\n            const selectedItemsLabel = this.selectedItemsLabel || this.$primevue.config.locale.selectionMessage;\n\n            if (pattern.test(selectedItemsLabel)) {\n                return selectedItemsLabel.replace(selectedItemsLabel.match(pattern)[0], Object.keys(this.d_value).length + '');\n            }\n\n            return selectedItemsLabel;\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'Space':\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (this.overlayVisible) return;\n\n            this.show();\n\n            this.$nextTick(() => {\n                const treeNodeEl = find(this.$refs.tree.$el, '[data-pc-section=\"treeitem\"]');\n                const focusedElement = [...treeNodeEl].find((item) => item.getAttribute('tabindex') === '0');\n\n                focus(focusedElement);\n            });\n\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.overlayVisible) {\n                this.hide();\n            } else {\n                this.onArrowDownKey(event);\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            if (this.overlayVisible) {\n                this.hide();\n                event.preventDefault();\n            }\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                }\n            }\n        },\n        hasFocusableElements() {\n            return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.focus();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n            this.scrollValueInView();\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        focus() {\n            let focusableElements = getFocusableElements(this.overlay);\n\n            if (focusableElements && focusableElements.length > 0) {\n                focusableElements[0].focus();\n            }\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n                absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && !this.selfClick && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n\n                    this.selfClick = false;\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n\n            this.selfClick = true;\n        },\n        onOverlayKeydown(event) {\n            if (event.code === 'Escape') this.hide();\n        },\n        findSelectedNodes(node, keys, selectedNodes) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    selectedNodes.push(node);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        this.findSelectedNodes(childNode, keys, selectedNodes);\n                    }\n                }\n            } else {\n                for (let childNode of this.options) {\n                    this.findSelectedNodes(childNode, keys, selectedNodes);\n                }\n            }\n        },\n        isSelected(node, keys) {\n            return this.selectionMode === 'checkbox' ? keys[node.key] && keys[node.key].checked : keys[node.key];\n        },\n        updateTreeState() {\n            let keys = { ...this.d_value };\n\n            if (keys && this.options) {\n                this.updateTreeBranchState(null, null, keys);\n            }\n        },\n        updateTreeBranchState(node, path, keys) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    this.expandPath(path);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        path.push(node.key);\n                        this.updateTreeBranchState(childNode, path, keys);\n                    }\n                }\n            } else {\n                for (let childNode of this.options) {\n                    this.updateTreeBranchState(childNode, [], keys);\n                }\n            }\n        },\n        expandPath(path) {\n            if (path.length > 0) {\n                for (let key of path) {\n                    this.d_expandedKeys[key] = true;\n                }\n\n                this.d_expandedKeys = { ...this.d_expandedKeys };\n                this.$emit('update:expandedKeys', this.d_expandedKeys);\n            }\n        },\n        scrollValueInView() {\n            if (this.overlay) {\n                let selectedItem = findSingle(this.overlay, '[data-p-selected=\"true\"]');\n\n                if (selectedItem) {\n                    selectedItem.scrollIntoView({ block: 'nearest', inline: 'start' });\n                }\n            }\n        }\n    },\n    computed: {\n        selectedNodes() {\n            let selectedNodes = [];\n\n            if (this.d_value && this.options) {\n                let keys = { ...this.d_value };\n\n                this.findSelectedNodes(null, keys, selectedNodes);\n            }\n\n            return selectedNodes;\n        },\n        label() {\n            let value = this.selectedNodes;\n            let label;\n\n            if (value.length) {\n                if (isNotEmpty(this.maxSelectedLabels) && value.length > this.maxSelectedLabels) {\n                    label = this.getSelectedItemsLabel();\n                } else {\n                    label = value.map((node) => node.label).join(', ');\n                }\n            } else {\n                label = this.placeholder;\n            }\n\n            return label;\n        },\n        chipSelectedItems() {\n            return isNotEmpty(this.maxSelectedLabels) && this.d_value && Object.keys(this.d_value).length > this.maxSelectedLabels;\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n        },\n        emptyValue() {\n            return !this.$filled;\n        },\n        emptyOptions() {\n            return !this.options || this.options.length === 0;\n        },\n        listId() {\n            return this.id + '_list';\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        },\n        isClearIconVisible() {\n            return this.showClear && this.d_value != null && isNotEmpty(this.options);\n        }\n    },\n    components: {\n        TSTree: Tree,\n        Chip,\n        Portal,\n        ChevronDownIcon,\n        TimesIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onClick\" v-bind=\"ptmi('root')\">\n        <div class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenInputContainer')\" :data-p-hidden-accessible=\"true\">\n            <input\n                ref=\"focusInput\"\n                :id=\"inputId\"\n                type=\"text\"\n                role=\"combobox\"\n                :class=\"inputClass\"\n                :style=\"inputStyle\"\n                readonly\n                :disabled=\"disabled\"\n                :tabindex=\"!disabled ? tabindex : -1\"\n                :aria-labelledby=\"ariaLabelledby\"\n                :aria-label=\"ariaLabel\"\n                aria-haspopup=\"tree\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"listId\"\n                @focus=\"onFocus($event)\"\n                @blur=\"onBlur($event)\"\n                @keydown=\"onKeyDown($event)\"\n                v-bind=\"{ ...inputProps, ...ptm('hiddenInput') }\"\n            />\n        </div>\n        <div :class=\"cx('labelContainer')\" v-bind=\"ptm('labelContainer')\">\n            <div :class=\"cx('label')\" v-bind=\"ptm('label')\">\n                <slot name=\"value\" :value=\"selectedNodes\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{ label || 'empty' }}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <template v-if=\"chipSelectedItems\">\n                            <span>{{ label }}</span>\n                        </template>\n                        <template v-else>\n                            <div v-for=\"node of selectedNodes\" :key=\"node.key\" :class=\"cx('chipItem')\" v-bind=\"ptm('chipItem')\">\n                                <Chip :class=\"cx('pcChip')\" :label=\"node.label\" :unstyled=\"unstyled\" :pt=\"ptm('pcChip')\" />\n                            </div>\n                            <template v-if=\"emptyValue\">{{ placeholder || 'empty' }}</template>\n                        </template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <slot v-if=\"isClearIconVisible\" name=\"clearicon\" :class=\"cx('clearIcon')\" :clearCallback=\"onClearClick\">\n            <component :is=\"clearIcon ? 'i' : 'TimesIcon'\" ref=\"clearIcon\" :class=\"[cx('clearIcon'), clearIcon]\" @click=\"onClearClick\" v-bind=\"ptm('clearIcon')\" data-pc-section=\"clearicon\" />\n        </slot>\n        <div :class=\"cx('dropdown')\" role=\"button\" aria-haspopup=\"tree\" :aria-expanded=\"overlayVisible\" v-bind=\"ptm('dropdown')\">\n            <!-- TODO: triggericon is deprecated since v4.0 -->\n            <slot :name=\"$slots.dropdownicon ? 'dropdownicon' : 'triggericon'\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"'ChevronDownIcon'\" :class=\"cx('dropdownIcon')\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" @click=\"onOverlayClick\" :class=\"[cx('panel'), panelClass]\" @keydown=\"onOverlayKeydown\" v-bind=\"{ ...panelProps, ...ptm('panel') }\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"d_value\" :options=\"options\"></slot>\n                    <div :class=\"cx('treeContainer')\" :style=\"{ 'max-height': scrollHeight }\" v-bind=\"ptm('treeContainer')\">\n                        <TSTree\n                            ref=\"tree\"\n                            :id=\"listId\"\n                            :value=\"options\"\n                            :selectionMode=\"selectionMode\"\n                            :loading=\"loading\"\n                            :loadingIcon=\"loadingIcon\"\n                            :loadingMode=\"loadingMode\"\n                            :filter=\"filter\"\n                            :filterBy=\"filterBy\"\n                            :filterMode=\"filterMode\"\n                            :filterPlaceholder=\"filterPlaceholder\"\n                            :filterLocale=\"filterLocale\"\n                            @update:selectionKeys=\"onSelectionChange\"\n                            :selectionKeys=\"d_value\"\n                            :expandedKeys=\"d_expandedKeys\"\n                            @update:expandedKeys=\"onNodeToggle\"\n                            :metaKeySelection=\"metaKeySelection\"\n                            @node-expand=\"$emit('node-expand', $event)\"\n                            @node-collapse=\"$emit('node-collapse', $event)\"\n                            @node-select=\"onNodeSelect\"\n                            @node-unselect=\"onNodeUnselect\"\n                            @click.stop\n                            :level=\"0\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"ptm('pcTree')\"\n                        >\n                            <template v-if=\"$slots.option\" #default=\"optionSlotProps\">\n                                <slot name=\"option\" :node=\"optionSlotProps.node\" :expanded=\"optionSlotProps.expanded\" :selected=\"optionSlotProps.selected\" />\n                            </template>\n                            <template v-if=\"$slots.itemtoggleicon\" #toggleicon=\"iconSlotProps\">\n                                <slot name=\"itemtoggleicon\" :node=\"iconSlotProps.node\" :expanded=\"iconSlotProps.expanded\" :class=\"iconSlotProps.class\" />\n                            </template>\n                            <!--TODO: itemtogglericon deprecated since v4.0-->\n                            <template v-else-if=\"$slots.itemtogglericon\" #togglericon=\"iconSlotProps\">\n                                <slot name=\"itemtogglericon\" :node=\"iconSlotProps.node\" :expanded=\"iconSlotProps.expanded\" :class=\"iconSlotProps.class\" />\n                            </template>\n                            <template v-if=\"$slots.itemcheckboxicon\" #checkboxicon=\"iconSlotProps\">\n                                <slot name=\"itemcheckboxicon\" :checked=\"iconSlotProps.checked\" :partialChecked=\"iconSlotProps.partialChecked\" :class=\"iconSlotProps.class\" />\n                            </template>\n                        </TSTree>\n                        <div v-if=\"emptyOptions && !loading\" :class=\"cx('emptyMessage')\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                        </div>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :options=\"options\"></slot>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { absolutePosition, addStyle, find, findSingle, focus, getFirstFocusableElement, getFocusableElements, getLastFocusableElement, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { isEmpty, isNotEmpty } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport TimesIcon from '@primevue/icons/times';\nimport Chip from 'primevue/chip';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport Tree from 'primevue/tree';\nimport BaseTreeSelect from './BaseTreeSelect.vue';\n\nexport default {\n    name: 'TreeSelect',\n    extends: BaseTreeSelect,\n    inheritAttrs: false,\n    emits: ['before-show', 'before-hide', 'change', 'show', 'hide', 'node-select', 'node-unselect', 'node-expand', 'node-collapse', 'focus', 'blur', 'update:expandedKeys'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    data() {\n        return {\n            id: this.$attrs.id,\n            focused: false,\n            overlayVisible: false,\n            d_expandedKeys: this.expandedKeys || {}\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        modelValue: {\n            handler: function () {\n                if (!this.selfChange) {\n                    this.updateTreeState();\n                }\n\n                this.selfChange = false;\n            },\n            immediate: true\n        },\n        options() {\n            this.updateTreeState();\n        },\n        expandedKeys(value) {\n            this.d_expandedKeys = value;\n        }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    selfChange: false,\n    selfClick: false,\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.updateTreeState();\n    },\n    methods: {\n        show() {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n        },\n        hide() {\n            this.$emit('before-hide');\n            this.overlayVisible = false;\n            this.$refs.focusInput.focus();\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onClick(event) {\n            if (this.disabled) {\n                return;\n            }\n\n            if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n                return;\n            } else if (!this.overlay || !this.overlay.contains(event.target)) {\n                if (this.overlayVisible) this.hide();\n                else this.show();\n\n                focus(this.$refs.focusInput);\n            }\n        },\n        onClearClick() {\n            this.onSelectionChange(null);\n        },\n        onSelectionChange(keys) {\n            this.selfChange = true;\n            this.writeValue(keys);\n            this.$emit('change', keys);\n        },\n        onNodeSelect(node) {\n            this.$emit('node-select', node);\n\n            if (this.selectionMode === 'single') {\n                this.hide();\n            }\n        },\n        onNodeUnselect(node) {\n            this.$emit('node-unselect', node);\n        },\n        onNodeToggle(keys) {\n            this.d_expandedKeys = keys;\n\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        getSelectedItemsLabel() {\n            let pattern = /{(.*?)}/;\n            const selectedItemsLabel = this.selectedItemsLabel || this.$primevue.config.locale.selectionMessage;\n\n            if (pattern.test(selectedItemsLabel)) {\n                return selectedItemsLabel.replace(selectedItemsLabel.match(pattern)[0], Object.keys(this.d_value).length + '');\n            }\n\n            return selectedItemsLabel;\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'Space':\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (this.overlayVisible) return;\n\n            this.show();\n\n            this.$nextTick(() => {\n                const treeNodeEl = find(this.$refs.tree.$el, '[data-pc-section=\"treeitem\"]');\n                const focusedElement = [...treeNodeEl].find((item) => item.getAttribute('tabindex') === '0');\n\n                focus(focusedElement);\n            });\n\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.overlayVisible) {\n                this.hide();\n            } else {\n                this.onArrowDownKey(event);\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            if (this.overlayVisible) {\n                this.hide();\n                event.preventDefault();\n            }\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                }\n            }\n        },\n        hasFocusableElements() {\n            return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.focus();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n            this.scrollValueInView();\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        focus() {\n            let focusableElements = getFocusableElements(this.overlay);\n\n            if (focusableElements && focusableElements.length > 0) {\n                focusableElements[0].focus();\n            }\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n                absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && !this.selfClick && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n\n                    this.selfClick = false;\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n\n            this.selfClick = true;\n        },\n        onOverlayKeydown(event) {\n            if (event.code === 'Escape') this.hide();\n        },\n        findSelectedNodes(node, keys, selectedNodes) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    selectedNodes.push(node);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        this.findSelectedNodes(childNode, keys, selectedNodes);\n                    }\n                }\n            } else {\n                for (let childNode of this.options) {\n                    this.findSelectedNodes(childNode, keys, selectedNodes);\n                }\n            }\n        },\n        isSelected(node, keys) {\n            return this.selectionMode === 'checkbox' ? keys[node.key] && keys[node.key].checked : keys[node.key];\n        },\n        updateTreeState() {\n            let keys = { ...this.d_value };\n\n            if (keys && this.options) {\n                this.updateTreeBranchState(null, null, keys);\n            }\n        },\n        updateTreeBranchState(node, path, keys) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    this.expandPath(path);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        path.push(node.key);\n                        this.updateTreeBranchState(childNode, path, keys);\n                    }\n                }\n            } else {\n                for (let childNode of this.options) {\n                    this.updateTreeBranchState(childNode, [], keys);\n                }\n            }\n        },\n        expandPath(path) {\n            if (path.length > 0) {\n                for (let key of path) {\n                    this.d_expandedKeys[key] = true;\n                }\n\n                this.d_expandedKeys = { ...this.d_expandedKeys };\n                this.$emit('update:expandedKeys', this.d_expandedKeys);\n            }\n        },\n        scrollValueInView() {\n            if (this.overlay) {\n                let selectedItem = findSingle(this.overlay, '[data-p-selected=\"true\"]');\n\n                if (selectedItem) {\n                    selectedItem.scrollIntoView({ block: 'nearest', inline: 'start' });\n                }\n            }\n        }\n    },\n    computed: {\n        selectedNodes() {\n            let selectedNodes = [];\n\n            if (this.d_value && this.options) {\n                let keys = { ...this.d_value };\n\n                this.findSelectedNodes(null, keys, selectedNodes);\n            }\n\n            return selectedNodes;\n        },\n        label() {\n            let value = this.selectedNodes;\n            let label;\n\n            if (value.length) {\n                if (isNotEmpty(this.maxSelectedLabels) && value.length > this.maxSelectedLabels) {\n                    label = this.getSelectedItemsLabel();\n                } else {\n                    label = value.map((node) => node.label).join(', ');\n                }\n            } else {\n                label = this.placeholder;\n            }\n\n            return label;\n        },\n        chipSelectedItems() {\n            return isNotEmpty(this.maxSelectedLabels) && this.d_value && Object.keys(this.d_value).length > this.maxSelectedLabels;\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n        },\n        emptyValue() {\n            return !this.$filled;\n        },\n        emptyOptions() {\n            return !this.options || this.options.length === 0;\n        },\n        listId() {\n            return this.id + '_list';\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        },\n        isClearIconVisible() {\n            return this.showClear && this.d_value != null && isNotEmpty(this.options);\n        }\n    },\n    components: {\n        TSTree: Tree,\n        Chip,\n        Portal,\n        ChevronDownIcon,\n        TimesIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}