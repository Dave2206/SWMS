{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SplitterPanelStyle from 'primevue/splitterpanel/style';\nimport { openBlock, createElementBlock, mergeProps, renderSlot } from 'vue';\nvar script$1 = {\n  name: 'BaseSplitterPanel',\n  \"extends\": BaseComponent,\n  props: {\n    size: {\n      type: Number,\n      \"default\": null\n    },\n    minSize: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  style: SplitterPanelStyle,\n  provide: function provide() {\n    return {\n      $pcSplitterPanel: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script = {\n  name: 'SplitterPanel',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  data: function data() {\n    return {\n      nestedState: null\n    };\n  },\n  computed: {\n    isNested: function isNested() {\n      var _this = this;\n      return this.$slots[\"default\"]().some(function (child) {\n        _this.nestedState = child.type.name === 'Splitter' ? true : null;\n        return _this.nestedState;\n      });\n    },\n    getPTOptions: function getPTOptions() {\n      return {\n        context: {\n          nested: this.isNested\n        }\n      };\n    }\n  }\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root', $options.getPTOptions)), [renderSlot(_ctx.$slots, \"default\")], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","size","type","Number","minSize","style","SplitterPanelStyle","provide","$pcSplitterPanel","$parentInstance","script","inheritAttrs","data","nestedState","computed","isNested","_this","$slots","some","child","getPTOptions","context","nested","openBlock","createElementBlock","mergeProps","ref","_ctx","cx","ptmi","$options","renderSlot"],"sources":["../../src/splitterpanel/BaseSplitterPanel.vue","../../src/splitterpanel/SplitterPanel.vue","../../src/splitterpanel/SplitterPanel.vue?vue&type=template&id=8490dd80&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SplitterPanelStyle from 'primevue/splitterpanel/style';\n\nexport default {\n    name: 'BaseSplitterPanel',\n    extends: BaseComponent,\n    props: {\n        size: {\n            type: Number,\n            default: null\n        },\n        minSize: {\n            type: Number,\n            default: null\n        }\n    },\n    style: SplitterPanelStyle,\n    provide() {\n        return {\n            $pcSplitterPanel: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" v-bind=\"ptmi('root', getPTOptions)\">\n        <slot></slot>\n    </div>\n</template>\n\n<script>\nimport BaseSplitterPanel from './BaseSplitterPanel.vue';\n\nexport default {\n    name: 'SplitterPanel',\n    extends: BaseSplitterPanel,\n    inheritAttrs: false,\n    data() {\n        return {\n            nestedState: null\n        };\n    },\n    computed: {\n        isNested() {\n            return this.$slots.default().some((child) => {\n                this.nestedState = child.type.name === 'Splitter' ? true : null;\n\n                return this.nestedState;\n            });\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.isNested\n                }\n            };\n        }\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" v-bind=\"ptmi('root', getPTOptions)\">\n        <slot></slot>\n    </div>\n</template>\n\n<script>\nimport BaseSplitterPanel from './BaseSplitterPanel.vue';\n\nexport default {\n    name: 'SplitterPanel',\n    extends: BaseSplitterPanel,\n    inheritAttrs: false,\n    data() {\n        return {\n            nestedState: null\n        };\n    },\n    computed: {\n        isNested() {\n            return this.$slots.default().some((child) => {\n                this.nestedState = child.type.name === 'Splitter' ? true : null;\n\n                return this.nestedState;\n            });\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.isNested\n                }\n            };\n        }\n    }\n};\n</script>\n"],"mappings":";;;;;AAIA,IAAAA,QAAA,GAAe;EACXC,IAAI,EAAE,mBAAmB;EACzB,WAASC,aAAa;EACtBC,KAAK,EAAE;IACHC,IAAI,EAAE;MACFC,IAAI,EAAEC,MAAM;MACZ,SAAS;KACZ;IACDC,OAAO,EAAE;MACLF,IAAI,EAAEC,MAAM;MACZ,SAAS;IACb;GACH;EACDE,KAAK,EAAEC,kBAAkB;EACzBC,OAAO,WAAPA,OAAOA,CAAA,EAAG;IACN,OAAO;MACHC,gBAAgB,EAAE,IAAI;MACtBC,eAAe,EAAE;KACpB;EACL;AACJ,CAAC;ACfD,IAAAC,MAAA,GAAe;EACXZ,IAAI,EAAE,eAAe;EACrB,WAASD,QAAiB;EAC1Bc,YAAY,EAAE,KAAK;EACnBC,IAAI,WAAJA,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,WAAW,EAAE;KAChB;GACJ;EACDC,QAAQ,EAAE;IACNC,QAAQ,WAARA,QAAQA,CAAA,EAAG;MAAA,IAAAC,KAAA;MACP,OAAO,IAAI,CAACC,MAAM,CAAQ,YAAE,CAACC,IAAI,CAAC,UAACC,KAAK,EAAK;QACzCH,KAAI,CAACH,WAAU,GAAIM,KAAK,CAACjB,IAAI,CAACJ,IAAG,KAAM,UAAW,GAAE,IAAG,GAAI,IAAI;QAE/D,OAAOkB,KAAI,CAACH,WAAW;MAC3B,CAAC,CAAC;KACL;IACDO,YAAY,WAAZA,YAAYA,CAAA,EAAG;MACX,OAAO;QACHC,OAAO,EAAE;UACLC,MAAM,EAAE,IAAI,CAACP;QACjB;OACH;IACL;EACJ;AACJ,CAAC;;ECjCG,OAAAQ,SAAA,IAAAC,kBAAA,CAEK,OAFLC,UAEK;IAFAC,GAAG,EAAC,WAAU;IAAG,SAAOC,IAAE,CAAAC,EAAA;GAAkB,EAAAD,IAAA,CAAAE,IAAI,SAASC,QAAY,CAAAV,YAAA,KACtEW,UAAY,CAAAJ,IAAA,CAAAV,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}