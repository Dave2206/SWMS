{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { getWidth, getHeight, getOuterWidth, getOuterHeight, isRTL } from '@primeuix/utils/dom';\nimport { isArray } from '@primeuix/utils/object';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SplitterStyle from 'primevue/splitter/style';\nimport { openBlock, createElementBlock, mergeProps, Fragment, renderList, createBlock, resolveDynamicComponent, createElementVNode, createCommentVNode } from 'vue';\nvar script$1 = {\n  name: 'BaseSplitter',\n  \"extends\": BaseComponent,\n  props: {\n    layout: {\n      type: String,\n      \"default\": 'horizontal'\n    },\n    gutterSize: {\n      type: Number,\n      \"default\": 4\n    },\n    stateKey: {\n      type: String,\n      \"default\": null\n    },\n    stateStorage: {\n      type: String,\n      \"default\": 'session'\n    },\n    step: {\n      type: Number,\n      \"default\": 5\n    }\n  },\n  style: SplitterStyle,\n  provide: function provide() {\n    return {\n      $pcSplitter: this,\n      $parentInstance: this\n    };\n  }\n};\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script = {\n  name: 'Splitter',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['resizestart', 'resizeend', 'resize'],\n  dragging: false,\n  mouseMoveListener: null,\n  mouseUpListener: null,\n  touchMoveListener: null,\n  touchEndListener: null,\n  size: null,\n  gutterElement: null,\n  startPos: null,\n  prevPanelElement: null,\n  nextPanelElement: null,\n  nextPanelSize: null,\n  prevPanelSize: null,\n  panelSizes: null,\n  prevPanelIndex: null,\n  timer: null,\n  data: function data() {\n    return {\n      prevSize: null\n    };\n  },\n  mounted: function mounted() {\n    this.initializePanels();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.clear();\n    this.unbindMouseListeners();\n  },\n  methods: {\n    isSplitterPanel: function isSplitterPanel(child) {\n      return child.type.name === 'SplitterPanel';\n    },\n    initializePanels: function initializePanels() {\n      var _this = this;\n      if (this.panels && this.panels.length) {\n        var initialized = false;\n        if (this.isStateful()) {\n          initialized = this.restoreState();\n        }\n        if (!initialized) {\n          var children = _toConsumableArray(this.$el.children).filter(function (child) {\n            return child.getAttribute('data-pc-name') === 'splitterpanel';\n          });\n          var _panelSizes = [];\n          this.panels.map(function (panel, i) {\n            var panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n            var panelSize = panelInitialSize || 100 / _this.panels.length;\n            _panelSizes[i] = panelSize;\n            children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (_this.panels.length - 1) * _this.gutterSize + 'px)';\n          });\n          this.panelSizes = _panelSizes;\n          this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n        }\n      }\n    },\n    onResizeStart: function onResizeStart(event, index, isKeyDown) {\n      this.gutterElement = event.currentTarget || event.target.parentElement;\n      this.size = this.horizontal ? getWidth(this.$el) : getHeight(this.$el);\n      if (!isKeyDown) {\n        this.dragging = true;\n        this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n      }\n      this.prevPanelElement = this.gutterElement.previousElementSibling;\n      this.nextPanelElement = this.gutterElement.nextElementSibling;\n      if (isKeyDown) {\n        this.prevPanelSize = this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true);\n        this.nextPanelSize = this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true);\n      } else {\n        this.prevPanelSize = 100 * (this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true)) / this.size;\n        this.nextPanelSize = 100 * (this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true)) / this.size;\n      }\n      this.prevPanelIndex = index;\n      this.$emit('resizestart', {\n        originalEvent: event,\n        sizes: this.panelSizes\n      });\n      this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n      this.$el.setAttribute('data-p-resizing', true);\n    },\n    onResize: function onResize(event, step, isKeyDown) {\n      var newPos, newPrevPanelSize, newNextPanelSize;\n      if (isKeyDown) {\n        if (this.horizontal) {\n          newPrevPanelSize = 100 * (this.prevPanelSize + step) / this.size;\n          newNextPanelSize = 100 * (this.nextPanelSize - step) / this.size;\n        } else {\n          newPrevPanelSize = 100 * (this.prevPanelSize - step) / this.size;\n          newNextPanelSize = 100 * (this.nextPanelSize + step) / this.size;\n        }\n      } else {\n        if (this.horizontal) {\n          if (isRTL(this.$el)) {\n            newPos = (this.startPos - event.pageX) * 100 / this.size;\n          } else {\n            newPos = (event.pageX - this.startPos) * 100 / this.size;\n          }\n        } else {\n          newPos = (event.pageY - this.startPos) * 100 / this.size;\n        }\n        newPrevPanelSize = this.prevPanelSize + newPos;\n        newNextPanelSize = this.nextPanelSize - newPos;\n      }\n      if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n        this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n        this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n        this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n        this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n        this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n      }\n      this.$emit('resize', {\n        originalEvent: event,\n        sizes: this.panelSizes\n      });\n    },\n    onResizeEnd: function onResizeEnd(event) {\n      if (this.isStateful()) {\n        this.saveState();\n      }\n      this.$emit('resizeend', {\n        originalEvent: event,\n        sizes: this.panelSizes\n      });\n      this.$refs.gutter.forEach(function (gutter) {\n        return gutter.setAttribute('data-p-gutter-resizing', false);\n      });\n      this.$el.setAttribute('data-p-resizing', false);\n      this.clear();\n    },\n    repeat: function repeat(event, index, step) {\n      this.onResizeStart(event, index, true);\n      this.onResize(event, step, true);\n    },\n    setTimer: function setTimer(event, index, step) {\n      var _this2 = this;\n      if (!this.timer) {\n        this.timer = setInterval(function () {\n          _this2.repeat(event, index, step);\n        }, 40);\n      }\n    },\n    clearTimer: function clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    onGutterKeyUp: function onGutterKeyUp() {\n      this.clearTimer();\n      this.onResizeEnd();\n    },\n    onGutterKeyDown: function onGutterKeyDown(event, index) {\n      switch (event.code) {\n        case 'ArrowLeft':\n          {\n            if (this.layout === 'horizontal') {\n              this.setTimer(event, index, this.step * -1);\n            }\n            event.preventDefault();\n            break;\n          }\n        case 'ArrowRight':\n          {\n            if (this.layout === 'horizontal') {\n              this.setTimer(event, index, this.step);\n            }\n            event.preventDefault();\n            break;\n          }\n        case 'ArrowDown':\n          {\n            if (this.layout === 'vertical') {\n              this.setTimer(event, index, this.step * -1);\n            }\n            event.preventDefault();\n            break;\n          }\n        case 'ArrowUp':\n          {\n            if (this.layout === 'vertical') {\n              this.setTimer(event, index, this.step);\n            }\n            event.preventDefault();\n            break;\n          }\n      }\n    },\n    onGutterMouseDown: function onGutterMouseDown(event, index) {\n      this.onResizeStart(event, index);\n      this.bindMouseListeners();\n    },\n    onGutterTouchStart: function onGutterTouchStart(event, index) {\n      this.onResizeStart(event, index);\n      this.bindTouchListeners();\n      event.preventDefault();\n    },\n    onGutterTouchMove: function onGutterTouchMove(event) {\n      this.onResize(event);\n      event.preventDefault();\n    },\n    onGutterTouchEnd: function onGutterTouchEnd(event) {\n      this.onResizeEnd(event);\n      this.unbindTouchListeners();\n      event.preventDefault();\n    },\n    bindMouseListeners: function bindMouseListeners() {\n      var _this3 = this;\n      if (!this.mouseMoveListener) {\n        this.mouseMoveListener = function (event) {\n          return _this3.onResize(event);\n        };\n        document.addEventListener('mousemove', this.mouseMoveListener);\n      }\n      if (!this.mouseUpListener) {\n        this.mouseUpListener = function (event) {\n          _this3.onResizeEnd(event);\n          _this3.unbindMouseListeners();\n        };\n        document.addEventListener('mouseup', this.mouseUpListener);\n      }\n    },\n    bindTouchListeners: function bindTouchListeners() {\n      var _this4 = this;\n      if (!this.touchMoveListener) {\n        this.touchMoveListener = function (event) {\n          return _this4.onResize(event.changedTouches[0]);\n        };\n        document.addEventListener('touchmove', this.touchMoveListener);\n      }\n      if (!this.touchEndListener) {\n        this.touchEndListener = function (event) {\n          _this4.resizeEnd(event);\n          _this4.unbindTouchListeners();\n        };\n        document.addEventListener('touchend', this.touchEndListener);\n      }\n    },\n    validateResize: function validateResize(newPrevPanelSize, newNextPanelSize) {\n      if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n      if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n      var prevPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n      if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n        return false;\n      }\n      var newPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n      if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n        return false;\n      }\n      return true;\n    },\n    unbindMouseListeners: function unbindMouseListeners() {\n      if (this.mouseMoveListener) {\n        document.removeEventListener('mousemove', this.mouseMoveListener);\n        this.mouseMoveListener = null;\n      }\n      if (this.mouseUpListener) {\n        document.removeEventListener('mouseup', this.mouseUpListener);\n        this.mouseUpListener = null;\n      }\n    },\n    unbindTouchListeners: function unbindTouchListeners() {\n      if (this.touchMoveListener) {\n        document.removeEventListener('touchmove', this.touchMoveListener);\n        this.touchMoveListener = null;\n      }\n      if (this.touchEndListener) {\n        document.removeEventListener('touchend', this.touchEndListener);\n        this.touchEndListener = null;\n      }\n    },\n    clear: function clear() {\n      this.dragging = false;\n      this.size = null;\n      this.startPos = null;\n      this.prevPanelElement = null;\n      this.nextPanelElement = null;\n      this.prevPanelSize = null;\n      this.nextPanelSize = null;\n      this.gutterElement = null;\n      this.prevPanelIndex = null;\n    },\n    isStateful: function isStateful() {\n      return this.stateKey != null;\n    },\n    getStorage: function getStorage() {\n      switch (this.stateStorage) {\n        case 'local':\n          return window.localStorage;\n        case 'session':\n          return window.sessionStorage;\n        default:\n          throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n      }\n    },\n    saveState: function saveState() {\n      if (isArray(this.panelSizes)) {\n        this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n      }\n    },\n    restoreState: function restoreState() {\n      var _this5 = this;\n      var storage = this.getStorage();\n      var stateString = storage.getItem(this.stateKey);\n      if (stateString) {\n        this.panelSizes = JSON.parse(stateString);\n        var children = _toConsumableArray(this.$el.children).filter(function (child) {\n          return child.getAttribute('data-pc-name') === 'splitterpanel';\n        });\n        children.forEach(function (child, i) {\n          child.style.flexBasis = 'calc(' + _this5.panelSizes[i] + '% - ' + (_this5.panels.length - 1) * _this5.gutterSize + 'px)';\n        });\n        return true;\n      }\n      return false;\n    },\n    resetState: function resetState() {\n      this.initializePanels();\n    }\n  },\n  computed: {\n    panels: function panels() {\n      var _this6 = this;\n      var panels = [];\n      this.$slots[\"default\"]().forEach(function (child) {\n        if (_this6.isSplitterPanel(child)) {\n          panels.push(child);\n        } else if (child.children instanceof Array) {\n          child.children.forEach(function (nestedChild) {\n            if (_this6.isSplitterPanel(nestedChild)) {\n              panels.push(nestedChild);\n            }\n          });\n        }\n      });\n      return panels;\n    },\n    gutterStyle: function gutterStyle() {\n      if (this.horizontal) return {\n        width: this.gutterSize + 'px'\n      };else return {\n        height: this.gutterSize + 'px'\n      };\n    },\n    horizontal: function horizontal() {\n      return this.layout === 'horizontal';\n    },\n    getPTOptions: function getPTOptions() {\n      var _this$$parentInstance;\n      return {\n        context: {\n          nested: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.nestedState\n        }\n      };\n    }\n  }\n};\nvar _hoisted_1 = [\"onMousedown\", \"onTouchstart\", \"onTouchmove\", \"onTouchend\"];\nvar _hoisted_2 = [\"aria-orientation\", \"aria-valuenow\", \"onKeydown\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    \"data-p-resizing\": false\n  }, _ctx.ptmi('root', $options.getPTOptions)), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.panels, function (panel, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: i\n    }, [(openBlock(), createBlock(resolveDynamicComponent(panel), {\n      tabindex: \"-1\"\n    })), i !== $options.panels.length - 1 ? (openBlock(), createElementBlock(\"div\", mergeProps({\n      key: 0,\n      ref_for: true,\n      ref: \"gutter\",\n      \"class\": _ctx.cx('gutter'),\n      role: \"separator\",\n      tabindex: \"-1\",\n      onMousedown: function onMousedown($event) {\n        return $options.onGutterMouseDown($event, i);\n      },\n      onTouchstart: function onTouchstart($event) {\n        return $options.onGutterTouchStart($event, i);\n      },\n      onTouchmove: function onTouchmove($event) {\n        return $options.onGutterTouchMove($event, i);\n      },\n      onTouchend: function onTouchend($event) {\n        return $options.onGutterTouchEnd($event, i);\n      },\n      \"data-p-gutter-resizing\": false\n    }, _ctx.ptm('gutter')), [createElementVNode(\"div\", mergeProps({\n      \"class\": _ctx.cx('gutterHandle'),\n      tabindex: \"0\",\n      style: [$options.gutterStyle],\n      \"aria-orientation\": _ctx.layout,\n      \"aria-valuenow\": $data.prevSize,\n      onKeyup: _cache[0] || (_cache[0] = function () {\n        return $options.onGutterKeyUp && $options.onGutterKeyUp.apply($options, arguments);\n      }),\n      onKeydown: function onKeydown($event) {\n        return $options.onGutterKeyDown($event, i);\n      },\n      ref_for: true\n    }, _ctx.ptm('gutterHandle')), null, 16, _hoisted_2)], 16, _hoisted_1)) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","layout","type","String","gutterSize","Number","stateKey","stateStorage","step","style","SplitterStyle","provide","$pcSplitter","$parentInstance","script","inheritAttrs","emits","dragging","mouseMoveListener","mouseUpListener","touchMoveListener","touchEndListener","size","gutterElement","startPos","prevPanelElement","nextPanelElement","nextPanelSize","prevPanelSize","panelSizes","prevPanelIndex","timer","data","prevSize","mounted","initializePanels","beforeUnmount","clear","unbindMouseListeners","methods","isSplitterPanel","child","_this","panels","length","initialized","isStateful","restoreState","children","_toConsumableArray","$el","filter","getAttribute","_panelSizes","map","panel","i","panelInitialSize","panelSize","flexBasis","parseFloat","toFixed","onResizeStart","event","index","isKeyDown","currentTarget","target","parentElement","horizontal","getWidth","getHeight","pageX","changedTouches","pageY","previousElementSibling","nextElementSibling","getOuterWidth","getOuterHeight","$emit","originalEvent","sizes","$refs","gutter","setAttribute","onResize","newPos","newPrevPanelSize","newNextPanelSize","isRTL","validateResize","onResizeEnd","saveState","forEach","repeat","setTimer","_this2","setInterval","clearTimer","clearInterval","onGutterKeyUp","onGutterKeyDown","code","preventDefault","onGutterMouseDown","bindMouseListeners","onGutterTouchStart","bindTouchListeners","onGutterTouchMove","onGutterTouchEnd","unbindTouchListeners","_this3","document","addEventListener","_this4","resizeEnd","prevPanelMinSize","getVNodeProp","newPanelMinSize","removeEventListener","getStorage","window","localStorage","sessionStorage","Error","isArray","setItem","JSON","stringify","_this5","storage","stateString","getItem","parse","resetState","computed","_this6","$slots","push","Array","nestedChild","gutterStyle","width","height","getPTOptions","_this$$parentInstance","context","nested","nestedState","openBlock","createElementBlock","mergeProps","_ctx","cx","sx","ptmi","$options","Fragment","renderList","createBlock","resolveDynamicComponent","tabindex","ref","role","onMousedown","$event","onTouchstart","onTouchmove","onTouchend","ptm","createElementVNode","$data","onKeyup","_cache","apply","arguments","onKeydown","_hoisted_2","_hoisted_1","createCommentVNode"],"sources":["../../src/splitter/BaseSplitter.vue","../../src/splitter/Splitter.vue","../../src/splitter/Splitter.vue?vue&type=template&id=7edac2d7&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SplitterStyle from 'primevue/splitter/style';\n\nexport default {\n    name: 'BaseSplitter',\n    extends: BaseComponent,\n    props: {\n        layout: {\n            type: String,\n            default: 'horizontal'\n        },\n        gutterSize: {\n            type: Number,\n            default: 4\n        },\n        stateKey: {\n            type: String,\n            default: null\n        },\n        stateStorage: {\n            type: String,\n            default: 'session'\n        },\n        step: {\n            type: Number,\n            default: 5\n        }\n    },\n    style: SplitterStyle,\n    provide() {\n        return {\n            $pcSplitter: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" :data-p-resizing=\"false\" v-bind=\"ptmi('root', getPTOptions)\">\n        <template v-for=\"(panel, i) of panels\" :key=\"i\">\n            <component :is=\"panel\" tabindex=\"-1\"></component>\n            <div\n                v-if=\"i !== panels.length - 1\"\n                ref=\"gutter\"\n                :class=\"cx('gutter')\"\n                role=\"separator\"\n                tabindex=\"-1\"\n                @mousedown=\"onGutterMouseDown($event, i)\"\n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\"\n                :data-p-gutter-resizing=\"false\"\n                v-bind=\"ptm('gutter')\"\n            >\n                <div :class=\"cx('gutterHandle')\" tabindex=\"0\" :style=\"[gutterStyle]\" :aria-orientation=\"layout\" :aria-valuenow=\"prevSize\" @keyup=\"onGutterKeyUp\" @keydown=\"onGutterKeyDown($event, i)\" v-bind=\"ptm('gutterHandle')\"></div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth, isRTL } from '@primeuix/utils/dom';\nimport { isArray } from '@primeuix/utils/object';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport BaseSplitter from './BaseSplitter.vue';\n\nexport default {\n    name: 'Splitter',\n    extends: BaseSplitter,\n    inheritAttrs: false,\n    emits: ['resizestart', 'resizeend', 'resize'],\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    touchMoveListener: null,\n    touchEndListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null,\n    timer: null,\n    data() {\n        return {\n            prevSize: null\n        };\n    },\n    mounted() {\n        this.initializePanels();\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n    },\n    methods: {\n        isSplitterPanel(child) {\n            return child.type.name === 'SplitterPanel';\n        },\n        initializePanels() {\n            if (this.panels && this.panels.length) {\n                let initialized = false;\n\n                if (this.isStateful()) {\n                    initialized = this.restoreState();\n                }\n\n                if (!initialized) {\n                    let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n                    let _panelSizes = [];\n\n                    this.panels.map((panel, i) => {\n                        let panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n                        let panelSize = panelInitialSize || 100 / this.panels.length;\n\n                        _panelSizes[i] = panelSize;\n                        children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                    });\n\n                    this.panelSizes = _panelSizes;\n                    this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n                }\n            }\n        },\n        onResizeStart(event, index, isKeyDown) {\n            this.gutterElement = event.currentTarget || event.target.parentElement;\n            this.size = this.horizontal ? getWidth(this.$el) : getHeight(this.$el);\n\n            if (!isKeyDown) {\n                this.dragging = true;\n                this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n            }\n\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n\n            if (isKeyDown) {\n                this.prevPanelSize = this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true);\n                this.nextPanelSize = this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true);\n            } else {\n                this.prevPanelSize = (100 * (this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true))) / this.size;\n                this.nextPanelSize = (100 * (this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true))) / this.size;\n            }\n\n            this.prevPanelIndex = index;\n            this.$emit('resizestart', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n            this.$el.setAttribute('data-p-resizing', true);\n        },\n        onResize(event, step, isKeyDown) {\n            let newPos, newPrevPanelSize, newNextPanelSize;\n\n            if (isKeyDown) {\n                if (this.horizontal) {\n                    newPrevPanelSize = (100 * (this.prevPanelSize + step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize - step)) / this.size;\n                } else {\n                    newPrevPanelSize = (100 * (this.prevPanelSize - step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize + step)) / this.size;\n                }\n            } else {\n                if (this.horizontal) {\n                    if (isRTL(this.$el)) {\n                        newPos = ((this.startPos - event.pageX) * 100) / this.size;\n                    } else {\n                        newPos = ((event.pageX - this.startPos) * 100) / this.size;\n                    }\n                } else {\n                    newPos = ((event.pageY - this.startPos) * 100) / this.size;\n                }\n\n                newPrevPanelSize = this.prevPanelSize + newPos;\n                newNextPanelSize = this.nextPanelSize - newPos;\n            }\n\n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n                this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n            }\n\n            this.$emit('resize', { originalEvent: event, sizes: this.panelSizes });\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter.forEach((gutter) => gutter.setAttribute('data-p-gutter-resizing', false));\n            this.$el.setAttribute('data-p-resizing', false);\n            this.clear();\n        },\n        repeat(event, index, step) {\n            this.onResizeStart(event, index, true);\n            this.onResize(event, step, true);\n        },\n        setTimer(event, index, step) {\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.repeat(event, index, step);\n                }, 40);\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n                this.timer = null;\n            }\n        },\n        onGutterKeyUp() {\n            this.clearTimer();\n            this.onResizeEnd();\n        },\n        onGutterKeyDown(event, index) {\n            switch (event.code) {\n                case 'ArrowLeft': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                default:\n                    //no op\n                    break;\n            }\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            this.bindTouchListeners();\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            this.unbindTouchListeners();\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = (event) => this.onResize(event);\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = (event) => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                };\n\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        bindTouchListeners() {\n            if (!this.touchMoveListener) {\n                this.touchMoveListener = (event) => this.onResize(event.changedTouches[0]);\n                document.addEventListener('touchmove', this.touchMoveListener);\n            }\n\n            if (!this.touchEndListener) {\n                this.touchEndListener = (event) => {\n                    this.resizeEnd(event);\n                    this.unbindTouchListeners();\n                };\n\n                document.addEventListener('touchend', this.touchEndListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n            if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n\n            let prevPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n\n            if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n                return false;\n            }\n\n            let newPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n\n            if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        unbindTouchListeners() {\n            if (this.touchMoveListener) {\n                document.removeEventListener('touchmove', this.touchMoveListener);\n                this.touchMoveListener = null;\n            }\n\n            if (this.touchEndListener) {\n                document.removeEventListener('touchend', this.touchEndListener);\n                this.touchEndListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch (this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            if (isArray(this.panelSizes)) {\n                this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n            }\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        },\n        resetState() {\n            this.initializePanels();\n        }\n    },\n    computed: {\n        panels() {\n            const panels = [];\n\n            this.$slots.default().forEach((child) => {\n                if (this.isSplitterPanel(child)) {\n                    panels.push(child);\n                } else if (child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isSplitterPanel(nestedChild)) {\n                            panels.push(nestedChild);\n                        }\n                    });\n                }\n            });\n\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal) return { width: this.gutterSize + 'px' };\n            else return { height: this.gutterSize + 'px' };\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.$parentInstance?.nestedState\n                }\n            };\n        }\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" :data-p-resizing=\"false\" v-bind=\"ptmi('root', getPTOptions)\">\n        <template v-for=\"(panel, i) of panels\" :key=\"i\">\n            <component :is=\"panel\" tabindex=\"-1\"></component>\n            <div\n                v-if=\"i !== panels.length - 1\"\n                ref=\"gutter\"\n                :class=\"cx('gutter')\"\n                role=\"separator\"\n                tabindex=\"-1\"\n                @mousedown=\"onGutterMouseDown($event, i)\"\n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\"\n                :data-p-gutter-resizing=\"false\"\n                v-bind=\"ptm('gutter')\"\n            >\n                <div :class=\"cx('gutterHandle')\" tabindex=\"0\" :style=\"[gutterStyle]\" :aria-orientation=\"layout\" :aria-valuenow=\"prevSize\" @keyup=\"onGutterKeyUp\" @keydown=\"onGutterKeyDown($event, i)\" v-bind=\"ptm('gutterHandle')\"></div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth, isRTL } from '@primeuix/utils/dom';\nimport { isArray } from '@primeuix/utils/object';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport BaseSplitter from './BaseSplitter.vue';\n\nexport default {\n    name: 'Splitter',\n    extends: BaseSplitter,\n    inheritAttrs: false,\n    emits: ['resizestart', 'resizeend', 'resize'],\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    touchMoveListener: null,\n    touchEndListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null,\n    timer: null,\n    data() {\n        return {\n            prevSize: null\n        };\n    },\n    mounted() {\n        this.initializePanels();\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n    },\n    methods: {\n        isSplitterPanel(child) {\n            return child.type.name === 'SplitterPanel';\n        },\n        initializePanels() {\n            if (this.panels && this.panels.length) {\n                let initialized = false;\n\n                if (this.isStateful()) {\n                    initialized = this.restoreState();\n                }\n\n                if (!initialized) {\n                    let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n                    let _panelSizes = [];\n\n                    this.panels.map((panel, i) => {\n                        let panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n                        let panelSize = panelInitialSize || 100 / this.panels.length;\n\n                        _panelSizes[i] = panelSize;\n                        children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                    });\n\n                    this.panelSizes = _panelSizes;\n                    this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n                }\n            }\n        },\n        onResizeStart(event, index, isKeyDown) {\n            this.gutterElement = event.currentTarget || event.target.parentElement;\n            this.size = this.horizontal ? getWidth(this.$el) : getHeight(this.$el);\n\n            if (!isKeyDown) {\n                this.dragging = true;\n                this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n            }\n\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n\n            if (isKeyDown) {\n                this.prevPanelSize = this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true);\n                this.nextPanelSize = this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true);\n            } else {\n                this.prevPanelSize = (100 * (this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true))) / this.size;\n                this.nextPanelSize = (100 * (this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true))) / this.size;\n            }\n\n            this.prevPanelIndex = index;\n            this.$emit('resizestart', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n            this.$el.setAttribute('data-p-resizing', true);\n        },\n        onResize(event, step, isKeyDown) {\n            let newPos, newPrevPanelSize, newNextPanelSize;\n\n            if (isKeyDown) {\n                if (this.horizontal) {\n                    newPrevPanelSize = (100 * (this.prevPanelSize + step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize - step)) / this.size;\n                } else {\n                    newPrevPanelSize = (100 * (this.prevPanelSize - step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize + step)) / this.size;\n                }\n            } else {\n                if (this.horizontal) {\n                    if (isRTL(this.$el)) {\n                        newPos = ((this.startPos - event.pageX) * 100) / this.size;\n                    } else {\n                        newPos = ((event.pageX - this.startPos) * 100) / this.size;\n                    }\n                } else {\n                    newPos = ((event.pageY - this.startPos) * 100) / this.size;\n                }\n\n                newPrevPanelSize = this.prevPanelSize + newPos;\n                newNextPanelSize = this.nextPanelSize - newPos;\n            }\n\n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n                this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n            }\n\n            this.$emit('resize', { originalEvent: event, sizes: this.panelSizes });\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter.forEach((gutter) => gutter.setAttribute('data-p-gutter-resizing', false));\n            this.$el.setAttribute('data-p-resizing', false);\n            this.clear();\n        },\n        repeat(event, index, step) {\n            this.onResizeStart(event, index, true);\n            this.onResize(event, step, true);\n        },\n        setTimer(event, index, step) {\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.repeat(event, index, step);\n                }, 40);\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n                this.timer = null;\n            }\n        },\n        onGutterKeyUp() {\n            this.clearTimer();\n            this.onResizeEnd();\n        },\n        onGutterKeyDown(event, index) {\n            switch (event.code) {\n                case 'ArrowLeft': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                default:\n                    //no op\n                    break;\n            }\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            this.bindTouchListeners();\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            this.unbindTouchListeners();\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = (event) => this.onResize(event);\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = (event) => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                };\n\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        bindTouchListeners() {\n            if (!this.touchMoveListener) {\n                this.touchMoveListener = (event) => this.onResize(event.changedTouches[0]);\n                document.addEventListener('touchmove', this.touchMoveListener);\n            }\n\n            if (!this.touchEndListener) {\n                this.touchEndListener = (event) => {\n                    this.resizeEnd(event);\n                    this.unbindTouchListeners();\n                };\n\n                document.addEventListener('touchend', this.touchEndListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n            if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n\n            let prevPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n\n            if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n                return false;\n            }\n\n            let newPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n\n            if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        unbindTouchListeners() {\n            if (this.touchMoveListener) {\n                document.removeEventListener('touchmove', this.touchMoveListener);\n                this.touchMoveListener = null;\n            }\n\n            if (this.touchEndListener) {\n                document.removeEventListener('touchend', this.touchEndListener);\n                this.touchEndListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch (this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            if (isArray(this.panelSizes)) {\n                this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n            }\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        },\n        resetState() {\n            this.initializePanels();\n        }\n    },\n    computed: {\n        panels() {\n            const panels = [];\n\n            this.$slots.default().forEach((child) => {\n                if (this.isSplitterPanel(child)) {\n                    panels.push(child);\n                } else if (child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isSplitterPanel(nestedChild)) {\n                            panels.push(nestedChild);\n                        }\n                    });\n                }\n            });\n\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal) return { width: this.gutterSize + 'px' };\n            else return { height: this.gutterSize + 'px' };\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.$parentInstance?.nestedState\n                }\n            };\n        }\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}