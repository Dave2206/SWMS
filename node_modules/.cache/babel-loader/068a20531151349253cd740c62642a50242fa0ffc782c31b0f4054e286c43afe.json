{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { focus, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice, findSingle } from '@primeuix/utils/dom';\nimport { resolveFieldData, isEmpty, isNotEmpty, equals, findLastIndex } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { UniqueComponentId, ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseInput from '@primevue/core/baseinput';\nimport AutoCompleteStyle from 'primevue/autocomplete/style';\nimport { resolveComponent, resolveDirective, openBlock, createElementBlock, mergeProps, createBlock, normalizeClass, normalizeStyle, createCommentVNode, Fragment, renderList, renderSlot, createVNode, withCtx, createElementVNode, resolveDynamicComponent, toDisplayString, Transition, createSlots, createTextVNode, withDirectives } from 'vue';\nvar script$1 = {\n  name: 'BaseAutoComplete',\n  \"extends\": BaseInput,\n  props: {\n    suggestions: {\n      type: Array,\n      \"default\": null\n    },\n    optionLabel: null,\n    optionDisabled: null,\n    optionGroupLabel: null,\n    optionGroupChildren: null,\n    scrollHeight: {\n      type: String,\n      \"default\": '14rem'\n    },\n    dropdown: {\n      type: Boolean,\n      \"default\": false\n    },\n    dropdownMode: {\n      type: String,\n      \"default\": 'blank'\n    },\n    multiple: {\n      type: Boolean,\n      \"default\": false\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    dataKey: {\n      type: String,\n      \"default\": null\n    },\n    minLength: {\n      type: Number,\n      \"default\": 1\n    },\n    delay: {\n      type: Number,\n      \"default\": 300\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    forceSelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    completeOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelStyle: {\n      type: Object,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    overlayStyle: {\n      type: Object,\n      \"default\": null\n    },\n    overlayClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    dropdownIcon: {\n      type: String,\n      \"default\": null\n    },\n    dropdownClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    loader: {\n      type: String,\n      \"default\": null\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": null\n    },\n    removeTokenIcon: {\n      type: String,\n      \"default\": null\n    },\n    chipIcon: {\n      type: String,\n      \"default\": null\n    },\n    virtualScrollerOptions: {\n      type: Object,\n      \"default\": null\n    },\n    autoOptionFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    focusOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    searchLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    searchMessage: {\n      type: String,\n      \"default\": null\n    },\n    selectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySelectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySearchMessage: {\n      type: String,\n      \"default\": null\n    },\n    showEmptyMessage: {\n      type: Boolean,\n      \"default\": true\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    typeahead: {\n      type: Boolean,\n      \"default\": true\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: AutoCompleteStyle,\n  provide: function provide() {\n    return {\n      $pcAutoComplete: this,\n      $parentInstance: this\n    };\n  }\n};\nfunction _typeof$1(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$1(o);\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script = {\n  name: 'AutoComplete',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n  inject: {\n    $pcFluid: {\n      \"default\": null\n    }\n  },\n  outsideClickListener: null,\n  resizeListener: null,\n  scrollHandler: null,\n  overlay: null,\n  virtualScroller: null,\n  searchTimeout: null,\n  dirty: false,\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      clicked: false,\n      focused: false,\n      focusedOptionIndex: -1,\n      focusedMultipleOptionIndex: -1,\n      overlayVisible: false,\n      searching: false\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    },\n    suggestions: function suggestions() {\n      if (this.searching) {\n        this.show();\n        this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n        this.searching = false;\n        !this.showEmptyMessage && this.visibleOptions.length === 0 && this.hide();\n      }\n      this.autoUpdateModel();\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    this.autoUpdateModel();\n  },\n  updated: function updated() {\n    if (this.overlayVisible) {\n      this.alignOverlay();\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndex.clear(this.overlay);\n      this.overlay = null;\n    }\n  },\n  methods: {\n    getOptionIndex: function getOptionIndex(index, fn) {\n      return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return option; // TODO: The 'optionValue' properties can be added.\n    },\n    getOptionRenderKey: function getOptionRenderKey(option, index) {\n      return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n    },\n    getPTOptions: function getPTOptions(option, itemOptions, index, key) {\n      return this.ptm(key, {\n        context: {\n          selected: this.isSelected(option),\n          focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n          disabled: this.isOptionDisabled(option)\n        }\n      });\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n    },\n    isOptionGroup: function isOptionGroup(option) {\n      return this.optionGroupLabel && option.optionGroup && option.group;\n    },\n    getOptionGroupLabel: function getOptionGroupLabel(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupLabel);\n    },\n    getOptionGroupChildren: function getOptionGroupChildren(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupChildren);\n    },\n    getAriaPosInset: function getAriaPosInset(index) {\n      var _this = this;\n      return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter(function (option) {\n        return _this.isOptionGroup(option);\n      }).length : index) + 1;\n    },\n    show: function show(isFocus) {\n      this.$emit('before-show');\n      this.dirty = true;\n      this.overlayVisible = true;\n      this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n      isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n    },\n    hide: function hide(isFocus) {\n      var _this2 = this;\n      var _hide = function _hide() {\n        var _this2$$refs$focusInp;\n        _this2.$emit('before-hide');\n        _this2.dirty = isFocus;\n        _this2.overlayVisible = false;\n        _this2.clicked = false;\n        _this2.focusedOptionIndex = -1;\n        isFocus && focus(_this2.multiple ? _this2.$refs.focusInput : (_this2$$refs$focusInp = _this2.$refs.focusInput) === null || _this2$$refs$focusInp === void 0 ? void 0 : _this2$$refs$focusInp.$el);\n      };\n      setTimeout(function () {\n        _hide();\n      }, 0); // For ScreenReaders\n    },\n    onFocus: function onFocus(event) {\n      if (this.disabled) {\n        // For ScreenReaders\n        return;\n      }\n      if (!this.dirty && this.completeOnFocus) {\n        this.search(event, event.target.value, 'focus');\n      }\n      this.dirty = true;\n      this.focused = true;\n      if (this.overlayVisible) {\n        this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n        this.scrollInView(this.focusedOptionIndex);\n      }\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      this.dirty = false;\n      this.focused = false;\n      this.focusedOptionIndex = -1;\n      this.$emit('blur', event);\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField);\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        return;\n      }\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeftKey(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'PageDown':\n          this.onPageDownKey(event);\n          break;\n        case 'PageUp':\n          this.onPageUpKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n        case 'Backspace':\n          this.onBackspaceKey(event);\n          break;\n      }\n      this.clicked = false;\n    },\n    onInput: function onInput(event) {\n      var _this3 = this;\n      if (this.typeahead) {\n        if (this.searchTimeout) {\n          clearTimeout(this.searchTimeout);\n        }\n        var query = event.target.value;\n        if (!this.multiple) {\n          this.updateModel(event, query);\n        }\n        if (query.length === 0) {\n          this.hide();\n          this.$emit('clear');\n        } else {\n          if (query.length >= this.minLength) {\n            this.focusedOptionIndex = -1;\n            this.searchTimeout = setTimeout(function () {\n              _this3.search(event, query, 'input');\n            }, this.delay);\n          } else {\n            this.hide();\n          }\n        }\n      }\n    },\n    onChange: function onChange(event) {\n      var _this4 = this;\n      if (this.forceSelection) {\n        var valid = false;\n\n        // when forceSelection is on, prevent called twice onOptionSelect()\n        if (this.visibleOptions && !this.multiple) {\n          var value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput.$el.value;\n          var matchedValue = this.visibleOptions.find(function (option) {\n            return _this4.isOptionMatched(option, value || '');\n          });\n          if (matchedValue !== undefined) {\n            valid = true;\n            !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n          }\n        }\n        if (!valid) {\n          if (this.multiple) this.$refs.focusInput.value = '';else this.$refs.focusInput.$el.value = '';\n          this.$emit('clear');\n          !this.multiple && this.updateModel(event, null);\n        }\n      }\n    },\n    onMultipleContainerFocus: function onMultipleContainerFocus() {\n      if (this.disabled) {\n        // For ScreenReaders\n        return;\n      }\n      this.focused = true;\n    },\n    onMultipleContainerBlur: function onMultipleContainerBlur() {\n      this.focusedMultipleOptionIndex = -1;\n      this.focused = false;\n    },\n    onMultipleContainerKeyDown: function onMultipleContainerKeyDown(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        return;\n      }\n      switch (event.code) {\n        case 'ArrowLeft':\n          this.onArrowLeftKeyOnMultiple(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKeyOnMultiple(event);\n          break;\n        case 'Backspace':\n          this.onBackspaceKeyOnMultiple(event);\n          break;\n      }\n    },\n    onContainerClick: function onContainerClick(event) {\n      this.clicked = true;\n      if (this.disabled || this.searching || this.loading || this.isDropdownClicked(event)) {\n        return;\n      }\n      if (!this.overlay || !this.overlay.contains(event.target)) {\n        focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n      }\n    },\n    onDropdownClick: function onDropdownClick(event) {\n      var query = undefined;\n      if (this.overlayVisible) {\n        this.hide(true);\n      } else {\n        var target = this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el;\n        focus(target);\n        query = target.value;\n        if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n      }\n      this.$emit('dropdown-click', {\n        originalEvent: event,\n        query: query\n      });\n    },\n    onOptionSelect: function onOptionSelect(event, option) {\n      var isHide = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var value = this.getOptionValue(option);\n      if (this.multiple) {\n        this.$refs.focusInput.value = '';\n        if (!this.isSelected(option)) {\n          this.updateModel(event, [].concat(_toConsumableArray(this.d_value || []), [value]));\n        }\n      } else {\n        this.updateModel(event, value);\n      }\n      this.$emit('item-select', {\n        originalEvent: event,\n        value: option\n      });\n      this.$emit('option-select', {\n        originalEvent: event,\n        value: option\n      });\n      isHide && this.hide(true);\n    },\n    onOptionMouseMove: function onOptionMouseMove(event, index) {\n      if (this.focusOnHover) {\n        this.changeFocusedOptionIndex(event, index);\n      }\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n    },\n    onOverlayKeyDown: function onOverlayKeyDown(event) {\n      switch (event.code) {\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      if (!this.overlayVisible) {\n        return;\n      }\n      var optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n      this.changeFocusedOptionIndex(event, optionIndex);\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      if (!this.overlayVisible) {\n        return;\n      }\n      if (event.altKey) {\n        if (this.focusedOptionIndex !== -1) {\n          this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n        }\n        this.overlayVisible && this.hide();\n        event.preventDefault();\n      } else {\n        var optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n        this.changeFocusedOptionIndex(event, optionIndex);\n        event.preventDefault();\n      }\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var target = event.currentTarget;\n      this.focusedOptionIndex = -1;\n      if (this.multiple) {\n        if (isEmpty(target.value) && this.$filled) {\n          focus(this.$refs.multiContainer);\n          this.focusedMultipleOptionIndex = this.d_value.length;\n        } else {\n          event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n        }\n      }\n    },\n    onArrowRightKey: function onArrowRightKey(event) {\n      this.focusedOptionIndex = -1;\n      this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n    },\n    onHomeKey: function onHomeKey(event) {\n      var currentTarget = event.currentTarget;\n      var len = currentTarget.value.length;\n      currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n      this.focusedOptionIndex = -1;\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var currentTarget = event.currentTarget;\n      var len = currentTarget.value.length;\n      currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n      this.focusedOptionIndex = -1;\n      event.preventDefault();\n    },\n    onPageUpKey: function onPageUpKey(event) {\n      this.scrollInView(0);\n      event.preventDefault();\n    },\n    onPageDownKey: function onPageDownKey(event) {\n      this.scrollInView(this.visibleOptions.length - 1);\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (!this.typeahead) {\n        if (this.multiple) {\n          this.updateModel(event, [].concat(_toConsumableArray(this.d_value || []), [event.target.value]));\n          this.$refs.focusInput.value = '';\n        }\n      } else {\n        if (!this.overlayVisible) {\n          this.focusedOptionIndex = -1; // reset\n          this.onArrowDownKey(event);\n        } else {\n          if (this.focusedOptionIndex !== -1) {\n            this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n          }\n          this.hide();\n        }\n      }\n      event.preventDefault();\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      this.overlayVisible && this.hide(true);\n      event.preventDefault();\n    },\n    onTabKey: function onTabKey(event) {\n      if (this.focusedOptionIndex !== -1) {\n        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n      }\n      this.overlayVisible && this.hide();\n    },\n    onBackspaceKey: function onBackspaceKey(event) {\n      if (this.multiple) {\n        if (isNotEmpty(this.d_value) && !this.$refs.focusInput.value) {\n          var removedValue = this.d_value[this.d_value.length - 1];\n          var newValue = this.d_value.slice(0, -1);\n          this.writeValue(newValue, event);\n          this.$emit('item-unselect', {\n            originalEvent: event,\n            value: removedValue\n          });\n          this.$emit('option-unselect', {\n            originalEvent: event,\n            value: removedValue\n          });\n        }\n        event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n      }\n    },\n    onArrowLeftKeyOnMultiple: function onArrowLeftKeyOnMultiple() {\n      this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n    },\n    onArrowRightKeyOnMultiple: function onArrowRightKeyOnMultiple() {\n      this.focusedMultipleOptionIndex++;\n      if (this.focusedMultipleOptionIndex > this.d_value.length - 1) {\n        this.focusedMultipleOptionIndex = -1;\n        focus(this.$refs.focusInput);\n      }\n    },\n    onBackspaceKeyOnMultiple: function onBackspaceKeyOnMultiple(event) {\n      if (this.focusedMultipleOptionIndex !== -1) {\n        this.removeOption(event, this.focusedMultipleOptionIndex);\n      }\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      addStyle(el, {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      });\n      this.alignOverlay();\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.$emit('show');\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.$emit('hide');\n      this.overlay = null;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    alignOverlay: function alignOverlay() {\n      var target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n      if (this.appendTo === 'self') {\n        relativePosition(this.overlay, target);\n      } else {\n        this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n        absolutePosition(this.overlay, target);\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this5 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this5.overlayVisible && _this5.overlay && _this5.isOutsideClicked(event)) {\n            _this5.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this6 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, function () {\n          if (_this6.overlayVisible) {\n            _this6.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this7 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this7.overlayVisible && !isTouchDevice()) {\n            _this7.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    isOutsideClicked: function isOutsideClicked(event) {\n      return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n    },\n    isInputClicked: function isInputClicked(event) {\n      if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);else return event.target === this.$refs.focusInput.$el;\n    },\n    isDropdownClicked: function isDropdownClicked(event) {\n      return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n    },\n    isOptionMatched: function isOptionMatched(option, value) {\n      var _this$getOptionLabel;\n      return this.isValidOption(option) && ((_this$getOptionLabel = this.getOptionLabel(option)) === null || _this$getOptionLabel === void 0 ? void 0 : _this$getOptionLabel.toLocaleLowerCase(this.searchLocale)) === value.toLocaleLowerCase(this.searchLocale);\n    },\n    isValidOption: function isValidOption(option) {\n      return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n    },\n    isValidSelectedOption: function isValidSelectedOption(option) {\n      return this.isValidOption(option) && this.isSelected(option);\n    },\n    isEquals: function isEquals(value1, value2) {\n      return equals(value1, value2, this.equalityKey);\n    },\n    isSelected: function isSelected(option) {\n      var _this8 = this;\n      var optionValue = this.getOptionValue(option);\n      return this.multiple ? (this.d_value || []).some(function (value) {\n        return _this8.isEquals(value, optionValue);\n      }) : this.isEquals(this.d_value, this.getOptionValue(option));\n    },\n    findFirstOptionIndex: function findFirstOptionIndex() {\n      var _this9 = this;\n      return this.visibleOptions.findIndex(function (option) {\n        return _this9.isValidOption(option);\n      });\n    },\n    findLastOptionIndex: function findLastOptionIndex() {\n      var _this10 = this;\n      return findLastIndex(this.visibleOptions, function (option) {\n        return _this10.isValidOption(option);\n      });\n    },\n    findNextOptionIndex: function findNextOptionIndex(index) {\n      var _this11 = this;\n      var matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this11.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n    },\n    findPrevOptionIndex: function findPrevOptionIndex(index) {\n      var _this12 = this;\n      var matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this12.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findSelectedOptionIndex: function findSelectedOptionIndex() {\n      var _this13 = this;\n      return this.$filled ? this.visibleOptions.findIndex(function (option) {\n        return _this13.isValidSelectedOption(option);\n      }) : -1;\n    },\n    findFirstFocusedOptionIndex: function findFirstFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n    },\n    findLastFocusedOptionIndex: function findLastFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n    },\n    search: function search(event, query, source) {\n      //allow empty string but not undefined or null\n      if (query === undefined || query === null) {\n        return;\n      }\n\n      //do not search blank values on input change\n      if (source === 'input' && query.trim().length === 0) {\n        return;\n      }\n      this.searching = true;\n      this.$emit('complete', {\n        originalEvent: event,\n        query: query\n      });\n    },\n    removeOption: function removeOption(event, index) {\n      var _this14 = this;\n      var removedOption = this.d_value[index];\n      var value = this.d_value.filter(function (_, i) {\n        return i !== index;\n      }).map(function (option) {\n        return _this14.getOptionValue(option);\n      });\n      this.updateModel(event, value);\n      this.$emit('item-unselect', {\n        originalEvent: event,\n        value: removedOption\n      });\n      this.$emit('option-unselect', {\n        originalEvent: event,\n        value: removedOption\n      });\n      this.dirty = true;\n      focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n    },\n    changeFocusedOptionIndex: function changeFocusedOptionIndex(event, index) {\n      if (this.focusedOptionIndex !== index) {\n        this.focusedOptionIndex = index;\n        this.scrollInView();\n        if (this.selectOnFocus) {\n          this.onOptionSelect(event, this.visibleOptions[index], false);\n        }\n      }\n    },\n    scrollInView: function scrollInView() {\n      var _this15 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      this.$nextTick(function () {\n        var id = index !== -1 ? \"\".concat(_this15.id, \"_\").concat(index) : _this15.focusedOptionId;\n        var element = findSingle(_this15.list, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n        if (element) {\n          element.scrollIntoView && element.scrollIntoView({\n            block: 'nearest',\n            inline: 'start'\n          });\n        } else if (!_this15.virtualScrollerDisabled) {\n          _this15.virtualScroller && _this15.virtualScroller.scrollToIndex(index !== -1 ? index : _this15.focusedOptionIndex);\n        }\n      });\n    },\n    autoUpdateModel: function autoUpdateModel() {\n      if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n        this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n        this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n      }\n    },\n    updateModel: function updateModel(event, value) {\n      this.writeValue(value, event);\n      this.$emit('change', {\n        originalEvent: event,\n        value: value\n      });\n    },\n    flatOptions: function flatOptions(options) {\n      var _this16 = this;\n      return (options || []).reduce(function (result, option, index) {\n        result.push({\n          optionGroup: option,\n          group: true,\n          index: index\n        });\n        var optionGroupChildren = _this16.getOptionGroupChildren(option);\n        optionGroupChildren && optionGroupChildren.forEach(function (o) {\n          return result.push(o);\n        });\n        return result;\n      }, []);\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    listRef: function listRef(el, contentRef) {\n      this.list = el;\n      contentRef && contentRef(el); // For VirtualScroller\n    },\n    virtualScrollerRef: function virtualScrollerRef(el) {\n      this.virtualScroller = el;\n    }\n  },\n  computed: {\n    visibleOptions: function visibleOptions() {\n      return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n    },\n    inputValue: function inputValue() {\n      if (this.$filled) {\n        if (_typeof$1(this.d_value) === 'object') {\n          var label = this.getOptionLabel(this.d_value);\n          return label != null ? label : this.d_value;\n        } else {\n          return this.d_value;\n        }\n      } else {\n        return '';\n      }\n    },\n    // @deprecated use $filled instead.\n    hasSelectedOption: function hasSelectedOption() {\n      return this.$filled;\n    },\n    equalityKey: function equalityKey() {\n      // @todo: The 'optionValue' properties can be added.\n      return this.dataKey;\n    },\n    searchResultMessageText: function searchResultMessageText() {\n      return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n    },\n    searchMessageText: function searchMessageText() {\n      return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n    },\n    emptySearchMessageText: function emptySearchMessageText() {\n      return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n    },\n    selectionMessageText: function selectionMessageText() {\n      return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n    },\n    emptySelectionMessageText: function emptySelectionMessageText() {\n      return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n    },\n    selectedMessageText: function selectedMessageText() {\n      return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n    },\n    listAriaLabel: function listAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedOptionIndex !== -1 ? \"\".concat(this.id, \"_\").concat(this.focusedOptionIndex) : null;\n    },\n    focusedMultipleOptionId: function focusedMultipleOptionId() {\n      return this.focusedMultipleOptionIndex !== -1 ? \"\".concat(this.id, \"_multiple_option_\").concat(this.focusedMultipleOptionIndex) : null;\n    },\n    ariaSetSize: function ariaSetSize() {\n      var _this17 = this;\n      return this.visibleOptions.filter(function (option) {\n        return !_this17.isOptionGroup(option);\n      }).length;\n    },\n    virtualScrollerDisabled: function virtualScrollerDisabled() {\n      return !this.virtualScrollerOptions;\n    },\n    panelId: function panelId() {\n      return this.id + '_panel';\n    }\n  },\n  components: {\n    InputText: InputText,\n    VirtualScroller: VirtualScroller,\n    Portal: Portal,\n    ChevronDownIcon: ChevronDownIcon,\n    SpinnerIcon: SpinnerIcon,\n    Chip: Chip\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar _hoisted_1 = [\"aria-activedescendant\"];\nvar _hoisted_2 = [\"id\", \"aria-label\", \"aria-setsize\", \"aria-posinset\"];\nvar _hoisted_3 = [\"id\", \"placeholder\", \"tabindex\", \"disabled\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"aria-invalid\"];\nvar _hoisted_4 = [\"disabled\", \"aria-expanded\", \"aria-controls\"];\nvar _hoisted_5 = [\"id\"];\nvar _hoisted_6 = [\"id\", \"aria-label\"];\nvar _hoisted_7 = [\"id\"];\nvar _hoisted_8 = [\"id\", \"aria-label\", \"aria-selected\", \"aria-disabled\", \"aria-setsize\", \"aria-posinset\", \"onClick\", \"onMousemove\", \"data-p-selected\", \"data-p-focus\", \"data-p-disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_InputText = resolveComponent(\"InputText\");\n  var _component_Chip = resolveComponent(\"Chip\");\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_VirtualScroller = resolveComponent(\"VirtualScroller\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    onClick: _cache[11] || (_cache[11] = function () {\n      return $options.onContainerClick && $options.onContainerClick.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [!_ctx.multiple ? (openBlock(), createBlock(_component_InputText, {\n    key: 0,\n    ref: \"focusInput\",\n    id: _ctx.inputId,\n    type: \"text\",\n    name: _ctx.$formName,\n    \"class\": normalizeClass([_ctx.cx('pcInputText'), _ctx.inputClass]),\n    style: normalizeStyle(_ctx.inputStyle),\n    value: $options.inputValue,\n    placeholder: _ctx.placeholder,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    fluid: _ctx.$fluid,\n    disabled: _ctx.disabled,\n    size: _ctx.size,\n    invalid: _ctx.invalid,\n    variant: _ctx.variant,\n    autocomplete: \"off\",\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-autocomplete\": \"list\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $options.panelId,\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    onFocus: $options.onFocus,\n    onBlur: $options.onBlur,\n    onKeydown: $options.onKeyDown,\n    onInput: $options.onInput,\n    onChange: $options.onChange,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.ptm('pcInputText')\n  }, null, 8, [\"id\", \"name\", \"class\", \"style\", \"value\", \"placeholder\", \"tabindex\", \"fluid\", \"disabled\", \"size\", \"invalid\", \"variant\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"onFocus\", \"onBlur\", \"onKeydown\", \"onInput\", \"onChange\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), _ctx.multiple ? (openBlock(), createElementBlock(\"ul\", mergeProps({\n    key: 1,\n    ref: \"multiContainer\",\n    \"class\": _ctx.cx('inputMultiple'),\n    tabindex: \"-1\",\n    role: \"listbox\",\n    \"aria-orientation\": \"horizontal\",\n    \"aria-activedescendant\": $data.focused ? $options.focusedMultipleOptionId : undefined,\n    onFocus: _cache[5] || (_cache[5] = function () {\n      return $options.onMultipleContainerFocus && $options.onMultipleContainerFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[6] || (_cache[6] = function () {\n      return $options.onMultipleContainerBlur && $options.onMultipleContainerBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[7] || (_cache[7] = function () {\n      return $options.onMultipleContainerKeyDown && $options.onMultipleContainerKeyDown.apply($options, arguments);\n    })\n  }, _ctx.ptm('inputMultiple')), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.d_value, function (option, i) {\n    return openBlock(), createElementBlock(\"li\", mergeProps({\n      key: \"\".concat(i, \"_\").concat($options.getOptionLabel(option)),\n      id: $data.id + '_multiple_option_' + i,\n      \"class\": _ctx.cx('chipItem', {\n        i: i\n      }),\n      role: \"option\",\n      \"aria-label\": $options.getOptionLabel(option),\n      \"aria-selected\": true,\n      \"aria-setsize\": _ctx.d_value.length,\n      \"aria-posinset\": i + 1,\n      ref_for: true\n    }, _ctx.ptm('chipItem')), [renderSlot(_ctx.$slots, \"chip\", mergeProps({\n      \"class\": _ctx.cx('pcChip'),\n      value: option,\n      index: i,\n      removeCallback: function removeCallback(event) {\n        return $options.removeOption(event, i);\n      },\n      ref_for: true\n    }, _ctx.ptm('pcChip')), function () {\n      return [createVNode(_component_Chip, {\n        \"class\": normalizeClass(_ctx.cx('pcChip')),\n        label: $options.getOptionLabel(option),\n        removeIcon: _ctx.chipIcon || _ctx.removeTokenIcon,\n        removable: \"\",\n        unstyled: _ctx.unstyled,\n        onRemove: function onRemove($event) {\n          return $options.removeOption($event, i);\n        },\n        pt: _ctx.ptm('pcChip')\n      }, {\n        removeicon: withCtx(function () {\n          return [renderSlot(_ctx.$slots, _ctx.$slots.chipicon ? 'chipicon' : 'removetokenicon', {\n            \"class\": normalizeClass(_ctx.cx('chipIcon')),\n            index: i,\n            removeCallback: function removeCallback(event) {\n              return $options.removeOption(event, i);\n            }\n          })];\n        }),\n        _: 2\n      }, 1032, [\"class\", \"label\", \"removeIcon\", \"unstyled\", \"onRemove\", \"pt\"])];\n    })], 16, _hoisted_2);\n  }), 128)), createElementVNode(\"li\", mergeProps({\n    \"class\": _ctx.cx('inputChip'),\n    role: \"option\"\n  }, _ctx.ptm('inputChip')), [createElementVNode(\"input\", mergeProps({\n    ref: \"focusInput\",\n    id: _ctx.inputId,\n    type: \"text\",\n    style: _ctx.inputStyle,\n    \"class\": _ctx.inputClass,\n    placeholder: _ctx.placeholder,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    disabled: _ctx.disabled,\n    autocomplete: \"off\",\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-autocomplete\": \"list\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $data.id + '_list',\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    onInput: _cache[3] || (_cache[3] = function () {\n      return $options.onInput && $options.onInput.apply($options, arguments);\n    }),\n    onChange: _cache[4] || (_cache[4] = function () {\n      return $options.onChange && $options.onChange.apply($options, arguments);\n    })\n  }, _ctx.ptm('input')), null, 16, _hoisted_3)], 16)], 16, _hoisted_1)) : createCommentVNode(\"\", true), $data.searching || _ctx.loading ? renderSlot(_ctx.$slots, _ctx.$slots.loader ? 'loader' : 'loadingicon', {\n    key: 2,\n    \"class\": normalizeClass(_ctx.cx('loader'))\n  }, function () {\n    return [_ctx.loader || _ctx.loadingIcon ? (openBlock(), createElementBlock(\"i\", mergeProps({\n      key: 0,\n      \"class\": ['pi-spin', _ctx.cx('loader'), _ctx.loader, _ctx.loadingIcon],\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('loader')), null, 16)) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('loader'),\n      spin: \"\",\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('loader')), null, 16, [\"class\"]))];\n  }) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, _ctx.$slots.dropdown ? 'dropdown' : 'dropdownbutton', {\n    toggleCallback: function toggleCallback(event) {\n      return $options.onDropdownClick(event);\n    }\n  }, function () {\n    return [_ctx.dropdown ? (openBlock(), createElementBlock(\"button\", mergeProps({\n      key: 0,\n      ref: \"dropdownButton\",\n      type: \"button\",\n      \"class\": [_ctx.cx('dropdown'), _ctx.dropdownClass],\n      disabled: _ctx.disabled,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-expanded\": $data.overlayVisible,\n      \"aria-controls\": $options.panelId,\n      onClick: _cache[8] || (_cache[8] = function () {\n        return $options.onDropdownClick && $options.onDropdownClick.apply($options, arguments);\n      })\n    }, _ctx.ptm('dropdown')), [renderSlot(_ctx.$slots, \"dropdownicon\", {\n      \"class\": normalizeClass(_ctx.dropdownIcon)\n    }, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.dropdownIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n        \"class\": _ctx.dropdownIcon\n      }, _ctx.ptm('dropdownIcon')), null, 16, [\"class\"]))];\n    })], 16, _hoisted_4)) : createCommentVNode(\"\", true)];\n  }), createElementVNode(\"span\", mergeProps({\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenSearchResult'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.searchResultMessageText), 17), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            id: $options.panelId,\n            \"class\": [_ctx.cx('overlay'), _ctx.panelClass, _ctx.overlayClass],\n            style: _objectSpread(_objectSpread({}, _ctx.panelStyle), _ctx.overlayStyle),\n            onClick: _cache[9] || (_cache[9] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            onKeydown: _cache[10] || (_cache[10] = function () {\n              return $options.onOverlayKeyDown && $options.onOverlayKeyDown.apply($options, arguments);\n            })\n          }, _ctx.ptm('overlay')), [renderSlot(_ctx.$slots, \"header\", {\n            value: _ctx.d_value,\n            suggestions: $options.visibleOptions\n          }), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('listContainer'),\n            style: {\n              'max-height': $options.virtualScrollerDisabled ? _ctx.scrollHeight : ''\n            }\n          }, _ctx.ptm('listContainer')), [createVNode(_component_VirtualScroller, mergeProps({\n            ref: $options.virtualScrollerRef\n          }, _ctx.virtualScrollerOptions, {\n            style: {\n              height: _ctx.scrollHeight\n            },\n            items: $options.visibleOptions,\n            tabindex: -1,\n            disabled: $options.virtualScrollerDisabled,\n            pt: _ctx.ptm('virtualScroller')\n          }), createSlots({\n            content: withCtx(function (_ref) {\n              var styleClass = _ref.styleClass,\n                contentRef = _ref.contentRef,\n                items = _ref.items,\n                getItemOptions = _ref.getItemOptions,\n                contentStyle = _ref.contentStyle,\n                itemSize = _ref.itemSize;\n              return [createElementVNode(\"ul\", mergeProps({\n                ref: function ref(el) {\n                  return $options.listRef(el, contentRef);\n                },\n                id: $data.id + '_list',\n                \"class\": [_ctx.cx('list'), styleClass],\n                style: contentStyle,\n                role: \"listbox\",\n                \"aria-label\": $options.listAriaLabel\n              }, _ctx.ptm('list')), [(openBlock(true), createElementBlock(Fragment, null, renderList(items, function (option, i) {\n                return openBlock(), createElementBlock(Fragment, {\n                  key: $options.getOptionRenderKey(option, $options.getOptionIndex(i, getItemOptions))\n                }, [$options.isOptionGroup(option) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                  key: 0,\n                  id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n                  style: {\n                    height: itemSize ? itemSize + 'px' : undefined\n                  },\n                  \"class\": _ctx.cx('optionGroup'),\n                  role: \"option\",\n                  ref_for: true\n                }, _ctx.ptm('optionGroup')), [renderSlot(_ctx.$slots, \"optiongroup\", {\n                  option: option.optionGroup,\n                  index: $options.getOptionIndex(i, getItemOptions)\n                }, function () {\n                  return [createTextVNode(toDisplayString($options.getOptionGroupLabel(option.optionGroup)), 1)];\n                })], 16, _hoisted_7)) : withDirectives((openBlock(), createElementBlock(\"li\", mergeProps({\n                  key: 1,\n                  id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n                  style: {\n                    height: itemSize ? itemSize + 'px' : undefined\n                  },\n                  \"class\": _ctx.cx('option', {\n                    option: option,\n                    i: i,\n                    getItemOptions: getItemOptions\n                  }),\n                  role: \"option\",\n                  \"aria-label\": $options.getOptionLabel(option),\n                  \"aria-selected\": $options.isSelected(option),\n                  \"aria-disabled\": $options.isOptionDisabled(option),\n                  \"aria-setsize\": $options.ariaSetSize,\n                  \"aria-posinset\": $options.getAriaPosInset($options.getOptionIndex(i, getItemOptions)),\n                  onClick: function onClick($event) {\n                    return $options.onOptionSelect($event, option);\n                  },\n                  onMousemove: function onMousemove($event) {\n                    return $options.onOptionMouseMove($event, $options.getOptionIndex(i, getItemOptions));\n                  },\n                  \"data-p-selected\": $options.isSelected(option),\n                  \"data-p-focus\": $data.focusedOptionIndex === $options.getOptionIndex(i, getItemOptions),\n                  \"data-p-disabled\": $options.isOptionDisabled(option),\n                  ref_for: true\n                }, $options.getPTOptions(option, getItemOptions, i, 'option')), [renderSlot(_ctx.$slots, \"option\", {\n                  option: option,\n                  index: $options.getOptionIndex(i, getItemOptions)\n                }, function () {\n                  return [createTextVNode(toDisplayString($options.getOptionLabel(option)), 1)];\n                })], 16, _hoisted_8)), [[_directive_ripple]])], 64);\n              }), 128)), _ctx.showEmptyMessage && (!items || items && items.length === 0) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                key: 0,\n                \"class\": _ctx.cx('emptyMessage'),\n                role: \"option\"\n              }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n                return [createTextVNode(toDisplayString($options.searchResultMessageText), 1)];\n              })], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_6)];\n            }),\n            _: 2\n          }, [_ctx.$slots.loader ? {\n            name: \"loader\",\n            fn: withCtx(function (_ref2) {\n              var options = _ref2.options;\n              return [renderSlot(_ctx.$slots, \"loader\", {\n                options: options\n              })];\n            }),\n            key: \"0\"\n          } : undefined]), 1040, [\"style\", \"items\", \"disabled\", \"pt\"])], 16), renderSlot(_ctx.$slots, \"footer\", {\n            value: _ctx.d_value,\n            suggestions: $options.visibleOptions\n          }), createElementVNode(\"span\", mergeProps({\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenSelectedMessage'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.selectedMessageText), 17)], 16, _hoisted_5)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseInput","props","suggestions","type","Array","optionLabel","optionDisabled","optionGroupLabel","optionGroupChildren","scrollHeight","String","dropdown","Boolean","dropdownMode","multiple","loading","placeholder","dataKey","minLength","Number","delay","appendTo","Object","forceSelection","completeOnFocus","inputId","inputStyle","inputClass","panelStyle","panelClass","overlayStyle","overlayClass","dropdownIcon","dropdownClass","loader","loadingIcon","removeTokenIcon","chipIcon","virtualScrollerOptions","autoOptionFocus","selectOnFocus","focusOnHover","searchLocale","undefined","searchMessage","selectionMessage","emptySelectionMessage","emptySearchMessage","showEmptyMessage","tabindex","typeahead","ariaLabel","ariaLabelledby","style","AutoCompleteStyle","provide","$pcAutoComplete","$parentInstance","script","inheritAttrs","emits","inject","$pcFluid","outsideClickListener","resizeListener","scrollHandler","overlay","virtualScroller","searchTimeout","dirty","data","id","$attrs","clicked","focused","focusedOptionIndex","focusedMultipleOptionIndex","overlayVisible","searching","watch","$attrsId","newValue","UniqueComponentId","show","findFirstFocusedOptionIndex","visibleOptions","length","hide","autoUpdateModel","mounted","updated","alignOverlay","beforeUnmount","unbindOutsideClickListener","unbindResizeListener","destroy","ZIndex","clear","methods","getOptionIndex","index","fn","virtualScrollerDisabled","getOptionLabel","option","resolveFieldData","getOptionValue","getOptionRenderKey","getPTOptions","itemOptions","key","ptm","context","selected","isSelected","disabled","isOptionDisabled","isOptionGroup","optionGroup","group","getOptionGroupLabel","getOptionGroupChildren","getAriaPosInset","_this","slice","filter","isFocus","$emit","focus","$refs","focusInput","$el","_this2","_hide","_this2$$refs$focusInp","setTimeout","onFocus","event","search","target","value","scrollInView","onBlur","_this$formField$onBlu","_this$formField","formField","call","onKeyDown","preventDefault","code","onArrowDownKey","onArrowUpKey","onArrowLeftKey","onArrowRightKey","onHomeKey","onEndKey","onPageDownKey","onPageUpKey","onEnterKey","onEscapeKey","onTabKey","onBackspaceKey","onInput","_this3","clearTimeout","query","updateModel","onChange","_this4","valid","matchedValue","find","isOptionMatched","onOptionSelect","onMultipleContainerFocus","onMultipleContainerBlur","onMultipleContainerKeyDown","onArrowLeftKeyOnMultiple","onArrowRightKeyOnMultiple","onBackspaceKeyOnMultiple","onContainerClick","isDropdownClicked","contains","onDropdownClick","originalEvent","isHide","arguments","concat","_toConsumableArray","d_value","onOptionMouseMove","changeFocusedOptionIndex","onOverlayClick","OverlayEventBus","emit","onOverlayKeyDown","optionIndex","findNextOptionIndex","findFirstOptionIndex","altKey","findPrevOptionIndex","findLastOptionIndex","findLastFocusedOptionIndex","currentTarget","isEmpty","$filled","multiContainer","stopPropagation","len","setSelectionRange","shiftKey","isNotEmpty","removedValue","writeValue","removeOption","onOverlayEnter","el","set","$primevue","config","zIndex","addStyle","position","top","left","onOverlayAfterEnter","bindOutsideClickListener","bindScrollListener","bindResizeListener","onOverlayLeave","unbindScrollListener","onOverlayAfterLeave","relativePosition","minWidth","getOuterWidth","absolutePosition","_this5","isOutsideClicked","document","addEventListener","removeEventListener","_this6","ConnectedOverlayScrollHandler","container","_this7","isTouchDevice","window","isInputClicked","dropdownButton","_this$getOptionLabel","isValidOption","toLocaleLowerCase","isValidSelectedOption","isEquals","value1","value2","equals","equalityKey","_this8","optionValue","some","_this9","findIndex","_this10","findLastIndex","_this11","matchedOptionIndex","_this12","findSelectedOptionIndex","_this13","selectedIndex","source","trim","_this14","removedOption","_","i","map","_this15","$nextTick","focusedOptionId","element","findSingle","list","scrollIntoView","block","inline","scrollToIndex","flatOptions","options","_this16","reduce","result","push","forEach","o","overlayRef","listRef","contentRef","virtualScrollerRef","computed","inputValue","_typeof$1","label","hasSelectedOption","searchResultMessageText","searchMessageText","replaceAll","emptySearchMessageText","locale","selectionMessageText","emptySelectionMessageText","selectedMessageText","listAriaLabel","aria","listLabel","focusedMultipleOptionId","ariaSetSize","_this17","panelId","components","InputText","VirtualScroller","Portal","ChevronDownIcon","SpinnerIcon","Chip","directives","ripple","Ripple","openBlock","createElementBlock","mergeProps","ref","_ctx","cx","sx","onClick","_cache","$options","apply","ptmi","createBlock","_component_InputText","$formName","normalizeClass","normalizeStyle","fluid","$fluid","size","invalid","variant","autocomplete","role","$data","onKeydown","unstyled","pt","Fragment","renderList","renderSlot","$slots","removeCallback","createVNode","_component_Chip","removeIcon","removable","onRemove","$event","removeicon","withCtx","chipicon","createElementVNode","_hoisted_3","_hoisted_1","createCommentVNode","_component_SpinnerIcon","spin","toggleCallback","resolveDynamicComponent","_component_Portal","Transition","onEnter","onAfterEnter","onLeave","onAfterLeave","_objectSpread","_component_VirtualScroller","items","content","_ref","styleClass","getItemOptions","contentStyle","itemSize","height","createTextVNode","toDisplayString","withDirectives","onMousemove","_ref2","_hoisted_5"],"sources":["../../src/autocomplete/BaseAutoComplete.vue","../../src/autocomplete/AutoComplete.vue","../../src/autocomplete/AutoComplete.vue?vue&type=template&id=267c53f6&lang.js"],"sourcesContent":["<script>\nimport BaseInput from '@primevue/core/baseinput';\nimport AutoCompleteStyle from 'primevue/autocomplete/style';\n\nexport default {\n    name: 'BaseAutoComplete',\n    extends: BaseInput,\n    props: {\n        suggestions: {\n            type: Array,\n            default: null\n        },\n        optionLabel: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        dropdown: {\n            type: Boolean,\n            default: false\n        },\n        dropdownMode: {\n            type: String,\n            default: 'blank'\n        },\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        dataKey: {\n            type: String,\n            default: null\n        },\n        minLength: {\n            type: Number,\n            default: 1\n        },\n        delay: {\n            type: Number,\n            default: 300\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        forceSelection: {\n            type: Boolean,\n            default: false\n        },\n        completeOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        panelStyle: {\n            type: Object,\n            default: null\n        },\n        panelClass: {\n            type: [String, Object],\n            default: null\n        },\n        overlayStyle: {\n            type: Object,\n            default: null\n        },\n        overlayClass: {\n            type: [String, Object],\n            default: null\n        },\n        dropdownIcon: {\n            type: String,\n            default: null\n        },\n        dropdownClass: {\n            type: [String, Object],\n            default: null\n        },\n        loader: {\n            type: String,\n            default: null\n        },\n        loadingIcon: {\n            type: String,\n            default: null\n        },\n        removeTokenIcon: {\n            type: String,\n            default: null\n        },\n        chipIcon: {\n            type: String,\n            default: null\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: false\n        },\n        selectOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        searchLocale: {\n            type: String,\n            default: undefined\n        },\n        searchMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySearchMessage: {\n            type: String,\n            default: null\n        },\n        showEmptyMessage: {\n            type: Boolean,\n            default: true\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        typeahead: {\n            type: Boolean,\n            default: true\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: AutoCompleteStyle,\n    provide() {\n        return {\n            $pcAutoComplete: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <InputText\n            v-if=\"!multiple\"\n            ref=\"focusInput\"\n            :id=\"inputId\"\n            type=\"text\"\n            :name=\"$formName\"\n            :class=\"[cx('pcInputText'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"inputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :fluid=\"$fluid\"\n            :disabled=\"disabled\"\n            :size=\"size\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            aria-autocomplete=\"list\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"panelId\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onInput\"\n            @change=\"onChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcInputText')\"\n        />\n        <ul\n            v-if=\"multiple\"\n            ref=\"multiContainer\"\n            :class=\"cx('inputMultiple')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-activedescendant=\"focused ? focusedMultipleOptionId : undefined\"\n            @focus=\"onMultipleContainerFocus\"\n            @blur=\"onMultipleContainerBlur\"\n            @keydown=\"onMultipleContainerKeyDown\"\n            v-bind=\"ptm('inputMultiple')\"\n        >\n            <li\n                v-for=\"(option, i) of d_value\"\n                :key=\"`${i}_${getOptionLabel(option)}`\"\n                :id=\"id + '_multiple_option_' + i\"\n                :class=\"cx('chipItem', { i })\"\n                role=\"option\"\n                :aria-label=\"getOptionLabel(option)\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"d_value.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :value=\"option\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" v-bind=\"ptm('pcChip')\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"getOptionLabel(option)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputChip')\" role=\"option\" v-bind=\"ptm('inputChip')\">\n                <input\n                    ref=\"focusInput\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :style=\"inputStyle\"\n                    :class=\"inputClass\"\n                    :placeholder=\"placeholder\"\n                    :tabindex=\"!disabled ? tabindex : -1\"\n                    :disabled=\"disabled\"\n                    autocomplete=\"off\"\n                    role=\"combobox\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    aria-haspopup=\"listbox\"\n                    aria-autocomplete=\"list\"\n                    :aria-expanded=\"overlayVisible\"\n                    :aria-controls=\"id + '_list'\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus\"\n                    @blur=\"onBlur\"\n                    @keydown=\"onKeyDown\"\n                    @input=\"onInput\"\n                    @change=\"onChange\"\n                    v-bind=\"ptm('input')\"\n                />\n            </li>\n        </ul>\n        <slot v-if=\"searching || loading\" :class=\"cx('loader')\" :name=\"$slots.loader ? 'loader' : 'loadingicon'\">\n            <i v-if=\"loader || loadingIcon\" :class=\"['pi-spin', cx('loader'), loader, loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n            <SpinnerIcon v-else :class=\"cx('loader')\" spin aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n        </slot>\n        <slot :name=\"$slots.dropdown ? 'dropdown' : 'dropdownbutton'\" :toggleCallback=\"(event) => onDropdownClick(event)\">\n            <button\n                v-if=\"dropdown\"\n                ref=\"dropdownButton\"\n                type=\"button\"\n                :class=\"[cx('dropdown'), dropdownClass]\"\n                :disabled=\"disabled\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"panelId\"\n                @click=\"onDropdownClick\"\n                v-bind=\"ptm('dropdown')\"\n            >\n                <slot name=\"dropdownicon\" :class=\"dropdownIcon\">\n                    <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"dropdownIcon\" v-bind=\"ptm('dropdownIcon')\" />\n                </slot>\n            </button>\n        </slot>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSearchResult')\" :data-p-hidden-accessible=\"true\">\n            {{ searchResultMessageText }}\n        </span>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :id=\"panelId\" :class=\"[cx('overlay'), panelClass, overlayClass]\" :style=\"{ ...panelStyle, ...overlayStyle }\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" v-bind=\"ptm('overlay')\">\n                    <slot name=\"header\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :style=\"{ height: scrollHeight }\" :items=\"visibleOptions\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focus=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                            v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                        >\n                                            <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"showEmptyMessage && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ searchResultMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { absolutePosition, addStyle, findSingle, focus, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isEmpty, isNotEmpty, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseAutoComplete from './BaseAutoComplete.vue';\n\nexport default {\n    name: 'AutoComplete',\n    extends: BaseAutoComplete,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    dirty: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            focusedMultipleOptionIndex: -1,\n            overlayVisible: false,\n            searching: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        suggestions() {\n            if (this.searching) {\n                this.show();\n                this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.searching = false;\n                !this.showEmptyMessage && this.visibleOptions.length === 0 && this.hide();\n            }\n\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    updated() {\n        if (this.overlayVisible) {\n            this.alignOverlay();\n        }\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return option; // TODO: The 'optionValue' properties can be added.\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.dirty = true;\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n            isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.dirty = isFocus;\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n\n                isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput?.$el);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            if (!this.dirty && this.completeOnFocus) {\n                this.search(event, event.target.value, 'focus');\n            }\n\n            this.dirty = true;\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.dirty = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onInput(event) {\n            if (this.typeahead) {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                let query = event.target.value;\n\n                if (!this.multiple) {\n                    this.updateModel(event, query);\n                }\n\n                if (query.length === 0) {\n                    this.hide();\n                    this.$emit('clear');\n                } else {\n                    if (query.length >= this.minLength) {\n                        this.focusedOptionIndex = -1;\n\n                        this.searchTimeout = setTimeout(() => {\n                            this.search(event, query, 'input');\n                        }, this.delay);\n                    } else {\n                        this.hide();\n                    }\n                }\n            }\n        },\n        onChange(event) {\n            if (this.forceSelection) {\n                let valid = false;\n\n                // when forceSelection is on, prevent called twice onOptionSelect()\n                if (this.visibleOptions && !this.multiple) {\n                    let value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput.$el.value;\n                    const matchedValue = this.visibleOptions.find((option) => this.isOptionMatched(option, value || ''));\n\n                    if (matchedValue !== undefined) {\n                        valid = true;\n                        !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n                    }\n                }\n\n                if (!valid) {\n                    if (this.multiple) this.$refs.focusInput.value = '';\n                    else this.$refs.focusInput.$el.value = '';\n                    this.$emit('clear');\n                    !this.multiple && this.updateModel(event, null);\n                }\n            }\n        },\n        onMultipleContainerFocus() {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n        },\n        onMultipleContainerBlur() {\n            this.focusedMultipleOptionIndex = -1;\n            this.focused = false;\n        },\n        onMultipleContainerKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOnMultiple(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOnMultiple(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOnMultiple(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onContainerClick(event) {\n            this.clicked = true;\n\n            if (this.disabled || this.searching || this.loading || this.isDropdownClicked(event)) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            }\n        },\n        onDropdownClick(event) {\n            let query = undefined;\n\n            if (this.overlayVisible) {\n                this.hide(true);\n            } else {\n                let target = this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el;\n\n                focus(target);\n                query = target.value;\n\n                if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');\n                else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n            }\n\n            this.$emit('dropdown-click', { originalEvent: event, query });\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            if (this.multiple) {\n                this.$refs.focusInput.value = '';\n\n                if (!this.isSelected(option)) {\n                    this.updateModel(event, [...(this.d_value || []), value]);\n                }\n            } else {\n                this.updateModel(event, value);\n            }\n\n            this.$emit('item-select', { originalEvent: event, value: option });\n            this.$emit('option-select', { originalEvent: event, value: option });\n\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            if (event.altKey) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const target = event.currentTarget;\n\n            this.focusedOptionIndex = -1;\n\n            if (this.multiple) {\n                if (isEmpty(target.value) && this.$filled) {\n                    focus(this.$refs.multiContainer);\n                    this.focusedMultipleOptionIndex = this.d_value.length;\n                } else {\n                    event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n                }\n            }\n        },\n        onArrowRightKey(event) {\n            this.focusedOptionIndex = -1;\n\n            this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n        },\n        onHomeKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.typeahead) {\n                if (this.multiple) {\n                    this.updateModel(event, [...(this.d_value || []), event.target.value]);\n                    this.$refs.focusInput.value = '';\n                }\n            } else {\n                if (!this.overlayVisible) {\n                    this.focusedOptionIndex = -1; // reset\n                    this.onArrowDownKey(event);\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.hide();\n                }\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n\n            this.overlayVisible && this.hide();\n        },\n        onBackspaceKey(event) {\n            if (this.multiple) {\n                if (isNotEmpty(this.d_value) && !this.$refs.focusInput.value) {\n                    const removedValue = this.d_value[this.d_value.length - 1];\n                    const newValue = this.d_value.slice(0, -1);\n\n                    this.writeValue(newValue, event);\n                    this.$emit('item-unselect', { originalEvent: event, value: removedValue });\n                    this.$emit('option-unselect', { originalEvent: event, value: removedValue });\n                }\n\n                event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n            }\n        },\n        onArrowLeftKeyOnMultiple() {\n            this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n        },\n        onArrowRightKeyOnMultiple() {\n            this.focusedMultipleOptionIndex++;\n\n            if (this.focusedMultipleOptionIndex > this.d_value.length - 1) {\n                this.focusedMultipleOptionIndex = -1;\n                focus(this.$refs.focusInput);\n            }\n        },\n        onBackspaceKeyOnMultiple(event) {\n            if (this.focusedMultipleOptionIndex !== -1) {\n                this.removeOption(event, this.focusedMultipleOptionIndex);\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            let target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, target);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n                absolutePosition(this.overlay, target);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n        },\n        isInputClicked(event) {\n            if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);\n            else return event.target === this.$refs.focusInput.$el;\n        },\n        isDropdownClicked(event) {\n            return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n        },\n        isOptionMatched(option, value) {\n            return this.isValidOption(option) && this.getOptionLabel(option)?.toLocaleLowerCase(this.searchLocale) === value.toLocaleLowerCase(this.searchLocale);\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return this.multiple ? (this.d_value || []).some((value) => this.isEquals(value, optionValue)) : this.isEquals(this.d_value, this.getOptionValue(option));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        search(event, query, source) {\n            //allow empty string but not undefined or null\n            if (query === undefined || query === null) {\n                return;\n            }\n\n            //do not search blank values on input change\n            if (source === 'input' && query.trim().length === 0) {\n                return;\n            }\n\n            this.searching = true;\n            this.$emit('complete', { originalEvent: event, query });\n        },\n        removeOption(event, index) {\n            const removedOption = this.d_value[index];\n            const value = this.d_value.filter((_, i) => i !== index).map((option) => this.getOptionValue(option));\n\n            this.updateModel(event, value);\n            this.$emit('item-unselect', { originalEvent: event, value: removedOption });\n            this.$emit('option-unselect', { originalEvent: event, value: removedOption });\n            this.dirty = true;\n            focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n        },\n        inputValue() {\n            if (this.$filled) {\n                if (typeof this.d_value === 'object') {\n                    const label = this.getOptionLabel(this.d_value);\n\n                    return label != null ? label : this.d_value;\n                } else {\n                    return this.d_value;\n                }\n            } else {\n                return '';\n            }\n        },\n        // @deprecated use $filled instead.\n        hasSelectedOption() {\n            return this.$filled;\n        },\n        equalityKey() {\n            // @todo: The 'optionValue' properties can be added.\n            return this.dataKey;\n        },\n        searchResultMessageText() {\n            return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n        },\n        searchMessageText() {\n            return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptySearchMessageText() {\n            return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        focusedMultipleOptionId() {\n            return this.focusedMultipleOptionIndex !== -1 ? `${this.id}_multiple_option_${this.focusedMultipleOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        panelId() {\n            return this.id + '_panel';\n        }\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        ChevronDownIcon,\n        SpinnerIcon,\n        Chip\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <InputText\n            v-if=\"!multiple\"\n            ref=\"focusInput\"\n            :id=\"inputId\"\n            type=\"text\"\n            :name=\"$formName\"\n            :class=\"[cx('pcInputText'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"inputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :fluid=\"$fluid\"\n            :disabled=\"disabled\"\n            :size=\"size\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            aria-autocomplete=\"list\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"panelId\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onInput\"\n            @change=\"onChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcInputText')\"\n        />\n        <ul\n            v-if=\"multiple\"\n            ref=\"multiContainer\"\n            :class=\"cx('inputMultiple')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-activedescendant=\"focused ? focusedMultipleOptionId : undefined\"\n            @focus=\"onMultipleContainerFocus\"\n            @blur=\"onMultipleContainerBlur\"\n            @keydown=\"onMultipleContainerKeyDown\"\n            v-bind=\"ptm('inputMultiple')\"\n        >\n            <li\n                v-for=\"(option, i) of d_value\"\n                :key=\"`${i}_${getOptionLabel(option)}`\"\n                :id=\"id + '_multiple_option_' + i\"\n                :class=\"cx('chipItem', { i })\"\n                role=\"option\"\n                :aria-label=\"getOptionLabel(option)\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"d_value.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :value=\"option\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" v-bind=\"ptm('pcChip')\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"getOptionLabel(option)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputChip')\" role=\"option\" v-bind=\"ptm('inputChip')\">\n                <input\n                    ref=\"focusInput\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :style=\"inputStyle\"\n                    :class=\"inputClass\"\n                    :placeholder=\"placeholder\"\n                    :tabindex=\"!disabled ? tabindex : -1\"\n                    :disabled=\"disabled\"\n                    autocomplete=\"off\"\n                    role=\"combobox\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    aria-haspopup=\"listbox\"\n                    aria-autocomplete=\"list\"\n                    :aria-expanded=\"overlayVisible\"\n                    :aria-controls=\"id + '_list'\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus\"\n                    @blur=\"onBlur\"\n                    @keydown=\"onKeyDown\"\n                    @input=\"onInput\"\n                    @change=\"onChange\"\n                    v-bind=\"ptm('input')\"\n                />\n            </li>\n        </ul>\n        <slot v-if=\"searching || loading\" :class=\"cx('loader')\" :name=\"$slots.loader ? 'loader' : 'loadingicon'\">\n            <i v-if=\"loader || loadingIcon\" :class=\"['pi-spin', cx('loader'), loader, loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n            <SpinnerIcon v-else :class=\"cx('loader')\" spin aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n        </slot>\n        <slot :name=\"$slots.dropdown ? 'dropdown' : 'dropdownbutton'\" :toggleCallback=\"(event) => onDropdownClick(event)\">\n            <button\n                v-if=\"dropdown\"\n                ref=\"dropdownButton\"\n                type=\"button\"\n                :class=\"[cx('dropdown'), dropdownClass]\"\n                :disabled=\"disabled\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"panelId\"\n                @click=\"onDropdownClick\"\n                v-bind=\"ptm('dropdown')\"\n            >\n                <slot name=\"dropdownicon\" :class=\"dropdownIcon\">\n                    <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"dropdownIcon\" v-bind=\"ptm('dropdownIcon')\" />\n                </slot>\n            </button>\n        </slot>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSearchResult')\" :data-p-hidden-accessible=\"true\">\n            {{ searchResultMessageText }}\n        </span>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :id=\"panelId\" :class=\"[cx('overlay'), panelClass, overlayClass]\" :style=\"{ ...panelStyle, ...overlayStyle }\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" v-bind=\"ptm('overlay')\">\n                    <slot name=\"header\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :style=\"{ height: scrollHeight }\" :items=\"visibleOptions\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focus=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                            v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                        >\n                                            <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"showEmptyMessage && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ searchResultMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { absolutePosition, addStyle, findSingle, focus, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isEmpty, isNotEmpty, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseAutoComplete from './BaseAutoComplete.vue';\n\nexport default {\n    name: 'AutoComplete',\n    extends: BaseAutoComplete,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    dirty: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            focusedMultipleOptionIndex: -1,\n            overlayVisible: false,\n            searching: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        suggestions() {\n            if (this.searching) {\n                this.show();\n                this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.searching = false;\n                !this.showEmptyMessage && this.visibleOptions.length === 0 && this.hide();\n            }\n\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    updated() {\n        if (this.overlayVisible) {\n            this.alignOverlay();\n        }\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return option; // TODO: The 'optionValue' properties can be added.\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.dirty = true;\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n            isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.dirty = isFocus;\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n\n                isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput?.$el);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            if (!this.dirty && this.completeOnFocus) {\n                this.search(event, event.target.value, 'focus');\n            }\n\n            this.dirty = true;\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.dirty = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onInput(event) {\n            if (this.typeahead) {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                let query = event.target.value;\n\n                if (!this.multiple) {\n                    this.updateModel(event, query);\n                }\n\n                if (query.length === 0) {\n                    this.hide();\n                    this.$emit('clear');\n                } else {\n                    if (query.length >= this.minLength) {\n                        this.focusedOptionIndex = -1;\n\n                        this.searchTimeout = setTimeout(() => {\n                            this.search(event, query, 'input');\n                        }, this.delay);\n                    } else {\n                        this.hide();\n                    }\n                }\n            }\n        },\n        onChange(event) {\n            if (this.forceSelection) {\n                let valid = false;\n\n                // when forceSelection is on, prevent called twice onOptionSelect()\n                if (this.visibleOptions && !this.multiple) {\n                    let value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput.$el.value;\n                    const matchedValue = this.visibleOptions.find((option) => this.isOptionMatched(option, value || ''));\n\n                    if (matchedValue !== undefined) {\n                        valid = true;\n                        !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n                    }\n                }\n\n                if (!valid) {\n                    if (this.multiple) this.$refs.focusInput.value = '';\n                    else this.$refs.focusInput.$el.value = '';\n                    this.$emit('clear');\n                    !this.multiple && this.updateModel(event, null);\n                }\n            }\n        },\n        onMultipleContainerFocus() {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n        },\n        onMultipleContainerBlur() {\n            this.focusedMultipleOptionIndex = -1;\n            this.focused = false;\n        },\n        onMultipleContainerKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOnMultiple(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOnMultiple(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOnMultiple(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onContainerClick(event) {\n            this.clicked = true;\n\n            if (this.disabled || this.searching || this.loading || this.isDropdownClicked(event)) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            }\n        },\n        onDropdownClick(event) {\n            let query = undefined;\n\n            if (this.overlayVisible) {\n                this.hide(true);\n            } else {\n                let target = this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el;\n\n                focus(target);\n                query = target.value;\n\n                if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');\n                else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n            }\n\n            this.$emit('dropdown-click', { originalEvent: event, query });\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            if (this.multiple) {\n                this.$refs.focusInput.value = '';\n\n                if (!this.isSelected(option)) {\n                    this.updateModel(event, [...(this.d_value || []), value]);\n                }\n            } else {\n                this.updateModel(event, value);\n            }\n\n            this.$emit('item-select', { originalEvent: event, value: option });\n            this.$emit('option-select', { originalEvent: event, value: option });\n\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            if (event.altKey) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const target = event.currentTarget;\n\n            this.focusedOptionIndex = -1;\n\n            if (this.multiple) {\n                if (isEmpty(target.value) && this.$filled) {\n                    focus(this.$refs.multiContainer);\n                    this.focusedMultipleOptionIndex = this.d_value.length;\n                } else {\n                    event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n                }\n            }\n        },\n        onArrowRightKey(event) {\n            this.focusedOptionIndex = -1;\n\n            this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n        },\n        onHomeKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.typeahead) {\n                if (this.multiple) {\n                    this.updateModel(event, [...(this.d_value || []), event.target.value]);\n                    this.$refs.focusInput.value = '';\n                }\n            } else {\n                if (!this.overlayVisible) {\n                    this.focusedOptionIndex = -1; // reset\n                    this.onArrowDownKey(event);\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.hide();\n                }\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n\n            this.overlayVisible && this.hide();\n        },\n        onBackspaceKey(event) {\n            if (this.multiple) {\n                if (isNotEmpty(this.d_value) && !this.$refs.focusInput.value) {\n                    const removedValue = this.d_value[this.d_value.length - 1];\n                    const newValue = this.d_value.slice(0, -1);\n\n                    this.writeValue(newValue, event);\n                    this.$emit('item-unselect', { originalEvent: event, value: removedValue });\n                    this.$emit('option-unselect', { originalEvent: event, value: removedValue });\n                }\n\n                event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n            }\n        },\n        onArrowLeftKeyOnMultiple() {\n            this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n        },\n        onArrowRightKeyOnMultiple() {\n            this.focusedMultipleOptionIndex++;\n\n            if (this.focusedMultipleOptionIndex > this.d_value.length - 1) {\n                this.focusedMultipleOptionIndex = -1;\n                focus(this.$refs.focusInput);\n            }\n        },\n        onBackspaceKeyOnMultiple(event) {\n            if (this.focusedMultipleOptionIndex !== -1) {\n                this.removeOption(event, this.focusedMultipleOptionIndex);\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            let target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, target);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n                absolutePosition(this.overlay, target);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n        },\n        isInputClicked(event) {\n            if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);\n            else return event.target === this.$refs.focusInput.$el;\n        },\n        isDropdownClicked(event) {\n            return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n        },\n        isOptionMatched(option, value) {\n            return this.isValidOption(option) && this.getOptionLabel(option)?.toLocaleLowerCase(this.searchLocale) === value.toLocaleLowerCase(this.searchLocale);\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return this.multiple ? (this.d_value || []).some((value) => this.isEquals(value, optionValue)) : this.isEquals(this.d_value, this.getOptionValue(option));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        search(event, query, source) {\n            //allow empty string but not undefined or null\n            if (query === undefined || query === null) {\n                return;\n            }\n\n            //do not search blank values on input change\n            if (source === 'input' && query.trim().length === 0) {\n                return;\n            }\n\n            this.searching = true;\n            this.$emit('complete', { originalEvent: event, query });\n        },\n        removeOption(event, index) {\n            const removedOption = this.d_value[index];\n            const value = this.d_value.filter((_, i) => i !== index).map((option) => this.getOptionValue(option));\n\n            this.updateModel(event, value);\n            this.$emit('item-unselect', { originalEvent: event, value: removedOption });\n            this.$emit('option-unselect', { originalEvent: event, value: removedOption });\n            this.dirty = true;\n            focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n        },\n        inputValue() {\n            if (this.$filled) {\n                if (typeof this.d_value === 'object') {\n                    const label = this.getOptionLabel(this.d_value);\n\n                    return label != null ? label : this.d_value;\n                } else {\n                    return this.d_value;\n                }\n            } else {\n                return '';\n            }\n        },\n        // @deprecated use $filled instead.\n        hasSelectedOption() {\n            return this.$filled;\n        },\n        equalityKey() {\n            // @todo: The 'optionValue' properties can be added.\n            return this.dataKey;\n        },\n        searchResultMessageText() {\n            return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n        },\n        searchMessageText() {\n            return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptySearchMessageText() {\n            return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        focusedMultipleOptionId() {\n            return this.focusedMultipleOptionIndex !== -1 ? `${this.id}_multiple_option_${this.focusedMultipleOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        panelId() {\n            return this.id + '_panel';\n        }\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        ChevronDownIcon,\n        SpinnerIcon,\n        Chip\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}