{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { getNextElementSibling, getOuterWidth, getPreviousElementSibling, getIndex, getAttribute, isClickable, findSingle, focus, find, clearSelection, getOffset, addStyle, isRTL, setAttribute } from '@primeuix/utils/dom';\nimport { resolveFieldData, equals, localeComparator, sort } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport { getVNodeProp, HelperSet } from '@primevue/core/utils';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Paginator from 'primevue/paginator';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TreeTableStyle from 'primevue/treetable/style';\nimport { mergeProps, openBlock, createElementBlock, createBlock, resolveDynamicComponent, createCommentVNode, toDisplayString, resolveComponent, createElementVNode, normalizeProps, resolveDirective, withDirectives, Fragment, normalizeClass, withCtx, createTextVNode, renderList, renderSlot, createSlots } from 'vue';\nimport SortAltIcon from '@primevue/icons/sortalt';\nimport SortAmountDownIcon from '@primevue/icons/sortamountdown';\nimport SortAmountUpAltIcon from '@primevue/icons/sortamountupalt';\nimport Badge from 'primevue/badge';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\nvar script$5 = {\n  name: 'BaseTreeTable',\n  \"extends\": BaseComponent,\n  props: {\n    value: {\n      type: null,\n      \"default\": null\n    },\n    dataKey: {\n      type: [String, Function],\n      \"default\": 'key'\n    },\n    expandedKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenu: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenuSelection: {\n      type: Object,\n      \"default\": null\n    },\n    rows: {\n      type: Number,\n      \"default\": 0\n    },\n    first: {\n      type: Number,\n      \"default\": 0\n    },\n    totalRecords: {\n      type: Number,\n      \"default\": 0\n    },\n    paginator: {\n      type: Boolean,\n      \"default\": false\n    },\n    paginatorPosition: {\n      type: String,\n      \"default\": 'bottom'\n    },\n    alwaysShowPaginator: {\n      type: Boolean,\n      \"default\": true\n    },\n    paginatorTemplate: {\n      type: String,\n      \"default\": 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown'\n    },\n    pageLinkSize: {\n      type: Number,\n      \"default\": 5\n    },\n    rowsPerPageOptions: {\n      type: Array,\n      \"default\": null\n    },\n    currentPageReportTemplate: {\n      type: String,\n      \"default\": '({currentPage} of {totalPages})'\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    },\n    rowHover: {\n      type: Boolean,\n      \"default\": false\n    },\n    autoLayout: {\n      type: Boolean,\n      \"default\": false\n    },\n    sortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortOrder: {\n      type: Number,\n      \"default\": null\n    },\n    defaultSortOrder: {\n      type: Number,\n      \"default\": 1\n    },\n    multiSortMeta: {\n      type: Array,\n      \"default\": null\n    },\n    sortMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    removableSort: {\n      type: Boolean,\n      \"default\": false\n    },\n    filters: {\n      type: Object,\n      \"default\": null\n    },\n    filterMode: {\n      type: String,\n      \"default\": 'lenient'\n    },\n    filterLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    resizableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    columnResizeMode: {\n      type: String,\n      \"default\": 'fit'\n    },\n    indentation: {\n      type: Number,\n      \"default\": 1\n    },\n    showGridlines: {\n      type: Boolean,\n      \"default\": false\n    },\n    scrollable: {\n      type: Boolean,\n      \"default\": false\n    },\n    scrollHeight: {\n      type: String,\n      \"default\": null\n    },\n    size: {\n      type: String,\n      \"default\": null\n    },\n    tableStyle: {\n      type: null,\n      \"default\": null\n    },\n    tableClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    tableProps: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  style: TreeTableStyle,\n  provide: function provide() {\n    return {\n      $pcTreeTable: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script$4 = {\n  name: 'FooterCell',\n  hostName: 'TreeTable',\n  \"extends\": BaseComponent,\n  props: {\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      styleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  methods: {\n    columnProp: function columnProp(prop) {\n      return getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          frozen: this.columnProp('frozen'),\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var pos = 0;\n          var next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n          }\n          this.styleObject.insetInlineEnd = pos + 'px';\n        } else {\n          var _pos = 0;\n          var prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            _pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n          }\n          this.styleObject.insetInlineStart = _pos + 'px';\n        }\n      }\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.columnProp('footerClass'), this.columnProp('class'), this.cx('footerCell')];\n    },\n    containerStyle: function containerStyle() {\n      var bodyStyle = this.columnProp('footerStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n    }\n  }\n};\nfunction _typeof$5(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$5 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$5(o);\n}\nfunction ownKeys$5(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$5(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) {\n      _defineProperty$5(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$5(e, r, t) {\n  return (r = _toPropertyKey$5(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey$5(t) {\n  var i = _toPrimitive$5(t, \"string\");\n  return \"symbol\" == _typeof$5(i) ? i : i + \"\";\n}\nfunction _toPrimitive$5(t, r) {\n  if (\"object\" != _typeof$5(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof$5(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar _hoisted_1$4 = [\"data-p-frozen-column\"];\nfunction render$4(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"td\", mergeProps({\n    style: $options.containerStyle,\n    \"class\": $options.containerClass,\n    role: \"cell\"\n  }, _objectSpread$5(_objectSpread$5({}, $options.getColumnPT('root')), $options.getColumnPT('footerCell')), {\n    \"data-p-frozen-column\": $options.columnProp('frozen')\n  }), [$props.column.children && $props.column.children.footer ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.footer), {\n    key: 0,\n    column: $props.column\n  }, null, 8, [\"column\"])) : createCommentVNode(\"\", true), $options.columnProp('footer') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('columnFooter')\n  }, $options.getColumnPT('columnFooter')), toDisplayString($options.columnProp('footer')), 17)) : createCommentVNode(\"\", true)], 16, _hoisted_1$4);\n}\nscript$4.render = render$4;\nvar script$3 = {\n  name: 'HeaderCell',\n  hostName: 'TreeTable',\n  \"extends\": BaseComponent,\n  emits: ['column-click', 'column-resizestart'],\n  props: {\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    resizableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    sortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortOrder: {\n      type: Number,\n      \"default\": null\n    },\n    multiSortMeta: {\n      type: Array,\n      \"default\": null\n    },\n    sortMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      styleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  methods: {\n    columnProp: function columnProp(prop) {\n      return getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          sorted: this.isColumnSorted(),\n          frozen: this.$parentInstance.scrollable && this.columnProp('frozen'),\n          resizable: this.resizableColumns,\n          scrollable: this.$parentInstance.scrollable,\n          showGridlines: this.$parentInstance.showGridlines,\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var pos = 0;\n          var next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n          }\n          this.styleObject.insetInlineEnd = pos + 'px';\n        } else {\n          var _pos = 0;\n          var prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            _pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n          }\n          this.styleObject.insetInlineStart = _pos + 'px';\n        }\n        var filterRow = this.$el.parentElement.nextElementSibling;\n        if (filterRow) {\n          var index = getIndex(this.$el);\n          filterRow.children[index].style.left = this.styleObject.left;\n          filterRow.children[index].style.right = this.styleObject.right;\n        }\n      }\n    },\n    onClick: function onClick(event) {\n      this.$emit('column-click', {\n        originalEvent: event,\n        column: this.column\n      });\n    },\n    onKeyDown: function onKeyDown(event) {\n      if ((event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && event.currentTarget.nodeName === 'TH' && getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n        this.$emit('column-click', {\n          originalEvent: event,\n          column: this.column\n        });\n        event.preventDefault();\n      }\n    },\n    onResizeStart: function onResizeStart(event) {\n      this.$emit('column-resizestart', event);\n    },\n    getMultiSortMetaIndex: function getMultiSortMetaIndex() {\n      var index = -1;\n      for (var i = 0; i < this.multiSortMeta.length; i++) {\n        var meta = this.multiSortMeta[i];\n        if (meta.field === this.columnProp('field') || meta.field === this.columnProp('sortField')) {\n          index = i;\n          break;\n        }\n      }\n      return index;\n    },\n    isMultiSorted: function isMultiSorted() {\n      return this.columnProp('sortable') && this.getMultiSortMetaIndex() > -1;\n    },\n    isColumnSorted: function isColumnSorted() {\n      return this.sortMode === 'single' ? this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField')) : this.isMultiSorted();\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.columnProp('headerClass'), this.columnProp('class'), this.cx('headerCell')];\n    },\n    containerStyle: function containerStyle() {\n      var headerStyle = this.columnProp('headerStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, headerStyle, this.styleObject] : [columnStyle, headerStyle];\n    },\n    sortState: function sortState() {\n      var sorted = false;\n      var sortOrder = null;\n      if (this.sortMode === 'single') {\n        sorted = this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField'));\n        sortOrder = sorted ? this.sortOrder : 0;\n      } else if (this.sortMode === 'multiple') {\n        var metaIndex = this.getMultiSortMetaIndex();\n        if (metaIndex > -1) {\n          sorted = true;\n          sortOrder = this.multiSortMeta[metaIndex].order;\n        }\n      }\n      return {\n        sorted: sorted,\n        sortOrder: sortOrder\n      };\n    },\n    sortableColumnIcon: function sortableColumnIcon() {\n      var _this$sortState = this.sortState,\n        sorted = _this$sortState.sorted,\n        sortOrder = _this$sortState.sortOrder;\n      if (!sorted) return SortAltIcon;else if (sorted && sortOrder > 0) return SortAmountUpAltIcon;else if (sorted && sortOrder < 0) return SortAmountDownIcon;\n      return null;\n    },\n    ariaSort: function ariaSort() {\n      if (this.columnProp('sortable')) {\n        var _this$sortState2 = this.sortState,\n          sorted = _this$sortState2.sorted,\n          sortOrder = _this$sortState2.sortOrder;\n        if (sorted && sortOrder < 0) return 'descending';else if (sorted && sortOrder > 0) return 'ascending';else return 'none';\n      } else {\n        return null;\n      }\n    }\n  },\n  components: {\n    Badge: Badge,\n    SortAltIcon: SortAltIcon,\n    SortAmountUpAltIcon: SortAmountUpAltIcon,\n    SortAmountDownIcon: SortAmountDownIcon\n  }\n};\nfunction _typeof$4(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$4 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$4(o);\n}\nfunction ownKeys$4(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$4(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) {\n      _defineProperty$4(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$4(e, r, t) {\n  return (r = _toPropertyKey$4(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey$4(t) {\n  var i = _toPrimitive$4(t, \"string\");\n  return \"symbol\" == _typeof$4(i) ? i : i + \"\";\n}\nfunction _toPrimitive$4(t, r) {\n  if (\"object\" != _typeof$4(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof$4(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar _hoisted_1$3 = [\"tabindex\", \"aria-sort\", \"data-p-sortable-column\", \"data-p-resizable-column\", \"data-p-sorted\", \"data-p-frozen-column\"];\nfunction render$3(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Badge = resolveComponent(\"Badge\");\n  return openBlock(), createElementBlock(\"th\", mergeProps({\n    \"class\": $options.containerClass,\n    style: [$options.containerStyle],\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    tabindex: $options.columnProp('sortable') ? '0' : null,\n    \"aria-sort\": $options.ariaSort,\n    role: \"columnheader\"\n  }, _objectSpread$4(_objectSpread$4({}, $options.getColumnPT('root')), $options.getColumnPT('headerCell')), {\n    \"data-p-sortable-column\": $options.columnProp('sortable'),\n    \"data-p-resizable-column\": $props.resizableColumns,\n    \"data-p-sorted\": $options.isColumnSorted(),\n    \"data-p-frozen-column\": $options.columnProp('frozen')\n  }), [$props.resizableColumns && !$options.columnProp('frozen') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('columnResizer'),\n    onMousedown: _cache[0] || (_cache[0] = function () {\n      return $options.onResizeStart && $options.onResizeStart.apply($options, arguments);\n    })\n  }, $options.getColumnPT('columnResizer')), null, 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('columnHeaderContent')\n  }, $options.getColumnPT('columnHeaderContent')), [$props.column.children && $props.column.children.header ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.header), {\n    key: 0,\n    column: $props.column\n  }, null, 8, [\"column\"])) : createCommentVNode(\"\", true), $options.columnProp('header') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('columnTitle')\n  }, $options.getColumnPT('columnTitle')), toDisplayString($options.columnProp('header')), 17)) : createCommentVNode(\"\", true), $options.columnProp('sortable') ? (openBlock(), createElementBlock(\"span\", normalizeProps(mergeProps({\n    key: 2\n  }, $options.getColumnPT('sort'))), [(openBlock(), createBlock(resolveDynamicComponent($props.column.children && $props.column.children.sorticon || $options.sortableColumnIcon), mergeProps({\n    sorted: $options.sortState.sorted,\n    sortOrder: $options.sortState.sortOrder,\n    \"class\": _ctx.cx('sortIcon')\n  }, $options.getColumnPT('sortIcon')), null, 16, [\"sorted\", \"sortOrder\", \"class\"]))], 16)) : createCommentVNode(\"\", true), $options.isMultiSorted() ? (openBlock(), createBlock(_component_Badge, mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('pcSortBadge')\n  }, $options.getColumnPT('pcSortBadge'), {\n    value: $options.getMultiSortMetaIndex() + 1,\n    size: \"small\"\n  }), null, 16, [\"class\", \"value\"])) : createCommentVNode(\"\", true)], 16)], 16, _hoisted_1$3);\n}\nscript$3.render = render$3;\nvar script$2 = {\n  name: 'BodyCell',\n  hostName: 'TreeTable',\n  \"extends\": BaseComponent,\n  emits: ['node-toggle', 'checkbox-toggle'],\n  props: {\n    node: {\n      type: Object,\n      \"default\": null\n    },\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    level: {\n      type: Number,\n      \"default\": 0\n    },\n    indentation: {\n      type: Number,\n      \"default\": 1\n    },\n    leaf: {\n      type: Boolean,\n      \"default\": false\n    },\n    expanded: {\n      type: Boolean,\n      \"default\": false\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    checked: {\n      type: Boolean,\n      \"default\": false\n    },\n    partialChecked: {\n      type: Boolean,\n      \"default\": false\n    },\n    templates: {\n      type: Object,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    }\n  },\n  data: function data() {\n    return {\n      styleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  methods: {\n    toggle: function toggle() {\n      this.$emit('node-toggle', this.node);\n    },\n    columnProp: function columnProp(prop) {\n      return getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n          selected: this.$parent.selected,\n          frozen: this.columnProp('frozen'),\n          scrollable: this.$parentInstance.scrollable,\n          showGridlines: this.$parentInstance.showGridlines,\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo\n    },\n    getColumnCheckboxPT: function getColumnCheckboxPT(key) {\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          checked: this.checked,\n          partialChecked: this.partialChecked\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var pos = 0;\n          var next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n          }\n          this.styleObject.insetInlineEnd = pos + 'px';\n        } else {\n          var _pos = 0;\n          var prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            _pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n          }\n          this.styleObject.insetInlineStart = _pos + 'px';\n        }\n      }\n    },\n    resolveFieldData: function resolveFieldData$1(rowData, field) {\n      return resolveFieldData(rowData, field);\n    },\n    toggleCheckbox: function toggleCheckbox() {\n      this.$emit('checkbox-toggle');\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.columnProp('bodyClass'), this.columnProp('class'), this.cx('bodyCell')];\n    },\n    containerStyle: function containerStyle() {\n      var bodyStyle = this.columnProp('bodyStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n    },\n    togglerStyle: function togglerStyle() {\n      return {\n        marginLeft: this.level * this.indentation + 'rem',\n        visibility: this.leaf ? 'hidden' : 'visible'\n      };\n    },\n    checkboxSelectionMode: function checkboxSelectionMode() {\n      return this.selectionMode === 'checkbox';\n    }\n  },\n  components: {\n    Checkbox: Checkbox,\n    ChevronRightIcon: ChevronRightIcon,\n    ChevronDownIcon: ChevronDownIcon,\n    CheckIcon: CheckIcon,\n    MinusIcon: MinusIcon,\n    SpinnerIcon: SpinnerIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\nfunction _typeof$3(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$3 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$3(o);\n}\nfunction ownKeys$3(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$3(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) {\n      _defineProperty$3(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$3(e, r, t) {\n  return (r = _toPropertyKey$3(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey$3(t) {\n  var i = _toPrimitive$3(t, \"string\");\n  return \"symbol\" == _typeof$3(i) ? i : i + \"\";\n}\nfunction _toPrimitive$3(t, r) {\n  if (\"object\" != _typeof$3(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof$3(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar _hoisted_1$2 = [\"data-p-frozen-column\"];\nfunction render$2(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_Checkbox = resolveComponent(\"Checkbox\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"td\", mergeProps({\n    style: $options.containerStyle,\n    \"class\": $options.containerClass,\n    role: \"cell\"\n  }, _objectSpread$3(_objectSpread$3({}, $options.getColumnPT('root')), $options.getColumnPT('bodyCell')), {\n    \"data-p-frozen-column\": $options.columnProp('frozen')\n  }), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('bodyCellContent')\n  }, $options.getColumnPT('bodyCellContent')), [$options.columnProp('expander') ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 0,\n    type: \"button\",\n    \"class\": _ctx.cx('nodeToggleButton'),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.toggle && $options.toggle.apply($options, arguments);\n    }),\n    style: $options.togglerStyle,\n    tabindex: \"-1\"\n  }, $options.getColumnPT('nodeToggleButton'), {\n    \"data-pc-group-section\": \"rowactionbutton\"\n  }), [$props.node.loading && $props.loadingMode === 'icon' ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [$props.templates['nodetoggleicon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['nodetoggleicon']), {\n    key: 0\n  })) : createCommentVNode(\"\", true), $props.templates['nodetogglericon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['nodetogglericon']), {\n    key: 1\n  })) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n    key: 2,\n    spin: \"\"\n  }, _ctx.ptm('nodetoggleicon')), null, 16))], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [$props.column.children && $props.column.children.rowtoggleicon ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.rowtoggleicon), {\n    key: 0,\n    node: $props.node,\n    expanded: $props.expanded,\n    \"class\": normalizeClass(_ctx.cx('nodeToggleIcon'))\n  }, null, 8, [\"node\", \"expanded\", \"class\"])) : createCommentVNode(\"\", true), $props.column.children && $props.column.children.rowtogglericon ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.rowtogglericon), {\n    key: 1,\n    node: $props.node,\n    expanded: $props.expanded,\n    \"class\": normalizeClass(_ctx.cx('nodeToggleIcon'))\n  }, null, 8, [\"node\", \"expanded\", \"class\"])) : $props.expanded ? (openBlock(), createBlock(resolveDynamicComponent($props.node.expandedIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n    key: 2,\n    \"class\": _ctx.cx('nodeToggleIcon')\n  }, $options.getColumnPT('nodeToggleIcon')), null, 16, [\"class\"])) : (openBlock(), createBlock(resolveDynamicComponent($props.node.collapsedIcon ? 'span' : 'ChevronRightIcon'), mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('nodeToggleIcon')\n  }, $options.getColumnPT('nodeToggleIcon')), null, 16, [\"class\"]))], 64))], 16)), [[_directive_ripple]]) : createCommentVNode(\"\", true), $options.checkboxSelectionMode && $options.columnProp('expander') ? (openBlock(), createBlock(_component_Checkbox, {\n    key: 1,\n    modelValue: $props.checked,\n    binary: true,\n    \"class\": normalizeClass(_ctx.cx('pcNodeCheckbox')),\n    disabled: $props.node.selectable === false,\n    onChange: $options.toggleCheckbox,\n    tabindex: -1,\n    indeterminate: $props.partialChecked,\n    unstyled: _ctx.unstyled,\n    pt: $options.getColumnCheckboxPT('pcNodeCheckbox'),\n    \"data-p-partialchecked\": $props.partialChecked\n  }, {\n    icon: withCtx(function (slotProps) {\n      return [$props.templates['checkboxicon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['checkboxicon']), {\n        key: 0,\n        checked: slotProps.checked,\n        partialChecked: $props.partialChecked,\n        \"class\": normalizeClass(slotProps[\"class\"])\n      }, null, 8, [\"checked\", \"partialChecked\", \"class\"])) : createCommentVNode(\"\", true)];\n    }),\n    _: 1\n  }, 8, [\"modelValue\", \"class\", \"disabled\", \"onChange\", \"indeterminate\", \"unstyled\", \"pt\", \"data-p-partialchecked\"])) : createCommentVNode(\"\", true), $props.column.children && $props.column.children.body ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.body), {\n    key: 2,\n    node: $props.node,\n    column: $props.column\n  }, null, 8, [\"node\", \"column\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 3\n  }, [createTextVNode(toDisplayString($options.resolveFieldData($props.node.data, $options.columnProp('field'))), 1)], 64))], 16)], 16, _hoisted_1$2);\n}\nscript$2.render = render$2;\nfunction _typeof$2(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$2(o);\n}\nfunction _createForOfIteratorHelper$1(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e) {\n      t && (r = t);\n      var _n = 0,\n        F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          return _n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[_n++]\n          };\n        },\n        e: function e(r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function s() {\n      t = t.call(r);\n    },\n    n: function n() {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function e(r) {\n      u = !0, o = r;\n    },\n    f: function f() {\n      try {\n        a || null == t[\"return\"] || t[\"return\"]();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction ownKeys$2(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) {\n      _defineProperty$2(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$2(e, r, t) {\n  return (r = _toPropertyKey$2(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey$2(t) {\n  var i = _toPrimitive$2(t, \"string\");\n  return \"symbol\" == _typeof$2(i) ? i : i + \"\";\n}\nfunction _toPrimitive$2(t, r) {\n  if (\"object\" != _typeof$2(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof$2(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toConsumableArray$1(r) {\n  return _arrayWithoutHoles$1(r) || _iterableToArray$1(r) || _unsupportedIterableToArray$1(r) || _nonIterableSpread$1();\n}\nfunction _nonIterableSpread$1() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray$1(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray$1(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0;\n  }\n}\nfunction _iterableToArray$1(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles$1(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray$1(r);\n}\nfunction _arrayLikeToArray$1(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script$1 = {\n  name: 'TreeTableRow',\n  hostName: 'TreeTable',\n  \"extends\": BaseComponent,\n  emits: ['node-click', 'node-toggle', 'checkbox-change', 'nodeClick', 'nodeToggle', 'checkboxChange', 'row-rightclick', 'rowRightclick'],\n  props: {\n    node: {\n      type: null,\n      \"default\": null\n    },\n    dataKey: {\n      type: [String, Function],\n      \"default\": 'key'\n    },\n    parentNode: {\n      type: null,\n      \"default\": null\n    },\n    columns: {\n      type: null,\n      \"default\": null\n    },\n    expandedKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    level: {\n      type: Number,\n      \"default\": 0\n    },\n    indentation: {\n      type: Number,\n      \"default\": 1\n    },\n    tabindex: {\n      type: Number,\n      \"default\": -1\n    },\n    ariaSetSize: {\n      type: Number,\n      \"default\": null\n    },\n    ariaPosInset: {\n      type: Number,\n      \"default\": null\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    },\n    templates: {\n      type: Object,\n      \"default\": null\n    },\n    contextMenu: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenuSelection: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  nodeTouched: false,\n  methods: {\n    columnProp: function columnProp(col, prop) {\n      return getVNodeProp(col, prop);\n    },\n    toggle: function toggle() {\n      this.$emit('node-toggle', this.node);\n    },\n    onClick: function onClick(event) {\n      if (isClickable(event.target) || getAttribute(event.target, 'data-pc-section') === 'nodetogglebutton' || getAttribute(event.target, 'data-pc-section') === 'nodetoggleicon' || event.target.tagName === 'path') {\n        return;\n      }\n      this.setTabIndexForSelectionMode(event, this.nodeTouched);\n      this.$emit('node-click', {\n        originalEvent: event,\n        nodeTouched: this.nodeTouched,\n        node: this.node\n      });\n      this.nodeTouched = false;\n    },\n    onRowRightClick: function onRowRightClick(event) {\n      this.$emit('row-rightclick', {\n        originalEvent: event,\n        node: this.node\n      });\n    },\n    onTouchEnd: function onTouchEnd() {\n      this.nodeTouched = true;\n    },\n    nodeKey: function nodeKey(node) {\n      return resolveFieldData(node, this.dataKey);\n    },\n    onKeyDown: function onKeyDown(event, item) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeftKey(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          if (!isClickable(event.target)) {\n            this.onEnterKey(event, item);\n          }\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      var nextElementSibling = event.currentTarget.nextElementSibling;\n      nextElementSibling && this.focusRowChange(event.currentTarget, nextElementSibling);\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      var previousElementSibling = event.currentTarget.previousElementSibling;\n      previousElementSibling && this.focusRowChange(event.currentTarget, previousElementSibling);\n      event.preventDefault();\n    },\n    onArrowRightKey: function onArrowRightKey(event) {\n      var _this = this;\n      var ishiddenIcon = findSingle(event.currentTarget, 'button').style.visibility === 'hidden';\n      var togglerElement = findSingle(this.$refs.node, '[data-pc-section=\"nodetogglebutton\"]');\n      if (ishiddenIcon) return;\n      !this.expanded && togglerElement.click();\n      this.$nextTick(function () {\n        _this.onArrowDownKey(event);\n      });\n      event.preventDefault();\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      if (this.level === 0 && !this.expanded) {\n        return;\n      }\n      var currentTarget = event.currentTarget;\n      var ishiddenIcon = findSingle(currentTarget, 'button').style.visibility === 'hidden';\n      var togglerElement = findSingle(currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n      if (this.expanded && !ishiddenIcon) {\n        togglerElement.click();\n        return;\n      }\n      var target = this.findBeforeClickableNode(currentTarget);\n      target && this.focusRowChange(currentTarget, target);\n    },\n    onHomeKey: function onHomeKey(event) {\n      var findFirstElement = findSingle(event.currentTarget.parentElement, \"tr[aria-level=\\\"\".concat(this.level + 1, \"\\\"]\"));\n      findFirstElement && focus(findFirstElement);\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var nodes = find(event.currentTarget.parentElement, \"tr[aria-level=\\\"\".concat(this.level + 1, \"\\\"]\"));\n      var findFirstElement = nodes[nodes.length - 1];\n      focus(findFirstElement);\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      event.preventDefault();\n      this.setTabIndexForSelectionMode(event, this.nodeTouched);\n      if (this.selectionMode === 'checkbox') {\n        this.toggleCheckbox();\n        return;\n      }\n      this.$emit('node-click', {\n        originalEvent: event,\n        nodeTouched: this.nodeTouched,\n        node: this.node\n      });\n      this.nodeTouched = false;\n    },\n    onTabKey: function onTabKey() {\n      var rows = _toConsumableArray$1(find(this.$refs.node.parentElement, 'tr'));\n      var hasSelectedRow = rows.some(function (row) {\n        return getAttribute(row, 'data-p-selected') || row.getAttribute('aria-checked') === 'true';\n      });\n      rows.forEach(function (row) {\n        row.tabIndex = -1;\n      });\n      if (hasSelectedRow) {\n        var selectedNodes = rows.filter(function (node) {\n          return getAttribute(node, 'data-p-selected') || node.getAttribute('aria-checked') === 'true';\n        });\n        selectedNodes[0].tabIndex = 0;\n        return;\n      }\n      rows[0].tabIndex = 0;\n    },\n    focusRowChange: function focusRowChange(firstFocusableRow, currentFocusedRow) {\n      firstFocusableRow.tabIndex = '-1';\n      currentFocusedRow.tabIndex = '0';\n      focus(currentFocusedRow);\n    },\n    findBeforeClickableNode: function findBeforeClickableNode(node) {\n      var prevNode = node.previousElementSibling;\n      if (prevNode) {\n        var prevNodeButton = prevNode.querySelector('button');\n        if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n          return prevNode;\n        }\n        return this.findBeforeClickableNode(prevNode);\n      }\n      return null;\n    },\n    toggleCheckbox: function toggleCheckbox() {\n      var _selectionKeys = this.selectionKeys ? _objectSpread$2({}, this.selectionKeys) : {};\n      var _check = !this.checked;\n      this.propagateDown(this.node, _check, _selectionKeys);\n      this.$emit('checkbox-change', {\n        node: this.node,\n        check: _check,\n        selectionKeys: _selectionKeys\n      });\n    },\n    propagateDown: function propagateDown(node, check, selectionKeys) {\n      if (check) selectionKeys[this.nodeKey(node)] = {\n        checked: true,\n        partialChecked: false\n      };else delete selectionKeys[this.nodeKey(node)];\n      if (node.children && node.children.length) {\n        var _iterator = _createForOfIteratorHelper$1(node.children),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n            this.propagateDown(child, check, selectionKeys);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    },\n    propagateUp: function propagateUp(event) {\n      var check = event.check;\n      var _selectionKeys = _objectSpread$2({}, event.selectionKeys);\n      var checkedChildCount = 0;\n      var childPartialSelected = false;\n      var _iterator2 = _createForOfIteratorHelper$1(this.node.children),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n          if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (check && checkedChildCount === this.node.children.length) {\n        _selectionKeys[this.nodeKey(this.node)] = {\n          checked: true,\n          partialChecked: false\n        };\n      } else {\n        if (!check) {\n          delete _selectionKeys[this.nodeKey(this.node)];\n        }\n        if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== this.node.children.length) _selectionKeys[this.nodeKey(this.node)] = {\n          checked: false,\n          partialChecked: true\n        };else _selectionKeys[this.nodeKey(this.node)] = {\n          checked: false,\n          partialChecked: false\n        };\n      }\n      this.$emit('checkbox-change', {\n        node: event.node,\n        check: event.check,\n        selectionKeys: _selectionKeys\n      });\n    },\n    onCheckboxChange: function onCheckboxChange(event) {\n      var check = event.check;\n      var _selectionKeys = _objectSpread$2({}, event.selectionKeys);\n      var checkedChildCount = 0;\n      var childPartialSelected = false;\n      var _iterator3 = _createForOfIteratorHelper$1(this.node.children),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (check && checkedChildCount === this.node.children.length) {\n        _selectionKeys[this.nodeKey(this.node)] = {\n          checked: true,\n          partialChecked: false\n        };\n      } else {\n        if (!check) {\n          delete _selectionKeys[this.nodeKey(this.node)];\n        }\n        if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== this.node.children.length) _selectionKeys[this.nodeKey(this.node)] = {\n          checked: false,\n          partialChecked: true\n        };else _selectionKeys[this.nodeKey(this.node)] = {\n          checked: false,\n          partialChecked: false\n        };\n      }\n      this.$emit('checkbox-change', {\n        node: event.node,\n        check: event.check,\n        selectionKeys: _selectionKeys\n      });\n    },\n    setTabIndexForSelectionMode: function setTabIndexForSelectionMode(event, nodeTouched) {\n      if (this.selectionMode !== null) {\n        var elements = _toConsumableArray$1(find(this.$refs.node.parentElement, 'tr'));\n        event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n        if (elements.every(function (element) {\n          return element.tabIndex === -1;\n        })) {\n          elements[0].tabIndex = 0;\n        }\n      }\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.node.styleClass, this.cx('row')];\n    },\n    expanded: function expanded() {\n      return this.expandedKeys && this.expandedKeys[this.nodeKey(this.node)] === true;\n    },\n    leaf: function leaf() {\n      return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n    },\n    selected: function selected() {\n      return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] === true : false;\n    },\n    isSelectedWithContextMenu: function isSelectedWithContextMenu() {\n      if (this.node && this.contextMenuSelection) {\n        return equals(this.node, this.contextMenuSelection, this.dataKey);\n      }\n      return false;\n    },\n    checked: function checked() {\n      return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].checked : false;\n    },\n    partialChecked: function partialChecked() {\n      return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].partialChecked : false;\n    },\n    getAriaSelected: function getAriaSelected() {\n      return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : null;\n    },\n    ptmOptions: function ptmOptions() {\n      return {\n        context: {\n          selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n          selected: this.selected,\n          scrollable: this.$parentInstance.scrollable\n        }\n      };\n    }\n  },\n  components: {\n    TTBodyCell: script$2\n  }\n};\nvar _hoisted_1$1 = [\"tabindex\", \"aria-expanded\", \"aria-level\", \"aria-setsize\", \"aria-posinset\", \"aria-selected\", \"aria-checked\", \"data-p-selected\", \"data-p-selected-contextmenu\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_TTBodyCell = resolveComponent(\"TTBodyCell\");\n  var _component_TreeTableRow = resolveComponent(\"TreeTableRow\", true);\n  return openBlock(), createElementBlock(Fragment, null, [createElementVNode(\"tr\", mergeProps({\n    ref: \"node\",\n    \"class\": $options.containerClass,\n    style: $props.node.style,\n    tabindex: $props.tabindex,\n    role: \"row\",\n    \"aria-expanded\": $props.node.children && $props.node.children.length ? $options.expanded : undefined,\n    \"aria-level\": $props.level + 1,\n    \"aria-setsize\": $props.ariaSetSize,\n    \"aria-posinset\": $props.ariaPosInset,\n    \"aria-selected\": $options.getAriaSelected,\n    \"aria-checked\": $options.checked || undefined,\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    onTouchend: _cache[3] || (_cache[3] = function () {\n      return $options.onTouchEnd && $options.onTouchEnd.apply($options, arguments);\n    }),\n    onContextmenu: _cache[4] || (_cache[4] = function () {\n      return $options.onRowRightClick && $options.onRowRightClick.apply($options, arguments);\n    })\n  }, _ctx.ptm('row', $options.ptmOptions), {\n    \"data-p-selected\": $options.selected,\n    \"data-p-selected-contextmenu\": $props.contextMenuSelection && $options.isSelectedWithContextMenu\n  }), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createBlock(_component_TTBodyCell, {\n      key: 0,\n      column: col,\n      node: $props.node,\n      level: $props.level,\n      leaf: $options.leaf,\n      indentation: $props.indentation,\n      expanded: $options.expanded,\n      selectionMode: $props.selectionMode,\n      checked: $options.checked,\n      partialChecked: $options.partialChecked,\n      templates: $props.templates,\n      onNodeToggle: _cache[0] || (_cache[0] = function ($event) {\n        return _ctx.$emit('node-toggle', $event);\n      }),\n      onCheckboxToggle: $options.toggleCheckbox,\n      index: i,\n      loadingMode: $props.loadingMode,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"column\", \"node\", \"level\", \"leaf\", \"indentation\", \"expanded\", \"selectionMode\", \"checked\", \"partialChecked\", \"templates\", \"onCheckboxToggle\", \"index\", \"loadingMode\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16, _hoisted_1$1), $options.expanded && $props.node.children && $props.node.children.length ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList($props.node.children, function (childNode) {\n    return openBlock(), createBlock(_component_TreeTableRow, {\n      key: $options.nodeKey(childNode),\n      dataKey: $props.dataKey,\n      columns: $props.columns,\n      node: childNode,\n      parentNode: $props.node,\n      level: $props.level + 1,\n      expandedKeys: $props.expandedKeys,\n      selectionMode: $props.selectionMode,\n      selectionKeys: $props.selectionKeys,\n      contextMenu: $props.contextMenu,\n      contextMenuSelection: $props.contextMenuSelection,\n      indentation: $props.indentation,\n      ariaPosInset: $props.node.children.indexOf(childNode) + 1,\n      ariaSetSize: $props.node.children.length,\n      templates: $props.templates,\n      onNodeToggle: _cache[5] || (_cache[5] = function ($event) {\n        return _ctx.$emit('node-toggle', $event);\n      }),\n      onNodeClick: _cache[6] || (_cache[6] = function ($event) {\n        return _ctx.$emit('node-click', $event);\n      }),\n      onRowRightclick: _cache[7] || (_cache[7] = function ($event) {\n        return _ctx.$emit('row-rightclick', $event);\n      }),\n      onCheckboxChange: $options.onCheckboxChange,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"dataKey\", \"columns\", \"node\", \"parentNode\", \"level\", \"expandedKeys\", \"selectionMode\", \"selectionKeys\", \"contextMenu\", \"contextMenuSelection\", \"indentation\", \"ariaPosInset\", \"ariaSetSize\", \"templates\", \"onCheckboxChange\", \"unstyled\", \"pt\"]);\n  }), 128)) : createCommentVNode(\"\", true)], 64);\n}\nscript$1.render = render$1;\nfunction _typeof$1(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$1(o);\n}\nfunction _createForOfIteratorHelper(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {\n      t && (r = t);\n      var _n = 0,\n        F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          return _n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[_n++]\n          };\n        },\n        e: function e(r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function s() {\n      t = t.call(r);\n    },\n    n: function n() {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function e(r) {\n      u = !0, o = r;\n    },\n    f: function f() {\n      try {\n        a || null == t[\"return\"] || t[\"return\"]();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction ownKeys$1(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$1(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) {\n      _defineProperty$1(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$1(e, r, t) {\n  return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey$1(t) {\n  var i = _toPrimitive$1(t, \"string\");\n  return \"symbol\" == _typeof$1(i) ? i : i + \"\";\n}\nfunction _toPrimitive$1(t, r) {\n  if (\"object\" != _typeof$1(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof$1(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script = {\n  name: 'TreeTable',\n  \"extends\": script$5,\n  inheritAttrs: false,\n  emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect', 'update:first', 'update:rows', 'page', 'update:sortField', 'update:sortOrder', 'update:multiSortMeta', 'sort', 'filter', 'column-resize-end', 'update:contextMenuSelection', 'row-contextmenu'],\n  provide: function provide() {\n    return {\n      $columns: this.d_columns\n    };\n  },\n  data: function data() {\n    return {\n      d_expandedKeys: this.expandedKeys || {},\n      d_first: this.first,\n      d_rows: this.rows,\n      d_sortField: this.sortField,\n      d_sortOrder: this.sortOrder,\n      d_multiSortMeta: this.multiSortMeta ? _toConsumableArray(this.multiSortMeta) : [],\n      hasASelectedNode: false,\n      d_columns: new HelperSet({\n        type: 'Column'\n      })\n    };\n  },\n  documentColumnResizeListener: null,\n  documentColumnResizeEndListener: null,\n  lastResizeHelperX: null,\n  resizeColumnElement: null,\n  watch: {\n    expandedKeys: function expandedKeys(newValue) {\n      this.d_expandedKeys = newValue;\n    },\n    first: function first(newValue) {\n      this.d_first = newValue;\n    },\n    rows: function rows(newValue) {\n      this.d_rows = newValue;\n    },\n    sortField: function sortField(newValue) {\n      this.d_sortField = newValue;\n    },\n    sortOrder: function sortOrder(newValue) {\n      this.d_sortOrder = newValue;\n    },\n    multiSortMeta: function multiSortMeta(newValue) {\n      this.d_multiSortMeta = newValue;\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.destroyStyleElement();\n    this.d_columns.clear();\n  },\n  methods: {\n    columnProp: function columnProp(col, prop) {\n      return getVNodeProp(col, prop);\n    },\n    ptHeaderCellOptions: function ptHeaderCellOptions(column) {\n      return {\n        context: {\n          frozen: this.columnProp(column, 'frozen')\n        }\n      };\n    },\n    onNodeToggle: function onNodeToggle(node) {\n      var key = this.nodeKey(node);\n      if (this.d_expandedKeys[key]) {\n        delete this.d_expandedKeys[key];\n        this.$emit('node-collapse', node);\n      } else {\n        this.d_expandedKeys[key] = true;\n        this.$emit('node-expand', node);\n      }\n      this.d_expandedKeys = _objectSpread$1({}, this.d_expandedKeys);\n      this.$emit('update:expandedKeys', this.d_expandedKeys);\n    },\n    onNodeClick: function onNodeClick(event) {\n      if (this.rowSelectionMode && event.node.selectable !== false) {\n        var metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n        var _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n        this.$emit('update:selectionKeys', _selectionKeys);\n      }\n    },\n    nodeKey: function nodeKey(node) {\n      return resolveFieldData(node, this.dataKey);\n    },\n    handleSelectionWithMetaKey: function handleSelectionWithMetaKey(event) {\n      var originalEvent = event.originalEvent;\n      var node = event.node;\n      var nodeKey = this.nodeKey(node);\n      var metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      var selected = this.isNodeSelected(node);\n      var _selectionKeys;\n      if (selected && metaKey) {\n        if (this.isSingleSelectionMode()) {\n          _selectionKeys = {};\n        } else {\n          _selectionKeys = _objectSpread$1({}, this.selectionKeys);\n          delete _selectionKeys[nodeKey];\n        }\n        this.$emit('node-unselect', node);\n      } else {\n        if (this.isSingleSelectionMode()) {\n          _selectionKeys = {};\n        } else if (this.isMultipleSelectionMode()) {\n          _selectionKeys = !metaKey ? {} : this.selectionKeys ? _objectSpread$1({}, this.selectionKeys) : {};\n        }\n        _selectionKeys[nodeKey] = true;\n        this.$emit('node-select', node);\n      }\n      return _selectionKeys;\n    },\n    handleSelectionWithoutMetaKey: function handleSelectionWithoutMetaKey(event) {\n      var node = event.node;\n      var nodeKey = this.nodeKey(node);\n      var selected = this.isNodeSelected(node);\n      var _selectionKeys;\n      if (this.isSingleSelectionMode()) {\n        if (selected) {\n          _selectionKeys = {};\n          this.$emit('node-unselect', node);\n        } else {\n          _selectionKeys = {};\n          _selectionKeys[nodeKey] = true;\n          this.$emit('node-select', node);\n        }\n      } else {\n        if (selected) {\n          _selectionKeys = _objectSpread$1({}, this.selectionKeys);\n          delete _selectionKeys[nodeKey];\n          this.$emit('node-unselect', node);\n        } else {\n          _selectionKeys = this.selectionKeys ? _objectSpread$1({}, this.selectionKeys) : {};\n          _selectionKeys[nodeKey] = true;\n          this.$emit('node-select', node);\n        }\n      }\n      return _selectionKeys;\n    },\n    onCheckboxChange: function onCheckboxChange(event) {\n      this.$emit('update:selectionKeys', event.selectionKeys);\n      if (event.check) this.$emit('node-select', event.node);else this.$emit('node-unselect', event.node);\n    },\n    onRowRightClick: function onRowRightClick(event) {\n      if (this.contextMenu) {\n        clearSelection();\n        event.originalEvent.target.focus();\n      }\n      this.$emit('update:contextMenuSelection', event.node);\n      this.$emit('row-contextmenu', event);\n    },\n    isSingleSelectionMode: function isSingleSelectionMode() {\n      return this.selectionMode === 'single';\n    },\n    isMultipleSelectionMode: function isMultipleSelectionMode() {\n      return this.selectionMode === 'multiple';\n    },\n    onPage: function onPage(event) {\n      this.d_first = event.first;\n      this.d_rows = event.rows;\n      var pageEvent = this.createLazyLoadEvent(event);\n      pageEvent.pageCount = event.pageCount;\n      pageEvent.page = event.page;\n      this.d_expandedKeys = {};\n      this.$emit('update:expandedKeys', this.d_expandedKeys);\n      this.$emit('update:first', this.d_first);\n      this.$emit('update:rows', this.d_rows);\n      this.$emit('page', pageEvent);\n    },\n    resetPage: function resetPage() {\n      this.d_first = 0;\n      this.$emit('update:first', this.d_first);\n    },\n    getFilterColumnHeaderClass: function getFilterColumnHeaderClass(column) {\n      return [this.cx('headerCell', {\n        column: column\n      }), this.columnProp(column, 'filterHeaderClass')];\n    },\n    onColumnHeaderClick: function onColumnHeaderClick(e) {\n      var event = e.originalEvent;\n      var column = e.column;\n      if (this.columnProp(column, 'sortable')) {\n        var targetNode = event.target;\n        var columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n        if (getAttribute(targetNode, 'data-p-sortable-column') === true || getAttribute(targetNode, 'data-pc-section') === 'columntitle' || getAttribute(targetNode, 'data-pc-section') === 'columnheadercontent' || getAttribute(targetNode, 'data-pc-section') === 'sorticon' || getAttribute(targetNode.parentElement, 'data-pc-section') === 'sorticon' || getAttribute(targetNode.parentElement.parentElement, 'data-pc-section') === 'sorticon' || targetNode.closest('[data-p-sortable-column=\"true\"]')) {\n          clearSelection();\n          if (this.sortMode === 'single') {\n            if (this.d_sortField === columnField) {\n              if (this.removableSort && this.d_sortOrder * -1 === this.defaultSortOrder) {\n                this.d_sortOrder = null;\n                this.d_sortField = null;\n              } else {\n                this.d_sortOrder = this.d_sortOrder * -1;\n              }\n            } else {\n              this.d_sortOrder = this.defaultSortOrder;\n              this.d_sortField = columnField;\n            }\n            this.$emit('update:sortField', this.d_sortField);\n            this.$emit('update:sortOrder', this.d_sortOrder);\n            this.resetPage();\n          } else if (this.sortMode === 'multiple') {\n            var metaKey = event.metaKey || event.ctrlKey;\n            if (!metaKey) {\n              this.d_multiSortMeta = this.d_multiSortMeta.filter(function (meta) {\n                return meta.field === columnField;\n              });\n            }\n            this.addMultiSortField(columnField);\n            this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n          }\n          this.$emit('sort', this.createLazyLoadEvent(event));\n        }\n      }\n    },\n    addMultiSortField: function addMultiSortField(field) {\n      var index = this.d_multiSortMeta.findIndex(function (meta) {\n        return meta.field === field;\n      });\n      if (index >= 0) {\n        if (this.removableSort && this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder) this.d_multiSortMeta.splice(index, 1);else this.d_multiSortMeta[index] = {\n          field: field,\n          order: this.d_multiSortMeta[index].order * -1\n        };\n      } else {\n        this.d_multiSortMeta.push({\n          field: field,\n          order: this.defaultSortOrder\n        });\n      }\n      this.d_multiSortMeta = _toConsumableArray(this.d_multiSortMeta);\n    },\n    sortSingle: function sortSingle(nodes) {\n      return this.sortNodesSingle(nodes);\n    },\n    sortNodesSingle: function sortNodesSingle(nodes) {\n      var _this = this;\n      var _nodes = _toConsumableArray(nodes);\n      var comparer = localeComparator();\n      _nodes.sort(function (node1, node2) {\n        var value1 = resolveFieldData(node1.data, _this.d_sortField);\n        var value2 = resolveFieldData(node2.data, _this.d_sortField);\n        return sort(value1, value2, _this.d_sortOrder, comparer);\n      });\n      return _nodes;\n    },\n    sortMultiple: function sortMultiple(nodes) {\n      return this.sortNodesMultiple(nodes);\n    },\n    sortNodesMultiple: function sortNodesMultiple(nodes) {\n      var _this2 = this;\n      var _nodes = _toConsumableArray(nodes);\n      _nodes.sort(function (node1, node2) {\n        return _this2.multisortField(node1, node2, 0);\n      });\n      return _nodes;\n    },\n    multisortField: function multisortField(node1, node2, index) {\n      var value1 = resolveFieldData(node1.data, this.d_multiSortMeta[index].field);\n      var value2 = resolveFieldData(node2.data, this.d_multiSortMeta[index].field);\n      var comparer = localeComparator();\n      if (value1 === value2) {\n        return this.d_multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, index + 1) : 0;\n      }\n      return sort(value1, value2, this.d_multiSortMeta[index].order, comparer);\n    },\n    filter: function filter(value) {\n      var filteredNodes = [];\n      var strict = this.filterMode === 'strict';\n      var _iterator = _createForOfIteratorHelper(value),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n          var copyNode = _objectSpread$1({}, node);\n          var localMatch = true;\n          var globalMatch = false;\n          for (var j = 0; j < this.columns.length; j++) {\n            var col = this.columns[j];\n            var filterField = this.columnProp(col, 'filterField') || this.columnProp(col, 'field');\n\n            //local\n            if (Object.prototype.hasOwnProperty.call(this.filters, filterField)) {\n              var filterMatchMode = this.columnProp(col, 'filterMatchMode') || 'startsWith';\n              var filterValue = this.filters[filterField];\n              var filterConstraint = FilterService.filters[filterMatchMode];\n              var paramsWithoutNode = {\n                filterField: filterField,\n                filterValue: filterValue,\n                filterConstraint: filterConstraint,\n                strict: strict\n              };\n              if (strict && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !strict && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n                localMatch = false;\n              }\n              if (!localMatch) {\n                break;\n              }\n            }\n\n            //global\n            if (this.hasGlobalFilter() && !globalMatch) {\n              var copyNodeForGlobal = _objectSpread$1({}, copyNode);\n              var _filterValue = this.filters['global'];\n              var _filterConstraint = FilterService.filters['contains'];\n              var globalFilterParamsWithoutNode = {\n                filterField: filterField,\n                filterValue: _filterValue,\n                filterConstraint: _filterConstraint,\n                strict: strict\n              };\n              if (strict && (this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode)) || !strict && (this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode))) {\n                globalMatch = true;\n                copyNode = copyNodeForGlobal;\n              }\n            }\n          }\n          var matches = localMatch;\n          if (this.hasGlobalFilter()) {\n            matches = localMatch && globalMatch;\n          }\n          if (matches) {\n            filteredNodes.push(copyNode);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var filterEvent = this.createLazyLoadEvent(event);\n      filterEvent.filteredValue = filteredNodes;\n      this.$emit('filter', filterEvent);\n      return filteredNodes;\n    },\n    findFilteredNodes: function findFilteredNodes(node, paramsWithoutNode) {\n      if (node) {\n        var matched = false;\n        if (node.children) {\n          var childNodes = _toConsumableArray(node.children);\n          node.children = [];\n          var _iterator2 = _createForOfIteratorHelper(childNodes),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var childNode = _step2.value;\n              var copyChildNode = _objectSpread$1({}, childNode);\n              if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                matched = true;\n                node.children.push(copyChildNode);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n        if (matched) {\n          return true;\n        }\n      }\n    },\n    isFilterMatched: function isFilterMatched(node, _ref) {\n      var filterField = _ref.filterField,\n        filterValue = _ref.filterValue,\n        filterConstraint = _ref.filterConstraint,\n        strict = _ref.strict;\n      var matched = false;\n      var dataFieldValue = resolveFieldData(node.data, filterField);\n      if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n        matched = true;\n      }\n      if (!matched || strict && !this.isNodeLeaf(node)) {\n        matched = this.findFilteredNodes(node, {\n          filterField: filterField,\n          filterValue: filterValue,\n          filterConstraint: filterConstraint,\n          strict: strict\n        }) || matched;\n      }\n      return matched;\n    },\n    isNodeSelected: function isNodeSelected(node) {\n      return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)] === true : false;\n    },\n    isNodeLeaf: function isNodeLeaf(node) {\n      return node.leaf === false ? false : !(node.children && node.children.length);\n    },\n    createLazyLoadEvent: function createLazyLoadEvent(event) {\n      var _this3 = this;\n      var filterMatchModes;\n      if (this.hasFilters()) {\n        filterMatchModes = {};\n        this.columns.forEach(function (col) {\n          if (_this3.columnProp(col, 'field')) {\n            filterMatchModes[col.props.field] = _this3.columnProp(col, 'filterMatchMode');\n          }\n        });\n      }\n      return {\n        originalEvent: event,\n        first: this.d_first,\n        rows: this.d_rows,\n        sortField: this.d_sortField,\n        sortOrder: this.d_sortOrder,\n        multiSortMeta: this.d_multiSortMeta,\n        filters: this.filters,\n        filterMatchModes: filterMatchModes\n      };\n    },\n    onColumnResizeStart: function onColumnResizeStart(event) {\n      var containerLeft = getOffset(this.$el).left;\n      this.resizeColumnElement = event.target.parentElement;\n      this.columnResizing = true;\n      this.lastResizeHelperX = event.pageX - containerLeft + this.$el.scrollLeft;\n      this.bindColumnResizeEvents();\n    },\n    onColumnResize: function onColumnResize(event) {\n      var containerLeft = getOffset(this.$el).left;\n      this.$el.setAttribute('data-p-unselectable-text', 'true');\n      !this.isUnstyled && addStyle(this.$el, {\n        'user-select': 'none'\n      });\n      this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n      this.$refs.resizeHelper.style.top = 0 + 'px';\n      this.$refs.resizeHelper.style.left = event.pageX - containerLeft + this.$el.scrollLeft + 'px';\n      this.$refs.resizeHelper.style.display = 'block';\n    },\n    onColumnResizeEnd: function onColumnResizeEnd() {\n      var delta = isRTL(this.$el) ? this.lastResizeHelperX - this.$refs.resizeHelper.offsetLeft : this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n      var columnWidth = this.resizeColumnElement.offsetWidth;\n      var newColumnWidth = columnWidth + delta;\n      var minWidth = this.resizeColumnElement.style.minWidth || 15;\n      if (columnWidth + delta > parseInt(minWidth, 10)) {\n        if (this.columnResizeMode === 'fit') {\n          var nextColumn = this.resizeColumnElement.nextElementSibling;\n          var nextColumnWidth = nextColumn.offsetWidth - delta;\n          if (newColumnWidth > 15 && nextColumnWidth > 15) {\n            this.resizeTableCells(newColumnWidth, nextColumnWidth);\n          }\n        } else if (this.columnResizeMode === 'expand') {\n          var tableWidth = this.$refs.table.offsetWidth + delta + 'px';\n          var updateTableWidth = function updateTableWidth(el) {\n            !!el && (el.style.width = el.style.minWidth = tableWidth);\n          };\n\n          // Reasoning: resize table cells before updating the table width so that it can use existing computed cell widths and adjust only the one column.\n          this.resizeTableCells(newColumnWidth);\n          updateTableWidth(this.$refs.table);\n        }\n        this.$emit('column-resize-end', {\n          element: this.resizeColumnElement,\n          delta: delta\n        });\n      }\n      this.$refs.resizeHelper.style.display = 'none';\n      this.resizeColumn = null;\n      this.$el.removeAttribute('data-p-unselectable-text');\n      !this.isUnstyled && (this.$el.style['user-select'] = '');\n      this.unbindColumnResizeEvents();\n    },\n    resizeTableCells: function resizeTableCells(newColumnWidth, nextColumnWidth) {\n      var colIndex = getIndex(this.resizeColumnElement);\n      var widths = [];\n      var headers = find(this.$refs.table, 'thead[data-pc-section=\"thead\"] > tr > th');\n      headers.forEach(function (header) {\n        return widths.push(getOuterWidth(header));\n      });\n      this.destroyStyleElement();\n      this.createStyleElement();\n      var innerHTML = '';\n      var selector = \"[data-pc-name=\\\"treetable\\\"][\".concat(this.$attrSelector, \"] > [data-pc-section=\\\"tablecontainer\\\"] > table[data-pc-section=\\\"table\\\"]\");\n      widths.forEach(function (width, index) {\n        var colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width;\n        var style = \"width: \".concat(colWidth, \"px !important; max-width: \").concat(colWidth, \"px !important\");\n        innerHTML += \"\\n                    \".concat(selector, \" > thead[data-pc-section=\\\"thead\\\"] > tr > th:nth-child(\").concat(index + 1, \"),\\n                    \").concat(selector, \" > tbody[data-pc-section=\\\"tbody\\\"] > tr > td:nth-child(\").concat(index + 1, \"),\\n                    \").concat(selector, \" > tfoot[data-pc-section=\\\"tfoot\\\"] > tr > td:nth-child(\").concat(index + 1, \") {\\n                        \").concat(style, \"\\n                    }\\n                \");\n      });\n      this.styleElement.innerHTML = innerHTML;\n    },\n    bindColumnResizeEvents: function bindColumnResizeEvents() {\n      var _this4 = this;\n      if (!this.documentColumnResizeListener) {\n        this.documentColumnResizeListener = document.addEventListener('mousemove', function (event) {\n          if (_this4.columnResizing) {\n            _this4.onColumnResize(event);\n          }\n        });\n      }\n      if (!this.documentColumnResizeEndListener) {\n        this.documentColumnResizeEndListener = document.addEventListener('mouseup', function () {\n          if (_this4.columnResizing) {\n            _this4.columnResizing = false;\n            _this4.onColumnResizeEnd();\n          }\n        });\n      }\n    },\n    unbindColumnResizeEvents: function unbindColumnResizeEvents() {\n      if (this.documentColumnResizeListener) {\n        document.removeEventListener('document', this.documentColumnResizeListener);\n        this.documentColumnResizeListener = null;\n      }\n      if (this.documentColumnResizeEndListener) {\n        document.removeEventListener('document', this.documentColumnResizeEndListener);\n        this.documentColumnResizeEndListener = null;\n      }\n    },\n    onColumnKeyDown: function onColumnKeyDown(event, col) {\n      if ((event.code === 'Enter' || event.code === 'NumpadEnter') && event.currentTarget.nodeName === 'TH' && getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n        this.onColumnHeaderClick(event, col);\n      }\n    },\n    hasColumnFilter: function hasColumnFilter() {\n      if (this.columns) {\n        var _iterator3 = _createForOfIteratorHelper(this.columns),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var col = _step3.value;\n            if (col.children && col.children.filter) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      return false;\n    },\n    hasFilters: function hasFilters() {\n      return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n    },\n    hasGlobalFilter: function hasGlobalFilter() {\n      return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n    },\n    getItemLabel: function getItemLabel(node) {\n      return node.data.name;\n    },\n    createStyleElement: function createStyleElement() {\n      var _this$$primevue;\n      this.styleElement = document.createElement('style');\n      this.styleElement.type = 'text/css';\n      setAttribute(this.styleElement, 'nonce', (_this$$primevue = this.$primevue) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.config) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.csp) === null || _this$$primevue === void 0 ? void 0 : _this$$primevue.nonce);\n      document.head.appendChild(this.styleElement);\n    },\n    destroyStyleElement: function destroyStyleElement() {\n      if (this.styleElement) {\n        document.head.removeChild(this.styleElement);\n        this.styleElement = null;\n      }\n    },\n    setTabindex: function setTabindex(node, index) {\n      if (this.isNodeSelected(node)) {\n        this.hasASelectedNode = true;\n        return 0;\n      }\n      if (this.selectionMode) {\n        if (!this.isNodeSelected(node) && index === 0 && !this.hasASelectedNode) return 0;\n      } else if (!this.selectionMode && index === 0) {\n        return 0;\n      }\n      return -1;\n    }\n  },\n  computed: {\n    columns: function columns() {\n      return this.d_columns.get(this);\n    },\n    processedData: function processedData() {\n      if (this.lazy) {\n        return this.value;\n      } else {\n        if (this.value && this.value.length) {\n          var data = this.value;\n          if (this.sorted) {\n            if (this.sortMode === 'single') data = this.sortSingle(data);else if (this.sortMode === 'multiple') data = this.sortMultiple(data);\n          }\n          if (this.hasFilters()) {\n            data = this.filter(data);\n          }\n          return data;\n        } else {\n          return null;\n        }\n      }\n    },\n    dataToRender: function dataToRender() {\n      var data = this.processedData;\n      if (this.paginator) {\n        var first = this.lazy ? 0 : this.d_first;\n        return data.slice(first, first + this.d_rows);\n      } else {\n        return data;\n      }\n    },\n    empty: function empty() {\n      var data = this.processedData;\n      return !data || data.length === 0;\n    },\n    sorted: function sorted() {\n      return this.d_sortField || this.d_multiSortMeta && this.d_multiSortMeta.length > 0;\n    },\n    hasFooter: function hasFooter() {\n      var hasFooter = false;\n      var _iterator4 = _createForOfIteratorHelper(this.columns),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var col = _step4.value;\n          if (this.columnProp(col, 'footer') || col.children && col.children.footer) {\n            hasFooter = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return hasFooter;\n    },\n    paginatorTop: function paginatorTop() {\n      return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n    },\n    paginatorBottom: function paginatorBottom() {\n      return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n    },\n    singleSelectionMode: function singleSelectionMode() {\n      return this.selectionMode && this.selectionMode === 'single';\n    },\n    multipleSelectionMode: function multipleSelectionMode() {\n      return this.selectionMode && this.selectionMode === 'multiple';\n    },\n    rowSelectionMode: function rowSelectionMode() {\n      return this.singleSelectionMode || this.multipleSelectionMode;\n    },\n    totalRecordsLength: function totalRecordsLength() {\n      if (this.lazy) {\n        return this.totalRecords;\n      } else {\n        var data = this.processedData;\n        return data ? data.length : 0;\n      }\n    }\n  },\n  components: {\n    TTRow: script$1,\n    TTPaginator: Paginator,\n    TTHeaderCell: script$3,\n    TTFooterCell: script$4,\n    SpinnerIcon: SpinnerIcon\n  }\n};\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar _hoisted_1 = [\"colspan\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_TTPaginator = resolveComponent(\"TTPaginator\");\n  var _component_TTHeaderCell = resolveComponent(\"TTHeaderCell\");\n  var _component_TTRow = resolveComponent(\"TTRow\");\n  var _component_TTFooterCell = resolveComponent(\"TTFooterCell\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    \"data-scrollselectors\": \".p-treetable-scrollable-body\"\n  }, _ctx.ptmi('root')), [renderSlot(_ctx.$slots, \"default\"), _ctx.loading && _ctx.loadingMode === 'mask' ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('loading')\n  }, _ctx.ptm('loading')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('mask')\n  }, _ctx.ptm('mask')), [renderSlot(_ctx.$slots, \"loadingicon\", {\n    \"class\": normalizeClass(_ctx.cx('loadingIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon ? 'span' : 'SpinnerIcon'), mergeProps({\n      spin: \"\",\n      \"class\": [_ctx.cx('loadingIcon'), _ctx.loadingIcon]\n    }, _ctx.ptm('loadingIcon')), null, 16, [\"class\"]))];\n  })], 16)], 16)) : createCommentVNode(\"\", true), _ctx.$slots.header ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('header')\n  }, _ctx.ptm('header')), [renderSlot(_ctx.$slots, \"header\")], 16)) : createCommentVNode(\"\", true), $options.paginatorTop ? (openBlock(), createBlock(_component_TTPaginator, {\n    key: 2,\n    rows: $data.d_rows,\n    first: $data.d_first,\n    totalRecords: $options.totalRecordsLength,\n    pageLinkSize: _ctx.pageLinkSize,\n    template: _ctx.paginatorTemplate,\n    rowsPerPageOptions: _ctx.rowsPerPageOptions,\n    currentPageReportTemplate: _ctx.currentPageReportTemplate,\n    \"class\": normalizeClass(_ctx.cx('pcPaginator', {\n      position: 'top'\n    })),\n    onPage: _cache[0] || (_cache[0] = function ($event) {\n      return $options.onPage($event);\n    }),\n    alwaysShow: _ctx.alwaysShowPaginator,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.ptm('pcPaginator')\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.paginatorcontainer ? {\n    name: \"container\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorcontainer\", {\n        first: slotProps.first,\n        last: slotProps.last,\n        rows: slotProps.rows,\n        page: slotProps.page,\n        pageCount: slotProps.pageCount,\n        totalRecords: slotProps.totalRecords,\n        firstPageCallback: slotProps.firstPageCallback,\n        lastPageCallback: slotProps.lastPageCallback,\n        prevPageCallback: slotProps.prevPageCallback,\n        nextPageCallback: slotProps.nextPageCallback,\n        rowChangeCallback: slotProps.rowChangeCallback\n      })];\n    }),\n    key: \"0\"\n  } : undefined, _ctx.$slots.paginatorstart ? {\n    name: \"start\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorstart\")];\n    }),\n    key: \"1\"\n  } : undefined, _ctx.$slots.paginatorend ? {\n    name: \"end\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorend\")];\n    }),\n    key: \"2\"\n  } : undefined, _ctx.$slots.paginatorfirstpagelinkicon ? {\n    name: \"firstpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorfirstpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"3\"\n  } : undefined, _ctx.$slots.paginatorprevpagelinkicon ? {\n    name: \"prevpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorprevpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"4\"\n  } : undefined, _ctx.$slots.paginatornextpagelinkicon ? {\n    name: \"nextpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatornextpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"5\"\n  } : undefined, _ctx.$slots.paginatorlastpagelinkicon ? {\n    name: \"lastpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorlastpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"6\"\n  } : undefined, _ctx.$slots.paginatorjumptopagedropdownicon ? {\n    name: \"jumptopagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorjumptopagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"7\"\n  } : undefined, _ctx.$slots.paginatorrowsperpagedropdownicon ? {\n    name: \"rowsperpagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorrowsperpagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"8\"\n  } : undefined]), 1032, [\"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"template\", \"rowsPerPageOptions\", \"currentPageReportTemplate\", \"class\", \"alwaysShow\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('tableContainer'),\n    style: [_ctx.sx('tableContainer'), {\n      maxHeight: _ctx.scrollHeight\n    }]\n  }, _ctx.ptm('tableContainer')), [createElementVNode(\"table\", mergeProps({\n    ref: \"table\",\n    role: \"table\",\n    \"class\": [_ctx.cx('table'), _ctx.tableClass],\n    style: _ctx.tableStyle\n  }, _objectSpread(_objectSpread({}, _ctx.tableProps), _ctx.ptm('table'))), [createElementVNode(\"thead\", mergeProps({\n    \"class\": _ctx.cx('thead'),\n    style: _ctx.sx('thead'),\n    role: \"rowgroup\"\n  }, _ctx.ptm('thead')), [createElementVNode(\"tr\", mergeProps({\n    role: \"row\"\n  }, _ctx.ptm('headerRow')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createBlock(_component_TTHeaderCell, {\n      key: 0,\n      column: col,\n      resizableColumns: _ctx.resizableColumns,\n      sortField: $data.d_sortField,\n      sortOrder: $data.d_sortOrder,\n      multiSortMeta: $data.d_multiSortMeta,\n      sortMode: _ctx.sortMode,\n      onColumnClick: _cache[1] || (_cache[1] = function ($event) {\n        return $options.onColumnHeaderClick($event);\n      }),\n      onColumnResizestart: _cache[2] || (_cache[2] = function ($event) {\n        return $options.onColumnResizeStart($event);\n      }),\n      index: i,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"column\", \"resizableColumns\", \"sortField\", \"sortOrder\", \"multiSortMeta\", \"sortMode\", \"index\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16), $options.hasColumnFilter() ? (openBlock(), createElementBlock(\"tr\", normalizeProps(mergeProps({\n    key: 0\n  }, _ctx.ptm('headerRow'))), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createElementBlock(\"th\", mergeProps({\n      key: 0,\n      \"class\": $options.getFilterColumnHeaderClass(col),\n      style: [$options.columnProp(col, 'style'), $options.columnProp(col, 'filterHeaderStyle')],\n      ref_for: true\n    }, _ctx.ptm('headerCell', $options.ptHeaderCellOptions(col))), [col.children && col.children.filter ? (openBlock(), createBlock(resolveDynamicComponent(col.children.filter), {\n      key: 0,\n      column: col,\n      index: i\n    }, null, 8, [\"column\", \"index\"])) : createCommentVNode(\"\", true)], 16)) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16)) : createCommentVNode(\"\", true)], 16), createElementVNode(\"tbody\", mergeProps({\n    \"class\": _ctx.cx('tbody'),\n    role: \"rowgroup\"\n  }, _ctx.ptm('tbody')), [!$options.empty ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList($options.dataToRender, function (node, index) {\n    return openBlock(), createBlock(_component_TTRow, {\n      key: $options.nodeKey(node),\n      dataKey: _ctx.dataKey,\n      columns: $options.columns,\n      node: node,\n      level: 0,\n      expandedKeys: $data.d_expandedKeys,\n      indentation: _ctx.indentation,\n      selectionMode: _ctx.selectionMode,\n      selectionKeys: _ctx.selectionKeys,\n      ariaSetSize: $options.dataToRender.length,\n      ariaPosInset: index + 1,\n      tabindex: $options.setTabindex(node, index),\n      loadingMode: _ctx.loadingMode,\n      contextMenu: _ctx.contextMenu,\n      contextMenuSelection: _ctx.contextMenuSelection,\n      templates: _ctx.$slots,\n      onNodeToggle: $options.onNodeToggle,\n      onNodeClick: $options.onNodeClick,\n      onCheckboxChange: $options.onCheckboxChange,\n      onRowRightclick: _cache[3] || (_cache[3] = function ($event) {\n        return $options.onRowRightClick($event);\n      }),\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"dataKey\", \"columns\", \"node\", \"expandedKeys\", \"indentation\", \"selectionMode\", \"selectionKeys\", \"ariaSetSize\", \"ariaPosInset\", \"tabindex\", \"loadingMode\", \"contextMenu\", \"contextMenuSelection\", \"templates\", \"onNodeToggle\", \"onNodeClick\", \"onCheckboxChange\", \"unstyled\", \"pt\"]);\n  }), 128)) : (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('emptyMessage')\n  }, _ctx.ptm('emptyMessage')), [createElementVNode(\"td\", mergeProps({\n    colspan: $options.columns.length\n  }, _ctx.ptm('emptyMessageCell')), [renderSlot(_ctx.$slots, \"empty\")], 16, _hoisted_1)], 16))], 16), $options.hasFooter ? (openBlock(), createElementBlock(\"tfoot\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('tfoot'),\n    style: _ctx.sx('tfoot'),\n    role: \"rowgroup\"\n  }, _ctx.ptm('tfoot')), [createElementVNode(\"tr\", mergeProps({\n    role: \"row\"\n  }, _ctx.ptm('footerRow')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createBlock(_component_TTFooterCell, {\n      key: 0,\n      column: col,\n      index: i,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"column\", \"index\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16)], 16)) : createCommentVNode(\"\", true)], 16)], 16), $options.paginatorBottom ? (openBlock(), createBlock(_component_TTPaginator, {\n    key: 3,\n    rows: $data.d_rows,\n    first: $data.d_first,\n    totalRecords: $options.totalRecordsLength,\n    pageLinkSize: _ctx.pageLinkSize,\n    template: _ctx.paginatorTemplate,\n    rowsPerPageOptions: _ctx.rowsPerPageOptions,\n    currentPageReportTemplate: _ctx.currentPageReportTemplate,\n    \"class\": normalizeClass(_ctx.cx('pcPaginator', {\n      position: 'bottom'\n    })),\n    onPage: _cache[4] || (_cache[4] = function ($event) {\n      return $options.onPage($event);\n    }),\n    alwaysShow: _ctx.alwaysShowPaginator,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.ptm('pcPaginator')\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.paginatorcontainer ? {\n    name: \"container\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorcontainer\", {\n        first: slotProps.first,\n        last: slotProps.last,\n        rows: slotProps.rows,\n        page: slotProps.page,\n        pageCount: slotProps.pageCount,\n        totalRecords: slotProps.totalRecords,\n        firstPageCallback: slotProps.firstPageCallback,\n        lastPageCallback: slotProps.lastPageCallback,\n        prevPageCallback: slotProps.prevPageCallback,\n        nextPageCallback: slotProps.nextPageCallback,\n        rowChangeCallback: slotProps.rowChangeCallback\n      })];\n    }),\n    key: \"0\"\n  } : undefined, _ctx.$slots.paginatorstart ? {\n    name: \"start\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorstart\")];\n    }),\n    key: \"1\"\n  } : undefined, _ctx.$slots.paginatorend ? {\n    name: \"end\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorend\")];\n    }),\n    key: \"2\"\n  } : undefined, _ctx.$slots.paginatorfirstpagelinkicon ? {\n    name: \"firstpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorfirstpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"3\"\n  } : undefined, _ctx.$slots.paginatorprevpagelinkicon ? {\n    name: \"prevpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorprevpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"4\"\n  } : undefined, _ctx.$slots.paginatornextpagelinkicon ? {\n    name: \"nextpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatornextpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"5\"\n  } : undefined, _ctx.$slots.paginatorlastpagelinkicon ? {\n    name: \"lastpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorlastpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"6\"\n  } : undefined, _ctx.$slots.paginatorjumptopagedropdownicon ? {\n    name: \"jumptopagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorjumptopagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"7\"\n  } : undefined, _ctx.$slots.paginatorrowsperpagedropdownicon ? {\n    name: \"rowsperpagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorrowsperpagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"8\"\n  } : undefined]), 1032, [\"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"template\", \"rowsPerPageOptions\", \"currentPageReportTemplate\", \"class\", \"alwaysShow\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 4,\n    \"class\": _ctx.cx('footer')\n  }, _ctx.ptm('footer')), [renderSlot(_ctx.$slots, \"footer\")], 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    ref: \"resizeHelper\",\n    \"class\": _ctx.cx('columnResizeIndicator'),\n    style: {\n      \"display\": \"none\"\n    }\n  }, _ctx.ptm('columnResizeIndicator')), null, 16)], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$5","name","BaseComponent","props","value","type","dataKey","String","Function","expandedKeys","selectionKeys","selectionMode","metaKeySelection","Boolean","contextMenu","contextMenuSelection","Object","rows","Number","first","totalRecords","paginator","paginatorPosition","alwaysShowPaginator","paginatorTemplate","pageLinkSize","rowsPerPageOptions","Array","currentPageReportTemplate","lazy","loading","loadingIcon","undefined","loadingMode","rowHover","autoLayout","sortField","sortOrder","defaultSortOrder","multiSortMeta","sortMode","removableSort","filters","filterMode","filterLocale","resizableColumns","columnResizeMode","indentation","showGridlines","scrollable","scrollHeight","size","tableStyle","tableClass","tableProps","style","TreeTableStyle","provide","$pcTreeTable","$parentInstance","script$4","hostName","column","index","data","styleObject","mounted","columnProp","updateStickyPosition","updated","methods","prop","getVNodeProp","getColumnPT","key","_this$$parentInstance","columnMetaData","parent","instance","$props","state","$data","context","frozen","mergeProps","ptm","concat","ptmo","getColumnProp","pt","align","pos","next","getNextElementSibling","$el","getOuterWidth","parseFloat","right","insetInlineEnd","_pos","prev","getPreviousElementSibling","left","insetInlineStart","computed","containerClass","cx","containerStyle","bodyStyle","columnStyle","openBlock","createElementBlock","$options","role","_objectSpread$5","children","footer","createBlock","resolveDynamicComponent","_ctx","toDisplayString","createCommentVNode","_hoisted_1$4","script$3","emits","sorted","isColumnSorted","resizable","filterRow","parentElement","nextElementSibling","getIndex","onClick","event","$emit","originalEvent","onKeyDown","code","currentTarget","nodeName","getAttribute","preventDefault","onResizeStart","getMultiSortMetaIndex","i","length","meta","field","isMultiSorted","headerStyle","sortState","metaIndex","order","sortableColumnIcon","_this$sortState","SortAltIcon","SortAmountUpAltIcon","SortAmountDownIcon","ariaSort","_this$sortState2","components","Badge","_cache","apply","arguments","onKeydown","tabindex","_objectSpread$4","onMousedown","createElementVNode","header","normalizeProps","sorticon","_component_Badge","script$2","node","level","leaf","expanded","checked","partialChecked","templates","toggle","selectable","rowSelectionMode","selected","$parent","getColumnCheckboxPT","resolveFieldData","resolveFieldData$1","rowData","toggleCheckbox","togglerStyle","marginLeft","visibility","checkboxSelectionMode","Checkbox","ChevronRightIcon","ChevronDownIcon","CheckIcon","MinusIcon","SpinnerIcon","directives","ripple","Ripple","_objectSpread$3","withDirectives","Fragment","_component_SpinnerIcon","spin","rowtoggleicon","normalizeClass","rowtogglericon","expandedIcon","collapsedIcon","_directive_ripple","_component_Checkbox","modelValue","binary","disabled","onChange","indeterminate","unstyled","icon","withCtx","slotProps","body","createTextVNode","_hoisted_1$2","script$1","parentNode","columns","ariaSetSize","ariaPosInset","nodeTouched","col","isClickable","target","tagName","setTabIndexForSelectionMode","onRowRightClick","onTouchEnd","nodeKey","item","onArrowDownKey","onArrowUpKey","onArrowLeftKey","onArrowRightKey","onHomeKey","onEndKey","onEnterKey","onTabKey","focusRowChange","previousElementSibling","_this","ishiddenIcon","findSingle","togglerElement","$refs","click","$nextTick","findBeforeClickableNode","findFirstElement","focus","nodes","find","_toConsumableArray$1","hasSelectedRow","some","row","forEach","tabIndex","selectedNodes","filter","firstFocusableRow","currentFocusedRow","prevNode","prevNodeButton","querySelector","_selectionKeys","_objectSpread$2","_check","propagateDown","check","_iterator","_createForOfIteratorHelper$1","_step","s","n","done","child","err","e","f","propagateUp","checkedChildCount","childPartialSelected","_iterator2","_step2","onCheckboxChange","_iterator3","_step3","elements","every","element","styleClass","isSelectedWithContextMenu","equals","getAriaSelected","ptmOptions","TTBodyCell","ref","onTouchend","onContextmenu","renderList","_component_TTBodyCell","onNodeToggle","$event","onCheckboxToggle","childNode","_component_TreeTableRow","indexOf","onNodeClick","onRowRightclick","script","inheritAttrs","$columns","d_columns","d_expandedKeys","d_first","d_rows","d_sortField","d_sortOrder","d_multiSortMeta","_toConsumableArray","hasASelectedNode","HelperSet","documentColumnResizeListener","documentColumnResizeEndListener","lastResizeHelperX","resizeColumnElement","watch","newValue","beforeUnmount","destroyStyleElement","clear","ptHeaderCellOptions","_objectSpread$1","metaSelection","handleSelectionWithMetaKey","handleSelectionWithoutMetaKey","metaKey","ctrlKey","isNodeSelected","isSingleSelectionMode","isMultipleSelectionMode","clearSelection","onPage","pageEvent","createLazyLoadEvent","pageCount","page","resetPage","getFilterColumnHeaderClass","onColumnHeaderClick","targetNode","columnField","closest","addMultiSortField","findIndex","splice","push","sortSingle","sortNodesSingle","_nodes","comparer","localeComparator","sort","node1","node2","value1","value2","sortMultiple","sortNodesMultiple","_this2","multisortField","filteredNodes","strict","_createForOfIteratorHelper","copyNode","localMatch","globalMatch","j","filterField","prototype","hasOwnProperty","call","filterMatchMode","filterValue","filterConstraint","FilterService","paramsWithoutNode","findFilteredNodes","isFilterMatched","hasGlobalFilter","copyNodeForGlobal","_filterValue","_filterConstraint","globalFilterParamsWithoutNode","matches","filterEvent","filteredValue","matched","childNodes","copyChildNode","_ref","dataFieldValue","isNodeLeaf","_this3","filterMatchModes","hasFilters","onColumnResizeStart","containerLeft","getOffset","columnResizing","pageX","scrollLeft","bindColumnResizeEvents","onColumnResize","setAttribute","isUnstyled","addStyle","resizeHelper","height","offsetHeight","top","display","onColumnResizeEnd","delta","isRTL","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextColumnWidth","resizeTableCells","tableWidth","table","updateTableWidth","el","width","resizeColumn","removeAttribute","unbindColumnResizeEvents","colIndex","widths","headers","createStyleElement","innerHTML","selector","$attrSelector","colWidth","styleElement","_this4","document","addEventListener","removeEventListener","onColumnKeyDown","hasColumnFilter","keys","constructor","getItemLabel","_this$$primevue","createElement","$primevue","config","csp","nonce","head","appendChild","removeChild","setTabindex","get","processedData","dataToRender","slice","empty","hasFooter","_iterator4","_step4","paginatorTop","paginatorBottom","singleSelectionMode","multipleSelectionMode","totalRecordsLength","TTRow","TTPaginator","Paginator","TTHeaderCell","TTFooterCell","ptmi","renderSlot","$slots","_component_TTPaginator","template","position","alwaysShow","paginatorcontainer","fn","last","firstPageCallback","lastPageCallback","prevPageCallback","nextPageCallback","rowChangeCallback","paginatorstart","paginatorend","paginatorfirstpagelinkicon","paginatorprevpagelinkicon","paginatornextpagelinkicon","paginatorlastpagelinkicon","paginatorjumptopagedropdownicon","paginatorrowsperpagedropdownicon","sx","maxHeight","_objectSpread","_component_TTHeaderCell","onColumnClick","onColumnResizestart","_component_TTRow","colspan","_hoisted_1","_component_TTFooterCell"],"sources":["../../src/treetable/BaseTreeTable.vue","../../src/treetable/FooterCell.vue","../../src/treetable/FooterCell.vue?vue&type=template&id=0349d2d9&lang.js","../../src/treetable/HeaderCell.vue","../../src/treetable/HeaderCell.vue?vue&type=template&id=6c50ca8c&lang.js","../../src/treetable/BodyCell.vue","../../src/treetable/BodyCell.vue?vue&type=template&id=ed38a718&lang.js","../../src/treetable/TreeTableRow.vue","../../src/treetable/TreeTableRow.vue?vue&type=template&id=631929fa&lang.js","../../src/treetable/TreeTable.vue","../../src/treetable/TreeTable.vue?vue&type=template&id=1c850030&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TreeTableStyle from 'primevue/treetable/style';\n\nexport default {\n    name: 'BaseTreeTable',\n    extends: BaseComponent,\n    props: {\n        value: {\n            type: null,\n            default: null\n        },\n        dataKey: {\n            type: [String, Function],\n            default: 'key'\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: false\n        },\n        contextMenu: {\n            type: Boolean,\n            default: false\n        },\n        contextMenuSelection: {\n            type: Object,\n            default: null\n        },\n        rows: {\n            type: Number,\n            default: 0\n        },\n        first: {\n            type: Number,\n            default: 0\n        },\n        totalRecords: {\n            type: Number,\n            default: 0\n        },\n        paginator: {\n            type: Boolean,\n            default: false\n        },\n        paginatorPosition: {\n            type: String,\n            default: 'bottom'\n        },\n        alwaysShowPaginator: {\n            type: Boolean,\n            default: true\n        },\n        paginatorTemplate: {\n            type: String,\n            default: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown'\n        },\n        pageLinkSize: {\n            type: Number,\n            default: 5\n        },\n        rowsPerPageOptions: {\n            type: Array,\n            default: null\n        },\n        currentPageReportTemplate: {\n            type: String,\n            default: '({currentPage} of {totalPages})'\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: undefined\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        rowHover: {\n            type: Boolean,\n            default: false\n        },\n        autoLayout: {\n            type: Boolean,\n            default: false\n        },\n        sortField: {\n            type: [String, Function],\n            default: null\n        },\n        sortOrder: {\n            type: Number,\n            default: null\n        },\n        defaultSortOrder: {\n            type: Number,\n            default: 1\n        },\n        multiSortMeta: {\n            type: Array,\n            default: null\n        },\n        sortMode: {\n            type: String,\n            default: 'single'\n        },\n        removableSort: {\n            type: Boolean,\n            default: false\n        },\n        filters: {\n            type: Object,\n            default: null\n        },\n        filterMode: {\n            type: String,\n            default: 'lenient'\n        },\n        filterLocale: {\n            type: String,\n            default: undefined\n        },\n        resizableColumns: {\n            type: Boolean,\n            default: false\n        },\n        columnResizeMode: {\n            type: String,\n            default: 'fit'\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        showGridlines: {\n            type: Boolean,\n            default: false\n        },\n        scrollable: {\n            type: Boolean,\n            default: false\n        },\n        scrollHeight: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        },\n        tableStyle: {\n            type: null,\n            default: null\n        },\n        tableClass: {\n            type: [String, Object],\n            default: null\n        },\n        tableProps: {\n            type: Object,\n            default: null\n        }\n    },\n    style: TreeTableStyle,\n    provide() {\n        return {\n            $pcTreeTable: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <td :style=\"containerStyle\" :class=\"containerClass\" role=\"cell\" v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('footerCell') }\" :data-p-frozen-column=\"columnProp('frozen')\">\n        <component v-if=\"column.children && column.children.footer\" :is=\"column.children.footer\" :column=\"column\" />\n        <span v-if=\"columnProp('footer')\" :class=\"cx('columnFooter')\" v-bind=\"getColumnPT('columnFooter')\">{{ columnProp('footer') }}</span>\n    </td>\n</template>\n\n<script>\nimport { getNextElementSibling, getOuterWidth, getPreviousElementSibling } from '@primeuix/utils/dom';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'FooterCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    props: {\n        column: {\n            type: Object,\n            default: null\n        },\n        index: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        columnProp(prop) {\n            return getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    frozen: this.columnProp('frozen'),\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let pos = 0;\n                    let next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.insetInlineEnd = pos + 'px';\n                } else {\n                    let pos = 0;\n                    let prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.insetInlineStart = pos + 'px';\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('footerClass'), this.columnProp('class'), this.cx('footerCell')];\n        },\n        containerStyle() {\n            let bodyStyle = this.columnProp('footerStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n        }\n    }\n};\n</script>\n","<template>\n    <td :style=\"containerStyle\" :class=\"containerClass\" role=\"cell\" v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('footerCell') }\" :data-p-frozen-column=\"columnProp('frozen')\">\n        <component v-if=\"column.children && column.children.footer\" :is=\"column.children.footer\" :column=\"column\" />\n        <span v-if=\"columnProp('footer')\" :class=\"cx('columnFooter')\" v-bind=\"getColumnPT('columnFooter')\">{{ columnProp('footer') }}</span>\n    </td>\n</template>\n\n<script>\nimport { getNextElementSibling, getOuterWidth, getPreviousElementSibling } from '@primeuix/utils/dom';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'FooterCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    props: {\n        column: {\n            type: Object,\n            default: null\n        },\n        index: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        columnProp(prop) {\n            return getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    frozen: this.columnProp('frozen'),\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let pos = 0;\n                    let next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.insetInlineEnd = pos + 'px';\n                } else {\n                    let pos = 0;\n                    let prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.insetInlineStart = pos + 'px';\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('footerClass'), this.columnProp('class'), this.cx('footerCell')];\n        },\n        containerStyle() {\n            let bodyStyle = this.columnProp('footerStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n        }\n    }\n};\n</script>\n","<template>\n    <th\n        :class=\"containerClass\"\n        :style=\"[containerStyle]\"\n        @click=\"onClick\"\n        @keydown=\"onKeyDown\"\n        :tabindex=\"columnProp('sortable') ? '0' : null\"\n        :aria-sort=\"ariaSort\"\n        role=\"columnheader\"\n        v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('headerCell') }\"\n        :data-p-sortable-column=\"columnProp('sortable')\"\n        :data-p-resizable-column=\"resizableColumns\"\n        :data-p-sorted=\"isColumnSorted()\"\n        :data-p-frozen-column=\"columnProp('frozen')\"\n    >\n        <span v-if=\"resizableColumns && !columnProp('frozen')\" :class=\"cx('columnResizer')\" @mousedown=\"onResizeStart\" v-bind=\"getColumnPT('columnResizer')\"></span>\n        <div :class=\"cx('columnHeaderContent')\" v-bind=\"getColumnPT('columnHeaderContent')\">\n            <component v-if=\"column.children && column.children.header\" :is=\"column.children.header\" :column=\"column\" />\n            <span v-if=\"columnProp('header')\" :class=\"cx('columnTitle')\" v-bind=\"getColumnPT('columnTitle')\">{{ columnProp('header') }}</span>\n            <span v-if=\"columnProp('sortable')\" v-bind=\"getColumnPT('sort')\">\n                <component :is=\"(column.children && column.children.sorticon) || sortableColumnIcon\" :sorted=\"sortState.sorted\" :sortOrder=\"sortState.sortOrder\" :class=\"cx('sortIcon')\" v-bind=\"getColumnPT('sortIcon')\" />\n            </span>\n            <Badge v-if=\"isMultiSorted()\" :class=\"cx('pcSortBadge')\" v-bind=\"getColumnPT('pcSortBadge')\" :value=\"getMultiSortMetaIndex() + 1\" size=\"small\" />\n        </div>\n    </th>\n</template>\n\n<script>\nimport { getAttribute, getIndex, getNextElementSibling, getOuterWidth, getPreviousElementSibling } from '@primeuix/utils/dom';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport SortAltIcon from '@primevue/icons/sortalt';\nimport SortAmountDownIcon from '@primevue/icons/sortamountdown';\nimport SortAmountUpAltIcon from '@primevue/icons/sortamountupalt';\nimport Badge from 'primevue/badge';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'HeaderCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['column-click', 'column-resizestart'],\n    props: {\n        column: {\n            type: Object,\n            default: null\n        },\n        resizableColumns: {\n            type: Boolean,\n            default: false\n        },\n        sortField: {\n            type: [String, Function],\n            default: null\n        },\n        sortOrder: {\n            type: Number,\n            default: null\n        },\n        multiSortMeta: {\n            type: Array,\n            default: null\n        },\n        sortMode: {\n            type: String,\n            default: 'single'\n        },\n        index: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        columnProp(prop) {\n            return getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    sorted: this.isColumnSorted(),\n                    frozen: this.$parentInstance.scrollable && this.columnProp('frozen'),\n                    resizable: this.resizableColumns,\n                    scrollable: this.$parentInstance.scrollable,\n                    showGridlines: this.$parentInstance.showGridlines,\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let pos = 0;\n                    let next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.insetInlineEnd = pos + 'px';\n                } else {\n                    let pos = 0;\n                    let prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.insetInlineStart = pos + 'px';\n                }\n\n                let filterRow = this.$el.parentElement.nextElementSibling;\n\n                if (filterRow) {\n                    let index = getIndex(this.$el);\n\n                    filterRow.children[index].style.left = this.styleObject.left;\n                    filterRow.children[index].style.right = this.styleObject.right;\n                }\n            }\n        },\n        onClick(event) {\n            this.$emit('column-click', { originalEvent: event, column: this.column });\n        },\n        onKeyDown(event) {\n            if ((event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && event.currentTarget.nodeName === 'TH' && getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n                this.$emit('column-click', { originalEvent: event, column: this.column });\n\n                event.preventDefault();\n            }\n        },\n        onResizeStart(event) {\n            this.$emit('column-resizestart', event);\n        },\n        getMultiSortMetaIndex() {\n            let index = -1;\n\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                let meta = this.multiSortMeta[i];\n\n                if (meta.field === this.columnProp('field') || meta.field === this.columnProp('sortField')) {\n                    index = i;\n                    break;\n                }\n            }\n\n            return index;\n        },\n        isMultiSorted() {\n            return this.columnProp('sortable') && this.getMultiSortMetaIndex() > -1;\n        },\n        isColumnSorted() {\n            return this.sortMode === 'single' ? this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField')) : this.isMultiSorted();\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('headerClass'), this.columnProp('class'), this.cx('headerCell')];\n        },\n        containerStyle() {\n            let headerStyle = this.columnProp('headerStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, headerStyle, this.styleObject] : [columnStyle, headerStyle];\n        },\n        sortState() {\n            let sorted = false;\n            let sortOrder = null;\n\n            if (this.sortMode === 'single') {\n                sorted = this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField'));\n                sortOrder = sorted ? this.sortOrder : 0;\n            } else if (this.sortMode === 'multiple') {\n                let metaIndex = this.getMultiSortMetaIndex();\n\n                if (metaIndex > -1) {\n                    sorted = true;\n                    sortOrder = this.multiSortMeta[metaIndex].order;\n                }\n            }\n\n            return {\n                sorted,\n                sortOrder\n            };\n        },\n        sortableColumnIcon() {\n            const { sorted, sortOrder } = this.sortState;\n\n            if (!sorted) return SortAltIcon;\n            else if (sorted && sortOrder > 0) return SortAmountUpAltIcon;\n            else if (sorted && sortOrder < 0) return SortAmountDownIcon;\n\n            return null;\n        },\n        ariaSort() {\n            if (this.columnProp('sortable')) {\n                const { sorted, sortOrder } = this.sortState;\n\n                if (sorted && sortOrder < 0) return 'descending';\n                else if (sorted && sortOrder > 0) return 'ascending';\n                else return 'none';\n            } else {\n                return null;\n            }\n        }\n    },\n    components: {\n        Badge,\n        SortAltIcon: SortAltIcon,\n        SortAmountUpAltIcon: SortAmountUpAltIcon,\n        SortAmountDownIcon: SortAmountDownIcon\n    }\n};\n</script>\n","<template>\n    <th\n        :class=\"containerClass\"\n        :style=\"[containerStyle]\"\n        @click=\"onClick\"\n        @keydown=\"onKeyDown\"\n        :tabindex=\"columnProp('sortable') ? '0' : null\"\n        :aria-sort=\"ariaSort\"\n        role=\"columnheader\"\n        v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('headerCell') }\"\n        :data-p-sortable-column=\"columnProp('sortable')\"\n        :data-p-resizable-column=\"resizableColumns\"\n        :data-p-sorted=\"isColumnSorted()\"\n        :data-p-frozen-column=\"columnProp('frozen')\"\n    >\n        <span v-if=\"resizableColumns && !columnProp('frozen')\" :class=\"cx('columnResizer')\" @mousedown=\"onResizeStart\" v-bind=\"getColumnPT('columnResizer')\"></span>\n        <div :class=\"cx('columnHeaderContent')\" v-bind=\"getColumnPT('columnHeaderContent')\">\n            <component v-if=\"column.children && column.children.header\" :is=\"column.children.header\" :column=\"column\" />\n            <span v-if=\"columnProp('header')\" :class=\"cx('columnTitle')\" v-bind=\"getColumnPT('columnTitle')\">{{ columnProp('header') }}</span>\n            <span v-if=\"columnProp('sortable')\" v-bind=\"getColumnPT('sort')\">\n                <component :is=\"(column.children && column.children.sorticon) || sortableColumnIcon\" :sorted=\"sortState.sorted\" :sortOrder=\"sortState.sortOrder\" :class=\"cx('sortIcon')\" v-bind=\"getColumnPT('sortIcon')\" />\n            </span>\n            <Badge v-if=\"isMultiSorted()\" :class=\"cx('pcSortBadge')\" v-bind=\"getColumnPT('pcSortBadge')\" :value=\"getMultiSortMetaIndex() + 1\" size=\"small\" />\n        </div>\n    </th>\n</template>\n\n<script>\nimport { getAttribute, getIndex, getNextElementSibling, getOuterWidth, getPreviousElementSibling } from '@primeuix/utils/dom';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport SortAltIcon from '@primevue/icons/sortalt';\nimport SortAmountDownIcon from '@primevue/icons/sortamountdown';\nimport SortAmountUpAltIcon from '@primevue/icons/sortamountupalt';\nimport Badge from 'primevue/badge';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'HeaderCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['column-click', 'column-resizestart'],\n    props: {\n        column: {\n            type: Object,\n            default: null\n        },\n        resizableColumns: {\n            type: Boolean,\n            default: false\n        },\n        sortField: {\n            type: [String, Function],\n            default: null\n        },\n        sortOrder: {\n            type: Number,\n            default: null\n        },\n        multiSortMeta: {\n            type: Array,\n            default: null\n        },\n        sortMode: {\n            type: String,\n            default: 'single'\n        },\n        index: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        columnProp(prop) {\n            return getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    sorted: this.isColumnSorted(),\n                    frozen: this.$parentInstance.scrollable && this.columnProp('frozen'),\n                    resizable: this.resizableColumns,\n                    scrollable: this.$parentInstance.scrollable,\n                    showGridlines: this.$parentInstance.showGridlines,\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let pos = 0;\n                    let next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.insetInlineEnd = pos + 'px';\n                } else {\n                    let pos = 0;\n                    let prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.insetInlineStart = pos + 'px';\n                }\n\n                let filterRow = this.$el.parentElement.nextElementSibling;\n\n                if (filterRow) {\n                    let index = getIndex(this.$el);\n\n                    filterRow.children[index].style.left = this.styleObject.left;\n                    filterRow.children[index].style.right = this.styleObject.right;\n                }\n            }\n        },\n        onClick(event) {\n            this.$emit('column-click', { originalEvent: event, column: this.column });\n        },\n        onKeyDown(event) {\n            if ((event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && event.currentTarget.nodeName === 'TH' && getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n                this.$emit('column-click', { originalEvent: event, column: this.column });\n\n                event.preventDefault();\n            }\n        },\n        onResizeStart(event) {\n            this.$emit('column-resizestart', event);\n        },\n        getMultiSortMetaIndex() {\n            let index = -1;\n\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                let meta = this.multiSortMeta[i];\n\n                if (meta.field === this.columnProp('field') || meta.field === this.columnProp('sortField')) {\n                    index = i;\n                    break;\n                }\n            }\n\n            return index;\n        },\n        isMultiSorted() {\n            return this.columnProp('sortable') && this.getMultiSortMetaIndex() > -1;\n        },\n        isColumnSorted() {\n            return this.sortMode === 'single' ? this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField')) : this.isMultiSorted();\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('headerClass'), this.columnProp('class'), this.cx('headerCell')];\n        },\n        containerStyle() {\n            let headerStyle = this.columnProp('headerStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, headerStyle, this.styleObject] : [columnStyle, headerStyle];\n        },\n        sortState() {\n            let sorted = false;\n            let sortOrder = null;\n\n            if (this.sortMode === 'single') {\n                sorted = this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField'));\n                sortOrder = sorted ? this.sortOrder : 0;\n            } else if (this.sortMode === 'multiple') {\n                let metaIndex = this.getMultiSortMetaIndex();\n\n                if (metaIndex > -1) {\n                    sorted = true;\n                    sortOrder = this.multiSortMeta[metaIndex].order;\n                }\n            }\n\n            return {\n                sorted,\n                sortOrder\n            };\n        },\n        sortableColumnIcon() {\n            const { sorted, sortOrder } = this.sortState;\n\n            if (!sorted) return SortAltIcon;\n            else if (sorted && sortOrder > 0) return SortAmountUpAltIcon;\n            else if (sorted && sortOrder < 0) return SortAmountDownIcon;\n\n            return null;\n        },\n        ariaSort() {\n            if (this.columnProp('sortable')) {\n                const { sorted, sortOrder } = this.sortState;\n\n                if (sorted && sortOrder < 0) return 'descending';\n                else if (sorted && sortOrder > 0) return 'ascending';\n                else return 'none';\n            } else {\n                return null;\n            }\n        }\n    },\n    components: {\n        Badge,\n        SortAltIcon: SortAltIcon,\n        SortAmountUpAltIcon: SortAmountUpAltIcon,\n        SortAmountDownIcon: SortAmountDownIcon\n    }\n};\n</script>\n","<template>\n    <td :style=\"containerStyle\" :class=\"containerClass\" role=\"cell\" v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('bodyCell') }\" :data-p-frozen-column=\"columnProp('frozen')\">\n        <div :class=\"cx('bodyCellContent')\" v-bind=\"getColumnPT('bodyCellContent')\">\n            <button v-if=\"columnProp('expander')\" v-ripple type=\"button\" :class=\"cx('nodeToggleButton')\" @click=\"toggle\" :style=\"togglerStyle\" tabindex=\"-1\" v-bind=\"getColumnPT('nodeToggleButton')\" data-pc-group-section=\"rowactionbutton\">\n                <template v-if=\"node.loading && loadingMode === 'icon'\">\n                    <component v-if=\"templates['nodetoggleicon']\" :is=\"templates['nodetoggleicon']\" />\n                    <!-- TODO: Deprecated since v4.0-->\n                    <component v-if=\"templates['nodetogglericon']\" :is=\"templates['nodetogglericon']\" />\n                    <SpinnerIcon v-else spin v-bind=\"ptm('nodetoggleicon')\" />\n                </template>\n                <template v-else>\n                    <component v-if=\"column.children && column.children.rowtoggleicon\" :is=\"column.children.rowtoggleicon\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <!-- TODO: Deprecated since v4.0-->\n                    <component v-if=\"column.children && column.children.rowtogglericon\" :is=\"column.children.rowtogglericon\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <component v-else-if=\"expanded\" :is=\"node.expandedIcon ? 'span' : 'ChevronDownIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getColumnPT('nodeToggleIcon')\" />\n                    <component v-else :is=\"node.collapsedIcon ? 'span' : 'ChevronRightIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getColumnPT('nodeToggleIcon')\" />\n                </template>\n            </button>\n            <Checkbox\n                v-if=\"checkboxSelectionMode && columnProp('expander')\"\n                :modelValue=\"checked\"\n                :binary=\"true\"\n                :class=\"cx('pcNodeCheckbox')\"\n                :disabled=\"node.selectable === false\"\n                @change=\"toggleCheckbox\"\n                :tabindex=\"-1\"\n                :indeterminate=\"partialChecked\"\n                :unstyled=\"unstyled\"\n                :pt=\"getColumnCheckboxPT('pcNodeCheckbox')\"\n                :data-p-partialchecked=\"partialChecked\"\n            >\n                <template #icon=\"slotProps\">\n                    <component v-if=\"templates['checkboxicon']\" :is=\"templates['checkboxicon']\" :checked=\"slotProps.checked\" :partialChecked=\"partialChecked\" :class=\"slotProps.class\" />\n                </template>\n            </Checkbox>\n            <component v-if=\"column.children && column.children.body\" :is=\"column.children.body\" :node=\"node\" :column=\"column\" />\n            <template v-else>{{ resolveFieldData(node.data, columnProp('field')) }}</template>\n        </div>\n    </td>\n</template>\n\n<script>\nimport { getNextElementSibling, getOuterWidth, getPreviousElementSibling } from '@primeuix/utils/dom';\nimport { resolveFieldData } from '@primeuix/utils/object';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'BodyCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['node-toggle', 'checkbox-toggle'],\n    props: {\n        node: {\n            type: Object,\n            default: null\n        },\n        column: {\n            type: Object,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        leaf: {\n            type: Boolean,\n            default: false\n        },\n        expanded: {\n            type: Boolean,\n            default: false\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        checked: {\n            type: Boolean,\n            default: false\n        },\n        partialChecked: {\n            type: Boolean,\n            default: false\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        index: {\n            type: Number,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        columnProp(prop) {\n            return getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n                    selected: this.$parent.selected,\n                    frozen: this.columnProp('frozen'),\n                    scrollable: this.$parentInstance.scrollable,\n                    showGridlines: this.$parentInstance.showGridlines,\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo\n        },\n        getColumnCheckboxPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    checked: this.checked,\n                    partialChecked: this.partialChecked\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let pos = 0;\n                    let next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.insetInlineEnd = pos + 'px';\n                } else {\n                    let pos = 0;\n                    let prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.insetInlineStart = pos + 'px';\n                }\n            }\n        },\n        resolveFieldData(rowData, field) {\n            return resolveFieldData(rowData, field);\n        },\n        toggleCheckbox() {\n            this.$emit('checkbox-toggle');\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('bodyClass'), this.columnProp('class'), this.cx('bodyCell')];\n        },\n        containerStyle() {\n            let bodyStyle = this.columnProp('bodyStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n        },\n        togglerStyle() {\n            return {\n                marginLeft: this.level * this.indentation + 'rem',\n                visibility: this.leaf ? 'hidden' : 'visible'\n            };\n        },\n        checkboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        }\n    },\n    components: {\n        Checkbox,\n        ChevronRightIcon,\n        ChevronDownIcon,\n        CheckIcon,\n        MinusIcon,\n        SpinnerIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <td :style=\"containerStyle\" :class=\"containerClass\" role=\"cell\" v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('bodyCell') }\" :data-p-frozen-column=\"columnProp('frozen')\">\n        <div :class=\"cx('bodyCellContent')\" v-bind=\"getColumnPT('bodyCellContent')\">\n            <button v-if=\"columnProp('expander')\" v-ripple type=\"button\" :class=\"cx('nodeToggleButton')\" @click=\"toggle\" :style=\"togglerStyle\" tabindex=\"-1\" v-bind=\"getColumnPT('nodeToggleButton')\" data-pc-group-section=\"rowactionbutton\">\n                <template v-if=\"node.loading && loadingMode === 'icon'\">\n                    <component v-if=\"templates['nodetoggleicon']\" :is=\"templates['nodetoggleicon']\" />\n                    <!-- TODO: Deprecated since v4.0-->\n                    <component v-if=\"templates['nodetogglericon']\" :is=\"templates['nodetogglericon']\" />\n                    <SpinnerIcon v-else spin v-bind=\"ptm('nodetoggleicon')\" />\n                </template>\n                <template v-else>\n                    <component v-if=\"column.children && column.children.rowtoggleicon\" :is=\"column.children.rowtoggleicon\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <!-- TODO: Deprecated since v4.0-->\n                    <component v-if=\"column.children && column.children.rowtogglericon\" :is=\"column.children.rowtogglericon\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <component v-else-if=\"expanded\" :is=\"node.expandedIcon ? 'span' : 'ChevronDownIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getColumnPT('nodeToggleIcon')\" />\n                    <component v-else :is=\"node.collapsedIcon ? 'span' : 'ChevronRightIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getColumnPT('nodeToggleIcon')\" />\n                </template>\n            </button>\n            <Checkbox\n                v-if=\"checkboxSelectionMode && columnProp('expander')\"\n                :modelValue=\"checked\"\n                :binary=\"true\"\n                :class=\"cx('pcNodeCheckbox')\"\n                :disabled=\"node.selectable === false\"\n                @change=\"toggleCheckbox\"\n                :tabindex=\"-1\"\n                :indeterminate=\"partialChecked\"\n                :unstyled=\"unstyled\"\n                :pt=\"getColumnCheckboxPT('pcNodeCheckbox')\"\n                :data-p-partialchecked=\"partialChecked\"\n            >\n                <template #icon=\"slotProps\">\n                    <component v-if=\"templates['checkboxicon']\" :is=\"templates['checkboxicon']\" :checked=\"slotProps.checked\" :partialChecked=\"partialChecked\" :class=\"slotProps.class\" />\n                </template>\n            </Checkbox>\n            <component v-if=\"column.children && column.children.body\" :is=\"column.children.body\" :node=\"node\" :column=\"column\" />\n            <template v-else>{{ resolveFieldData(node.data, columnProp('field')) }}</template>\n        </div>\n    </td>\n</template>\n\n<script>\nimport { getNextElementSibling, getOuterWidth, getPreviousElementSibling } from '@primeuix/utils/dom';\nimport { resolveFieldData } from '@primeuix/utils/object';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'BodyCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['node-toggle', 'checkbox-toggle'],\n    props: {\n        node: {\n            type: Object,\n            default: null\n        },\n        column: {\n            type: Object,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        leaf: {\n            type: Boolean,\n            default: false\n        },\n        expanded: {\n            type: Boolean,\n            default: false\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        checked: {\n            type: Boolean,\n            default: false\n        },\n        partialChecked: {\n            type: Boolean,\n            default: false\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        index: {\n            type: Number,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        columnProp(prop) {\n            return getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n                    selected: this.$parent.selected,\n                    frozen: this.columnProp('frozen'),\n                    scrollable: this.$parentInstance.scrollable,\n                    showGridlines: this.$parentInstance.showGridlines,\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo\n        },\n        getColumnCheckboxPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    checked: this.checked,\n                    partialChecked: this.partialChecked\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let pos = 0;\n                    let next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        pos = getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.insetInlineEnd = pos + 'px';\n                } else {\n                    let pos = 0;\n                    let prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        pos = getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.insetInlineStart = pos + 'px';\n                }\n            }\n        },\n        resolveFieldData(rowData, field) {\n            return resolveFieldData(rowData, field);\n        },\n        toggleCheckbox() {\n            this.$emit('checkbox-toggle');\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('bodyClass'), this.columnProp('class'), this.cx('bodyCell')];\n        },\n        containerStyle() {\n            let bodyStyle = this.columnProp('bodyStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n        },\n        togglerStyle() {\n            return {\n                marginLeft: this.level * this.indentation + 'rem',\n                visibility: this.leaf ? 'hidden' : 'visible'\n            };\n        },\n        checkboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        }\n    },\n    components: {\n        Checkbox,\n        ChevronRightIcon,\n        ChevronDownIcon,\n        CheckIcon,\n        MinusIcon,\n        SpinnerIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <tr\n        ref=\"node\"\n        :class=\"containerClass\"\n        :style=\"node.style\"\n        :tabindex=\"tabindex\"\n        role=\"row\"\n        :aria-expanded=\"node.children && node.children.length ? expanded : undefined\"\n        :aria-level=\"level + 1\"\n        :aria-setsize=\"ariaSetSize\"\n        :aria-posinset=\"ariaPosInset\"\n        :aria-selected=\"getAriaSelected\"\n        :aria-checked=\"checked || undefined\"\n        @click=\"onClick\"\n        @keydown=\"onKeyDown\"\n        @touchend=\"onTouchEnd\"\n        @contextmenu=\"onRowRightClick\"\n        v-bind=\"ptm('row', ptmOptions)\"\n        :data-p-selected=\"selected\"\n        :data-p-selected-contextmenu=\"contextMenuSelection && isSelectedWithContextMenu\"\n    >\n        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n            <TTBodyCell\n                v-if=\"!columnProp(col, 'hidden')\"\n                :column=\"col\"\n                :node=\"node\"\n                :level=\"level\"\n                :leaf=\"leaf\"\n                :indentation=\"indentation\"\n                :expanded=\"expanded\"\n                :selectionMode=\"selectionMode\"\n                :checked=\"checked\"\n                :partialChecked=\"partialChecked\"\n                :templates=\"templates\"\n                @node-toggle=\"$emit('node-toggle', $event)\"\n                @checkbox-toggle=\"toggleCheckbox\"\n                :index=\"i\"\n                :loadingMode=\"loadingMode\"\n                :unstyled=\"unstyled\"\n                :pt=\"pt\"\n            ></TTBodyCell>\n        </template>\n    </tr>\n    <template v-if=\"expanded && node.children && node.children.length\">\n        <TreeTableRow\n            v-for=\"childNode of node.children\"\n            :key=\"nodeKey(childNode)\"\n            :dataKey=\"dataKey\"\n            :columns=\"columns\"\n            :node=\"childNode\"\n            :parentNode=\"node\"\n            :level=\"level + 1\"\n            :expandedKeys=\"expandedKeys\"\n            :selectionMode=\"selectionMode\"\n            :selectionKeys=\"selectionKeys\"\n            :contextMenu=\"contextMenu\"\n            :contextMenuSelection=\"contextMenuSelection\"\n            :indentation=\"indentation\"\n            :ariaPosInset=\"node.children.indexOf(childNode) + 1\"\n            :ariaSetSize=\"node.children.length\"\n            :templates=\"templates\"\n            @node-toggle=\"$emit('node-toggle', $event)\"\n            @node-click=\"$emit('node-click', $event)\"\n            @row-rightclick=\"$emit('row-rightclick', $event)\"\n            @checkbox-change=\"onCheckboxChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"pt\"\n        />\n    </template>\n</template>\n\n<script>\nimport { find, findSingle, focus, getAttribute, isClickable } from '@primeuix/utils/dom';\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport BodyCell from './BodyCell.vue';\n\nexport default {\n    name: 'TreeTableRow',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['node-click', 'node-toggle', 'checkbox-change', 'nodeClick', 'nodeToggle', 'checkboxChange', 'row-rightclick', 'rowRightclick'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        dataKey: {\n            type: [String, Function],\n            default: 'key'\n        },\n        parentNode: {\n            type: null,\n            default: null\n        },\n        columns: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        tabindex: {\n            type: Number,\n            default: -1\n        },\n        ariaSetSize: {\n            type: Number,\n            default: null\n        },\n        ariaPosInset: {\n            type: Number,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        contextMenu: {\n            type: Boolean,\n            default: false\n        },\n        contextMenuSelection: {\n            type: Object,\n            default: null\n        }\n    },\n    nodeTouched: false,\n    methods: {\n        columnProp(col, prop) {\n            return getVNodeProp(col, prop);\n        },\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        onClick(event) {\n            if (isClickable(event.target) || getAttribute(event.target, 'data-pc-section') === 'nodetogglebutton' || getAttribute(event.target, 'data-pc-section') === 'nodetoggleicon' || event.target.tagName === 'path') {\n                return;\n            }\n\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n\n            this.$emit('node-click', {\n                originalEvent: event,\n                nodeTouched: this.nodeTouched,\n                node: this.node\n            });\n            this.nodeTouched = false;\n        },\n        onRowRightClick(event) {\n            this.$emit('row-rightclick', {\n                originalEvent: event,\n                node: this.node\n            });\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        nodeKey(node) {\n            return resolveFieldData(node, this.dataKey);\n        },\n        onKeyDown(event, item) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    if (!isClickable(event.target)) {\n                        this.onEnterKey(event, item);\n                    }\n\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const nextElementSibling = event.currentTarget.nextElementSibling;\n\n            nextElementSibling && this.focusRowChange(event.currentTarget, nextElementSibling);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const previousElementSibling = event.currentTarget.previousElementSibling;\n\n            previousElementSibling && this.focusRowChange(event.currentTarget, previousElementSibling);\n\n            event.preventDefault();\n        },\n        onArrowRightKey(event) {\n            const ishiddenIcon = findSingle(event.currentTarget, 'button').style.visibility === 'hidden';\n            const togglerElement = findSingle(this.$refs.node, '[data-pc-section=\"nodetogglebutton\"]');\n\n            if (ishiddenIcon) return;\n\n            !this.expanded && togglerElement.click();\n\n            this.$nextTick(() => {\n                this.onArrowDownKey(event);\n            });\n\n            event.preventDefault();\n        },\n        onArrowLeftKey(event) {\n            if (this.level === 0 && !this.expanded) {\n                return;\n            }\n\n            const currentTarget = event.currentTarget;\n            const ishiddenIcon = findSingle(currentTarget, 'button').style.visibility === 'hidden';\n            const togglerElement = findSingle(currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n\n            if (this.expanded && !ishiddenIcon) {\n                togglerElement.click();\n\n                return;\n            }\n\n            const target = this.findBeforeClickableNode(currentTarget);\n\n            target && this.focusRowChange(currentTarget, target);\n        },\n        onHomeKey(event) {\n            const findFirstElement = findSingle(event.currentTarget.parentElement, `tr[aria-level=\"${this.level + 1}\"]`);\n\n            findFirstElement && focus(findFirstElement);\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const nodes = find(event.currentTarget.parentElement, `tr[aria-level=\"${this.level + 1}\"]`);\n            const findFirstElement = nodes[nodes.length - 1];\n\n            focus(findFirstElement);\n\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            event.preventDefault();\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n\n            if (this.selectionMode === 'checkbox') {\n                this.toggleCheckbox();\n\n                return;\n            }\n\n            this.$emit('node-click', {\n                originalEvent: event,\n                nodeTouched: this.nodeTouched,\n                node: this.node\n            });\n\n            this.nodeTouched = false;\n        },\n        onTabKey() {\n            const rows = [...find(this.$refs.node.parentElement, 'tr')];\n            const hasSelectedRow = rows.some((row) => getAttribute(row, 'data-p-selected') || row.getAttribute('aria-checked') === 'true');\n\n            rows.forEach((row) => {\n                row.tabIndex = -1;\n            });\n\n            if (hasSelectedRow) {\n                const selectedNodes = rows.filter((node) => getAttribute(node, 'data-p-selected') || node.getAttribute('aria-checked') === 'true');\n\n                selectedNodes[0].tabIndex = 0;\n\n                return;\n            }\n\n            rows[0].tabIndex = 0;\n        },\n        focusRowChange(firstFocusableRow, currentFocusedRow) {\n            firstFocusableRow.tabIndex = '-1';\n            currentFocusedRow.tabIndex = '0';\n            focus(currentFocusedRow);\n        },\n        findBeforeClickableNode(node) {\n            const prevNode = node.previousElementSibling;\n\n            if (prevNode) {\n                const prevNodeButton = prevNode.querySelector('button');\n\n                if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n                    return prevNode;\n                }\n\n                return this.findBeforeClickableNode(prevNode);\n            }\n\n            return null;\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check) selectionKeys[this.nodeKey(node)] = { checked: true, partialChecked: false };\n            else delete selectionKeys[this.nodeKey(node)];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;\n                else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.nodeKey(this.node)] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.nodeKey(this.node)];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: true };\n                else _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: false };\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onCheckboxChange(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;\n                else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.nodeKey(this.node)] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.nodeKey(this.node)];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: true };\n                else _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: false };\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        setTabIndexForSelectionMode(event, nodeTouched) {\n            if (this.selectionMode !== null) {\n                const elements = [...find(this.$refs.node.parentElement, 'tr')];\n\n                event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n\n                if (elements.every((element) => element.tabIndex === -1)) {\n                    elements[0].tabIndex = 0;\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.node.styleClass, this.cx('row')];\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.nodeKey(this.node)] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selected() {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] === true : false;\n        },\n        isSelectedWithContextMenu() {\n            if (this.node && this.contextMenuSelection) {\n                return equals(this.node, this.contextMenuSelection, this.dataKey);\n            }\n\n            return false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].checked : false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].partialChecked : false;\n        },\n        getAriaSelected() {\n            return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : null;\n        },\n        ptmOptions() {\n            return {\n                context: {\n                    selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n                    selected: this.selected,\n                    scrollable: this.$parentInstance.scrollable\n                }\n            };\n        }\n    },\n    components: {\n        TTBodyCell: BodyCell\n    }\n};\n</script>\n","<template>\n    <tr\n        ref=\"node\"\n        :class=\"containerClass\"\n        :style=\"node.style\"\n        :tabindex=\"tabindex\"\n        role=\"row\"\n        :aria-expanded=\"node.children && node.children.length ? expanded : undefined\"\n        :aria-level=\"level + 1\"\n        :aria-setsize=\"ariaSetSize\"\n        :aria-posinset=\"ariaPosInset\"\n        :aria-selected=\"getAriaSelected\"\n        :aria-checked=\"checked || undefined\"\n        @click=\"onClick\"\n        @keydown=\"onKeyDown\"\n        @touchend=\"onTouchEnd\"\n        @contextmenu=\"onRowRightClick\"\n        v-bind=\"ptm('row', ptmOptions)\"\n        :data-p-selected=\"selected\"\n        :data-p-selected-contextmenu=\"contextMenuSelection && isSelectedWithContextMenu\"\n    >\n        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n            <TTBodyCell\n                v-if=\"!columnProp(col, 'hidden')\"\n                :column=\"col\"\n                :node=\"node\"\n                :level=\"level\"\n                :leaf=\"leaf\"\n                :indentation=\"indentation\"\n                :expanded=\"expanded\"\n                :selectionMode=\"selectionMode\"\n                :checked=\"checked\"\n                :partialChecked=\"partialChecked\"\n                :templates=\"templates\"\n                @node-toggle=\"$emit('node-toggle', $event)\"\n                @checkbox-toggle=\"toggleCheckbox\"\n                :index=\"i\"\n                :loadingMode=\"loadingMode\"\n                :unstyled=\"unstyled\"\n                :pt=\"pt\"\n            ></TTBodyCell>\n        </template>\n    </tr>\n    <template v-if=\"expanded && node.children && node.children.length\">\n        <TreeTableRow\n            v-for=\"childNode of node.children\"\n            :key=\"nodeKey(childNode)\"\n            :dataKey=\"dataKey\"\n            :columns=\"columns\"\n            :node=\"childNode\"\n            :parentNode=\"node\"\n            :level=\"level + 1\"\n            :expandedKeys=\"expandedKeys\"\n            :selectionMode=\"selectionMode\"\n            :selectionKeys=\"selectionKeys\"\n            :contextMenu=\"contextMenu\"\n            :contextMenuSelection=\"contextMenuSelection\"\n            :indentation=\"indentation\"\n            :ariaPosInset=\"node.children.indexOf(childNode) + 1\"\n            :ariaSetSize=\"node.children.length\"\n            :templates=\"templates\"\n            @node-toggle=\"$emit('node-toggle', $event)\"\n            @node-click=\"$emit('node-click', $event)\"\n            @row-rightclick=\"$emit('row-rightclick', $event)\"\n            @checkbox-change=\"onCheckboxChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"pt\"\n        />\n    </template>\n</template>\n\n<script>\nimport { find, findSingle, focus, getAttribute, isClickable } from '@primeuix/utils/dom';\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport BodyCell from './BodyCell.vue';\n\nexport default {\n    name: 'TreeTableRow',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['node-click', 'node-toggle', 'checkbox-change', 'nodeClick', 'nodeToggle', 'checkboxChange', 'row-rightclick', 'rowRightclick'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        dataKey: {\n            type: [String, Function],\n            default: 'key'\n        },\n        parentNode: {\n            type: null,\n            default: null\n        },\n        columns: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        tabindex: {\n            type: Number,\n            default: -1\n        },\n        ariaSetSize: {\n            type: Number,\n            default: null\n        },\n        ariaPosInset: {\n            type: Number,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        contextMenu: {\n            type: Boolean,\n            default: false\n        },\n        contextMenuSelection: {\n            type: Object,\n            default: null\n        }\n    },\n    nodeTouched: false,\n    methods: {\n        columnProp(col, prop) {\n            return getVNodeProp(col, prop);\n        },\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        onClick(event) {\n            if (isClickable(event.target) || getAttribute(event.target, 'data-pc-section') === 'nodetogglebutton' || getAttribute(event.target, 'data-pc-section') === 'nodetoggleicon' || event.target.tagName === 'path') {\n                return;\n            }\n\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n\n            this.$emit('node-click', {\n                originalEvent: event,\n                nodeTouched: this.nodeTouched,\n                node: this.node\n            });\n            this.nodeTouched = false;\n        },\n        onRowRightClick(event) {\n            this.$emit('row-rightclick', {\n                originalEvent: event,\n                node: this.node\n            });\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        nodeKey(node) {\n            return resolveFieldData(node, this.dataKey);\n        },\n        onKeyDown(event, item) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    if (!isClickable(event.target)) {\n                        this.onEnterKey(event, item);\n                    }\n\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const nextElementSibling = event.currentTarget.nextElementSibling;\n\n            nextElementSibling && this.focusRowChange(event.currentTarget, nextElementSibling);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const previousElementSibling = event.currentTarget.previousElementSibling;\n\n            previousElementSibling && this.focusRowChange(event.currentTarget, previousElementSibling);\n\n            event.preventDefault();\n        },\n        onArrowRightKey(event) {\n            const ishiddenIcon = findSingle(event.currentTarget, 'button').style.visibility === 'hidden';\n            const togglerElement = findSingle(this.$refs.node, '[data-pc-section=\"nodetogglebutton\"]');\n\n            if (ishiddenIcon) return;\n\n            !this.expanded && togglerElement.click();\n\n            this.$nextTick(() => {\n                this.onArrowDownKey(event);\n            });\n\n            event.preventDefault();\n        },\n        onArrowLeftKey(event) {\n            if (this.level === 0 && !this.expanded) {\n                return;\n            }\n\n            const currentTarget = event.currentTarget;\n            const ishiddenIcon = findSingle(currentTarget, 'button').style.visibility === 'hidden';\n            const togglerElement = findSingle(currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n\n            if (this.expanded && !ishiddenIcon) {\n                togglerElement.click();\n\n                return;\n            }\n\n            const target = this.findBeforeClickableNode(currentTarget);\n\n            target && this.focusRowChange(currentTarget, target);\n        },\n        onHomeKey(event) {\n            const findFirstElement = findSingle(event.currentTarget.parentElement, `tr[aria-level=\"${this.level + 1}\"]`);\n\n            findFirstElement && focus(findFirstElement);\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const nodes = find(event.currentTarget.parentElement, `tr[aria-level=\"${this.level + 1}\"]`);\n            const findFirstElement = nodes[nodes.length - 1];\n\n            focus(findFirstElement);\n\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            event.preventDefault();\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n\n            if (this.selectionMode === 'checkbox') {\n                this.toggleCheckbox();\n\n                return;\n            }\n\n            this.$emit('node-click', {\n                originalEvent: event,\n                nodeTouched: this.nodeTouched,\n                node: this.node\n            });\n\n            this.nodeTouched = false;\n        },\n        onTabKey() {\n            const rows = [...find(this.$refs.node.parentElement, 'tr')];\n            const hasSelectedRow = rows.some((row) => getAttribute(row, 'data-p-selected') || row.getAttribute('aria-checked') === 'true');\n\n            rows.forEach((row) => {\n                row.tabIndex = -1;\n            });\n\n            if (hasSelectedRow) {\n                const selectedNodes = rows.filter((node) => getAttribute(node, 'data-p-selected') || node.getAttribute('aria-checked') === 'true');\n\n                selectedNodes[0].tabIndex = 0;\n\n                return;\n            }\n\n            rows[0].tabIndex = 0;\n        },\n        focusRowChange(firstFocusableRow, currentFocusedRow) {\n            firstFocusableRow.tabIndex = '-1';\n            currentFocusedRow.tabIndex = '0';\n            focus(currentFocusedRow);\n        },\n        findBeforeClickableNode(node) {\n            const prevNode = node.previousElementSibling;\n\n            if (prevNode) {\n                const prevNodeButton = prevNode.querySelector('button');\n\n                if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n                    return prevNode;\n                }\n\n                return this.findBeforeClickableNode(prevNode);\n            }\n\n            return null;\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check) selectionKeys[this.nodeKey(node)] = { checked: true, partialChecked: false };\n            else delete selectionKeys[this.nodeKey(node)];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;\n                else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.nodeKey(this.node)] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.nodeKey(this.node)];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: true };\n                else _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: false };\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onCheckboxChange(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;\n                else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.nodeKey(this.node)] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.nodeKey(this.node)];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: true };\n                else _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: false };\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        setTabIndexForSelectionMode(event, nodeTouched) {\n            if (this.selectionMode !== null) {\n                const elements = [...find(this.$refs.node.parentElement, 'tr')];\n\n                event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n\n                if (elements.every((element) => element.tabIndex === -1)) {\n                    elements[0].tabIndex = 0;\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.node.styleClass, this.cx('row')];\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.nodeKey(this.node)] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selected() {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] === true : false;\n        },\n        isSelectedWithContextMenu() {\n            if (this.node && this.contextMenuSelection) {\n                return equals(this.node, this.contextMenuSelection, this.dataKey);\n            }\n\n            return false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].checked : false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].partialChecked : false;\n        },\n        getAriaSelected() {\n            return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : null;\n        },\n        ptmOptions() {\n            return {\n                context: {\n                    selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n                    selected: this.selected,\n                    scrollable: this.$parentInstance.scrollable\n                }\n            };\n        }\n    },\n    components: {\n        TTBodyCell: BodyCell\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" data-scrollselectors=\".p-treetable-scrollable-body\" v-bind=\"ptmi('root')\">\n        <slot></slot>\n        <div v-if=\"loading && loadingMode === 'mask'\" :class=\"cx('loading')\" v-bind=\"ptm('loading')\">\n            <div :class=\"cx('mask')\" v-bind=\"ptm('mask')\">\n                <slot name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                    <component :is=\"loadingIcon ? 'span' : 'SpinnerIcon'\" spin :class=\"[cx('loadingIcon'), loadingIcon]\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </div>\n        <div v-if=\"$slots.header\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <slot name=\"header\"></slot>\n        </div>\n        <TTPaginator\n            v-if=\"paginatorTop\"\n            :rows=\"d_rows\"\n            :first=\"d_first\"\n            :totalRecords=\"totalRecordsLength\"\n            :pageLinkSize=\"pageLinkSize\"\n            :template=\"paginatorTemplate\"\n            :rowsPerPageOptions=\"rowsPerPageOptions\"\n            :currentPageReportTemplate=\"currentPageReportTemplate\"\n            :class=\"cx('pcPaginator', { position: 'top' })\"\n            @page=\"onPage($event)\"\n            :alwaysShow=\"alwaysShowPaginator\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcPaginator')\"\n        >\n            <template v-if=\"$slots.paginatorcontainer\" #container=\"slotProps\">\n                <slot\n                    name=\"paginatorcontainer\"\n                    :first=\"slotProps.first\"\n                    :last=\"slotProps.last\"\n                    :rows=\"slotProps.rows\"\n                    :page=\"slotProps.page\"\n                    :pageCount=\"slotProps.pageCount\"\n                    :totalRecords=\"slotProps.totalRecords\"\n                    :firstPageCallback=\"slotProps.firstPageCallback\"\n                    :lastPageCallback=\"slotProps.lastPageCallback\"\n                    :prevPageCallback=\"slotProps.prevPageCallback\"\n                    :nextPageCallback=\"slotProps.nextPageCallback\"\n                    :rowChangeCallback=\"slotProps.rowChangeCallback\"\n                ></slot>\n            </template>\n            <template v-if=\"$slots.paginatorstart\" #start>\n                <slot name=\"paginatorstart\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorend\" #end>\n                <slot name=\"paginatorend\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorfirstpagelinkicon\" #firstpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorfirstpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorprevpagelinkicon\" #prevpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorprevpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatornextpagelinkicon\" #nextpagelinkicon=\"slotProps\">\n                <slot name=\"paginatornextpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorlastpagelinkicon\" #lastpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorlastpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorjumptopagedropdownicon\" #jumptopagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorjumptopagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorrowsperpagedropdownicon\" #rowsperpagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorrowsperpagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n        </TTPaginator>\n        <div :class=\"cx('tableContainer')\" :style=\"[sx('tableContainer'), { maxHeight: scrollHeight }]\" v-bind=\"ptm('tableContainer')\">\n            <table ref=\"table\" role=\"table\" :class=\"[cx('table'), tableClass]\" :style=\"tableStyle\" v-bind=\"{ ...tableProps, ...ptm('table') }\">\n                <thead :class=\"cx('thead')\" :style=\"sx('thead')\" role=\"rowgroup\" v-bind=\"ptm('thead')\">\n                    <tr role=\"row\" v-bind=\"ptm('headerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <TTHeaderCell\n                                v-if=\"!columnProp(col, 'hidden')\"\n                                :column=\"col\"\n                                :resizableColumns=\"resizableColumns\"\n                                :sortField=\"d_sortField\"\n                                :sortOrder=\"d_sortOrder\"\n                                :multiSortMeta=\"d_multiSortMeta\"\n                                :sortMode=\"sortMode\"\n                                @column-click=\"onColumnHeaderClick($event)\"\n                                @column-resizestart=\"onColumnResizeStart($event)\"\n                                :index=\"i\"\n                                :unstyled=\"unstyled\"\n                                :pt=\"pt\"\n                            ></TTHeaderCell>\n                        </template>\n                    </tr>\n                    <tr v-if=\"hasColumnFilter()\" v-bind=\"ptm('headerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <th v-if=\"!columnProp(col, 'hidden')\" :class=\"getFilterColumnHeaderClass(col)\" :style=\"[columnProp(col, 'style'), columnProp(col, 'filterHeaderStyle')]\" v-bind=\"ptm('headerCell', ptHeaderCellOptions(col))\">\n                                <component v-if=\"col.children && col.children.filter\" :is=\"col.children.filter\" :column=\"col\" :index=\"i\" />\n                            </th>\n                        </template>\n                    </tr>\n                </thead>\n                <tbody :class=\"cx('tbody')\" role=\"rowgroup\" v-bind=\"ptm('tbody')\">\n                    <template v-if=\"!empty\">\n                        <TTRow\n                            v-for=\"(node, index) of dataToRender\"\n                            :key=\"nodeKey(node)\"\n                            :dataKey=\"dataKey\"\n                            :columns=\"columns\"\n                            :node=\"node\"\n                            :level=\"0\"\n                            :expandedKeys=\"d_expandedKeys\"\n                            :indentation=\"indentation\"\n                            :selectionMode=\"selectionMode\"\n                            :selectionKeys=\"selectionKeys\"\n                            :ariaSetSize=\"dataToRender.length\"\n                            :ariaPosInset=\"index + 1\"\n                            :tabindex=\"setTabindex(node, index)\"\n                            :loadingMode=\"loadingMode\"\n                            :contextMenu=\"contextMenu\"\n                            :contextMenuSelection=\"contextMenuSelection\"\n                            :templates=\"$slots\"\n                            @node-toggle=\"onNodeToggle\"\n                            @node-click=\"onNodeClick\"\n                            @checkbox-change=\"onCheckboxChange\"\n                            @row-rightclick=\"onRowRightClick($event)\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"pt\"\n                        ></TTRow>\n                    </template>\n                    <tr v-else :class=\"cx('emptyMessage')\" v-bind=\"ptm('emptyMessage')\">\n                        <td :colspan=\"columns.length\" v-bind=\"ptm('emptyMessageCell')\">\n                            <slot name=\"empty\"></slot>\n                        </td>\n                    </tr>\n                </tbody>\n                <tfoot v-if=\"hasFooter\" :class=\"cx('tfoot')\" :style=\"sx('tfoot')\" role=\"rowgroup\" v-bind=\"ptm('tfoot')\">\n                    <tr role=\"row\" v-bind=\"ptm('footerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <TTFooterCell v-if=\"!columnProp(col, 'hidden')\" :column=\"col\" :index=\"i\" :unstyled=\"unstyled\" :pt=\"pt\"></TTFooterCell>\n                        </template>\n                    </tr>\n                </tfoot>\n            </table>\n        </div>\n        <TTPaginator\n            v-if=\"paginatorBottom\"\n            :rows=\"d_rows\"\n            :first=\"d_first\"\n            :totalRecords=\"totalRecordsLength\"\n            :pageLinkSize=\"pageLinkSize\"\n            :template=\"paginatorTemplate\"\n            :rowsPerPageOptions=\"rowsPerPageOptions\"\n            :currentPageReportTemplate=\"currentPageReportTemplate\"\n            :class=\"cx('pcPaginator', { position: 'bottom' })\"\n            @page=\"onPage($event)\"\n            :alwaysShow=\"alwaysShowPaginator\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcPaginator')\"\n        >\n            <template v-if=\"$slots.paginatorcontainer\" #container=\"slotProps\">\n                <slot\n                    name=\"paginatorcontainer\"\n                    :first=\"slotProps.first\"\n                    :last=\"slotProps.last\"\n                    :rows=\"slotProps.rows\"\n                    :page=\"slotProps.page\"\n                    :pageCount=\"slotProps.pageCount\"\n                    :totalRecords=\"slotProps.totalRecords\"\n                    :firstPageCallback=\"slotProps.firstPageCallback\"\n                    :lastPageCallback=\"slotProps.lastPageCallback\"\n                    :prevPageCallback=\"slotProps.prevPageCallback\"\n                    :nextPageCallback=\"slotProps.nextPageCallback\"\n                    :rowChangeCallback=\"slotProps.rowChangeCallback\"\n                ></slot>\n            </template>\n            <template v-if=\"$slots.paginatorstart\" #start>\n                <slot name=\"paginatorstart\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorend\" #end>\n                <slot name=\"paginatorend\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorfirstpagelinkicon\" #firstpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorfirstpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorprevpagelinkicon\" #prevpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorprevpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatornextpagelinkicon\" #nextpagelinkicon=\"slotProps\">\n                <slot name=\"paginatornextpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorlastpagelinkicon\" #lastpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorlastpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorjumptopagedropdownicon\" #jumptopagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorjumptopagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorrowsperpagedropdownicon\" #rowsperpagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorrowsperpagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n        </TTPaginator>\n        <div v-if=\"$slots.footer\" :class=\"cx('footer')\" v-bind=\"ptm('footer')\">\n            <slot name=\"footer\"></slot>\n        </div>\n        <div ref=\"resizeHelper\" :class=\"cx('columnResizeIndicator')\" style=\"display: none\" v-bind=\"ptm('columnResizeIndicator')\"></div>\n    </div>\n</template>\n\n<script>\nimport { addStyle, clearSelection, find, getAttribute, getIndex, getOffset, getOuterWidth, isRTL, setAttribute } from '@primeuix/utils/dom';\nimport { localeComparator, resolveFieldData, sort } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport { getVNodeProp, HelperSet } from '@primevue/core/utils';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Paginator from 'primevue/paginator';\nimport BaseTreeTable from './BaseTreeTable.vue';\nimport FooterCell from './FooterCell.vue';\nimport HeaderCell from './HeaderCell.vue';\nimport TreeTableRow from './TreeTableRow.vue';\n\nexport default {\n    name: 'TreeTable',\n    extends: BaseTreeTable,\n    inheritAttrs: false,\n    emits: [\n        'node-expand',\n        'node-collapse',\n        'update:expandedKeys',\n        'update:selectionKeys',\n        'node-select',\n        'node-unselect',\n        'update:first',\n        'update:rows',\n        'page',\n        'update:sortField',\n        'update:sortOrder',\n        'update:multiSortMeta',\n        'sort',\n        'filter',\n        'column-resize-end',\n        'update:contextMenuSelection',\n        'row-contextmenu'\n    ],\n    provide() {\n        return {\n            $columns: this.d_columns\n        };\n    },\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            d_first: this.first,\n            d_rows: this.rows,\n            d_sortField: this.sortField,\n            d_sortOrder: this.sortOrder,\n            d_multiSortMeta: this.multiSortMeta ? [...this.multiSortMeta] : [],\n            hasASelectedNode: false,\n            d_columns: new HelperSet({ type: 'Column' })\n        };\n    },\n    documentColumnResizeListener: null,\n    documentColumnResizeEndListener: null,\n    lastResizeHelperX: null,\n    resizeColumnElement: null,\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        },\n        first(newValue) {\n            this.d_first = newValue;\n        },\n        rows(newValue) {\n            this.d_rows = newValue;\n        },\n        sortField(newValue) {\n            this.d_sortField = newValue;\n        },\n        sortOrder(newValue) {\n            this.d_sortOrder = newValue;\n        },\n        multiSortMeta(newValue) {\n            this.d_multiSortMeta = newValue;\n        }\n    },\n    beforeUnmount() {\n        this.destroyStyleElement();\n        this.d_columns.clear();\n    },\n    methods: {\n        columnProp(col, prop) {\n            return getVNodeProp(col, prop);\n        },\n        ptHeaderCellOptions(column) {\n            return {\n                context: {\n                    frozen: this.columnProp(column, 'frozen')\n                }\n            };\n        },\n        onNodeToggle(node) {\n            const key = this.nodeKey(node);\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            } else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = { ...this.d_expandedKeys };\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.rowSelectionMode && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        nodeKey(node) {\n            return resolveFieldData(node, this.dataKey);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const nodeKey = this.nodeKey(node);\n            const metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[nodeKey];\n                }\n\n                this.$emit('node-unselect', node);\n            } else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : this.selectionKeys ? { ...this.selectionKeys } : {};\n                }\n\n                _selectionKeys[nodeKey] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const nodeKey = this.nodeKey(node);\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = {};\n                    _selectionKeys[nodeKey] = true;\n                    this.$emit('node-select', node);\n                }\n            } else {\n                if (selected) {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[nodeKey];\n\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n                    _selectionKeys[nodeKey] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check) this.$emit('node-select', event.node);\n            else this.$emit('node-unselect', event.node);\n        },\n        onRowRightClick(event) {\n            if (this.contextMenu) {\n                clearSelection();\n                event.originalEvent.target.focus();\n            }\n\n            this.$emit('update:contextMenuSelection', event.node);\n            this.$emit('row-contextmenu', event);\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        onPage(event) {\n            this.d_first = event.first;\n            this.d_rows = event.rows;\n\n            let pageEvent = this.createLazyLoadEvent(event);\n\n            pageEvent.pageCount = event.pageCount;\n            pageEvent.page = event.page;\n\n            this.d_expandedKeys = {};\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n            this.$emit('update:first', this.d_first);\n            this.$emit('update:rows', this.d_rows);\n            this.$emit('page', pageEvent);\n        },\n        resetPage() {\n            this.d_first = 0;\n            this.$emit('update:first', this.d_first);\n        },\n        getFilterColumnHeaderClass(column) {\n            return [this.cx('headerCell', { column }), this.columnProp(column, 'filterHeaderClass')];\n        },\n        onColumnHeaderClick(e) {\n            let event = e.originalEvent;\n            let column = e.column;\n\n            if (this.columnProp(column, 'sortable')) {\n                const targetNode = event.target;\n                const columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n\n                if (\n                    getAttribute(targetNode, 'data-p-sortable-column') === true ||\n                    getAttribute(targetNode, 'data-pc-section') === 'columntitle' ||\n                    getAttribute(targetNode, 'data-pc-section') === 'columnheadercontent' ||\n                    getAttribute(targetNode, 'data-pc-section') === 'sorticon' ||\n                    getAttribute(targetNode.parentElement, 'data-pc-section') === 'sorticon' ||\n                    getAttribute(targetNode.parentElement.parentElement, 'data-pc-section') === 'sorticon' ||\n                    targetNode.closest('[data-p-sortable-column=\"true\"]')\n                ) {\n                    clearSelection();\n\n                    if (this.sortMode === 'single') {\n                        if (this.d_sortField === columnField) {\n                            if (this.removableSort && this.d_sortOrder * -1 === this.defaultSortOrder) {\n                                this.d_sortOrder = null;\n                                this.d_sortField = null;\n                            } else {\n                                this.d_sortOrder = this.d_sortOrder * -1;\n                            }\n                        } else {\n                            this.d_sortOrder = this.defaultSortOrder;\n                            this.d_sortField = columnField;\n                        }\n\n                        this.$emit('update:sortField', this.d_sortField);\n                        this.$emit('update:sortOrder', this.d_sortOrder);\n                        this.resetPage();\n                    } else if (this.sortMode === 'multiple') {\n                        let metaKey = event.metaKey || event.ctrlKey;\n\n                        if (!metaKey) {\n                            this.d_multiSortMeta = this.d_multiSortMeta.filter((meta) => meta.field === columnField);\n                        }\n\n                        this.addMultiSortField(columnField);\n                        this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n                    }\n\n                    this.$emit('sort', this.createLazyLoadEvent(event));\n                }\n            }\n        },\n        addMultiSortField(field) {\n            let index = this.d_multiSortMeta.findIndex((meta) => meta.field === field);\n\n            if (index >= 0) {\n                if (this.removableSort && this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder) this.d_multiSortMeta.splice(index, 1);\n                else this.d_multiSortMeta[index] = { field: field, order: this.d_multiSortMeta[index].order * -1 };\n            } else {\n                this.d_multiSortMeta.push({ field: field, order: this.defaultSortOrder });\n            }\n\n            this.d_multiSortMeta = [...this.d_multiSortMeta];\n        },\n        sortSingle(nodes) {\n            return this.sortNodesSingle(nodes);\n        },\n        sortNodesSingle(nodes) {\n            let _nodes = [...nodes];\n            const comparer = localeComparator();\n\n            _nodes.sort((node1, node2) => {\n                const value1 = resolveFieldData(node1.data, this.d_sortField);\n                const value2 = resolveFieldData(node2.data, this.d_sortField);\n\n                return sort(value1, value2, this.d_sortOrder, comparer);\n            });\n\n            return _nodes;\n        },\n        sortMultiple(nodes) {\n            return this.sortNodesMultiple(nodes);\n        },\n        sortNodesMultiple(nodes) {\n            let _nodes = [...nodes];\n\n            _nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, 0);\n            });\n\n            return _nodes;\n        },\n        multisortField(node1, node2, index) {\n            const value1 = resolveFieldData(node1.data, this.d_multiSortMeta[index].field);\n            const value2 = resolveFieldData(node2.data, this.d_multiSortMeta[index].field);\n            const comparer = localeComparator();\n\n            if (value1 === value2) {\n                return this.d_multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, index + 1) : 0;\n            }\n\n            return sort(value1, value2, this.d_multiSortMeta[index].order, comparer);\n        },\n        filter(value) {\n            let filteredNodes = [];\n            const strict = this.filterMode === 'strict';\n\n            for (let node of value) {\n                let copyNode = { ...node };\n                let localMatch = true;\n                let globalMatch = false;\n\n                for (let j = 0; j < this.columns.length; j++) {\n                    let col = this.columns[j];\n                    let filterField = this.columnProp(col, 'filterField') || this.columnProp(col, 'field');\n\n                    //local\n                    if (Object.prototype.hasOwnProperty.call(this.filters, filterField)) {\n                        let filterMatchMode = this.columnProp(col, 'filterMatchMode') || 'startsWith';\n                        let filterValue = this.filters[filterField];\n                        let filterConstraint = FilterService.filters[filterMatchMode];\n                        let paramsWithoutNode = { filterField, filterValue, filterConstraint, strict };\n\n                        if (\n                            (strict && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                            (!strict && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))\n                        ) {\n                            localMatch = false;\n                        }\n\n                        if (!localMatch) {\n                            break;\n                        }\n                    }\n\n                    //global\n                    if (this.hasGlobalFilter() && !globalMatch) {\n                        let copyNodeForGlobal = { ...copyNode };\n                        let filterValue = this.filters['global'];\n                        let filterConstraint = FilterService.filters['contains'];\n                        let globalFilterParamsWithoutNode = { filterField, filterValue, filterConstraint, strict };\n\n                        if (\n                            (strict && (this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode))) ||\n                            (!strict && (this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode)))\n                        ) {\n                            globalMatch = true;\n                            copyNode = copyNodeForGlobal;\n                        }\n                    }\n                }\n\n                let matches = localMatch;\n\n                if (this.hasGlobalFilter()) {\n                    matches = localMatch && globalMatch;\n                }\n\n                if (matches) {\n                    filteredNodes.push(copyNode);\n                }\n            }\n\n            let filterEvent = this.createLazyLoadEvent(event);\n\n            filterEvent.filteredValue = filteredNodes;\n            this.$emit('filter', filterEvent);\n\n            return filteredNodes;\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n\n                if (node.children) {\n                    let childNodes = [...node.children];\n\n                    node.children = [];\n\n                    for (let childNode of childNodes) {\n                        let copyChildNode = { ...childNode };\n\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, { filterField, filterValue, filterConstraint, strict }) {\n            let matched = false;\n            let dataFieldValue = resolveFieldData(node.data, filterField);\n\n            if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n                matched = true;\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, strict }) || matched;\n            }\n\n            return matched;\n        },\n        isNodeSelected(node) {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)] === true : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        createLazyLoadEvent(event) {\n            let filterMatchModes;\n\n            if (this.hasFilters()) {\n                filterMatchModes = {};\n                this.columns.forEach((col) => {\n                    if (this.columnProp(col, 'field')) {\n                        filterMatchModes[col.props.field] = this.columnProp(col, 'filterMatchMode');\n                    }\n                });\n            }\n\n            return {\n                originalEvent: event,\n                first: this.d_first,\n                rows: this.d_rows,\n                sortField: this.d_sortField,\n                sortOrder: this.d_sortOrder,\n                multiSortMeta: this.d_multiSortMeta,\n                filters: this.filters,\n                filterMatchModes: filterMatchModes\n            };\n        },\n        onColumnResizeStart(event) {\n            let containerLeft = getOffset(this.$el).left;\n\n            this.resizeColumnElement = event.target.parentElement;\n            this.columnResizing = true;\n            this.lastResizeHelperX = event.pageX - containerLeft + this.$el.scrollLeft;\n\n            this.bindColumnResizeEvents();\n        },\n        onColumnResize(event) {\n            let containerLeft = getOffset(this.$el).left;\n\n            this.$el.setAttribute('data-p-unselectable-text', 'true');\n            !this.isUnstyled && addStyle(this.$el, { 'user-select': 'none' });\n            this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n            this.$refs.resizeHelper.style.top = 0 + 'px';\n            this.$refs.resizeHelper.style.left = event.pageX - containerLeft + this.$el.scrollLeft + 'px';\n\n            this.$refs.resizeHelper.style.display = 'block';\n        },\n        onColumnResizeEnd() {\n            let delta = isRTL(this.$el) ? this.lastResizeHelperX - this.$refs.resizeHelper.offsetLeft : this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n            let columnWidth = this.resizeColumnElement.offsetWidth;\n            let newColumnWidth = columnWidth + delta;\n            let minWidth = this.resizeColumnElement.style.minWidth || 15;\n\n            if (columnWidth + delta > parseInt(minWidth, 10)) {\n                if (this.columnResizeMode === 'fit') {\n                    let nextColumn = this.resizeColumnElement.nextElementSibling;\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > 15) {\n                        this.resizeTableCells(newColumnWidth, nextColumnWidth);\n                    }\n                } else if (this.columnResizeMode === 'expand') {\n                    const tableWidth = this.$refs.table.offsetWidth + delta + 'px';\n\n                    const updateTableWidth = (el) => {\n                        !!el && (el.style.width = el.style.minWidth = tableWidth);\n                    };\n\n                    // Reasoning: resize table cells before updating the table width so that it can use existing computed cell widths and adjust only the one column.\n                    this.resizeTableCells(newColumnWidth);\n                    updateTableWidth(this.$refs.table);\n                }\n\n                this.$emit('column-resize-end', {\n                    element: this.resizeColumnElement,\n                    delta: delta\n                });\n            }\n\n            this.$refs.resizeHelper.style.display = 'none';\n            this.resizeColumn = null;\n            this.$el.removeAttribute('data-p-unselectable-text');\n            !this.isUnstyled && (this.$el.style['user-select'] = '');\n\n            this.unbindColumnResizeEvents();\n        },\n        resizeTableCells(newColumnWidth, nextColumnWidth) {\n            let colIndex = getIndex(this.resizeColumnElement);\n            let widths = [];\n            let headers = find(this.$refs.table, 'thead[data-pc-section=\"thead\"] > tr > th');\n\n            headers.forEach((header) => widths.push(getOuterWidth(header)));\n\n            this.destroyStyleElement();\n            this.createStyleElement();\n\n            let innerHTML = '';\n            let selector = `[data-pc-name=\"treetable\"][${this.$attrSelector}] > [data-pc-section=\"tablecontainer\"] > table[data-pc-section=\"table\"]`;\n\n            widths.forEach((width, index) => {\n                let colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width;\n                let style = `width: ${colWidth}px !important; max-width: ${colWidth}px !important`;\n\n                innerHTML += `\n                    ${selector} > thead[data-pc-section=\"thead\"] > tr > th:nth-child(${index + 1}),\n                    ${selector} > tbody[data-pc-section=\"tbody\"] > tr > td:nth-child(${index + 1}),\n                    ${selector} > tfoot[data-pc-section=\"tfoot\"] > tr > td:nth-child(${index + 1}) {\n                        ${style}\n                    }\n                `;\n            });\n\n            this.styleElement.innerHTML = innerHTML;\n        },\n        bindColumnResizeEvents() {\n            if (!this.documentColumnResizeListener) {\n                this.documentColumnResizeListener = document.addEventListener('mousemove', (event) => {\n                    if (this.columnResizing) {\n                        this.onColumnResize(event);\n                    }\n                });\n            }\n\n            if (!this.documentColumnResizeEndListener) {\n                this.documentColumnResizeEndListener = document.addEventListener('mouseup', () => {\n                    if (this.columnResizing) {\n                        this.columnResizing = false;\n                        this.onColumnResizeEnd();\n                    }\n                });\n            }\n        },\n        unbindColumnResizeEvents() {\n            if (this.documentColumnResizeListener) {\n                document.removeEventListener('document', this.documentColumnResizeListener);\n                this.documentColumnResizeListener = null;\n            }\n\n            if (this.documentColumnResizeEndListener) {\n                document.removeEventListener('document', this.documentColumnResizeEndListener);\n                this.documentColumnResizeEndListener = null;\n            }\n        },\n        onColumnKeyDown(event, col) {\n            if ((event.code === 'Enter' || event.code === 'NumpadEnter') && event.currentTarget.nodeName === 'TH' && getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n                this.onColumnHeaderClick(event, col);\n            }\n        },\n        hasColumnFilter() {\n            if (this.columns) {\n                for (let col of this.columns) {\n                    if (col.children && col.children.filter) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n        hasFilters() {\n            return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n        },\n        hasGlobalFilter() {\n            return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n        },\n        getItemLabel(node) {\n            return node.data.name;\n        },\n        createStyleElement() {\n            this.styleElement = document.createElement('style');\n            this.styleElement.type = 'text/css';\n            setAttribute(this.styleElement, 'nonce', this.$primevue?.config?.csp?.nonce);\n            document.head.appendChild(this.styleElement);\n        },\n        destroyStyleElement() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        },\n        setTabindex(node, index) {\n            if (this.isNodeSelected(node)) {\n                this.hasASelectedNode = true;\n\n                return 0;\n            }\n\n            if (this.selectionMode) {\n                if (!this.isNodeSelected(node) && index === 0 && !this.hasASelectedNode) return 0;\n            } else if (!this.selectionMode && index === 0) {\n                return 0;\n            }\n\n            return -1;\n        }\n    },\n    computed: {\n        columns() {\n            return this.d_columns.get(this);\n        },\n        processedData() {\n            if (this.lazy) {\n                return this.value;\n            } else {\n                if (this.value && this.value.length) {\n                    let data = this.value;\n\n                    if (this.sorted) {\n                        if (this.sortMode === 'single') data = this.sortSingle(data);\n                        else if (this.sortMode === 'multiple') data = this.sortMultiple(data);\n                    }\n\n                    if (this.hasFilters()) {\n                        data = this.filter(data);\n                    }\n\n                    return data;\n                } else {\n                    return null;\n                }\n            }\n        },\n        dataToRender() {\n            const data = this.processedData;\n\n            if (this.paginator) {\n                const first = this.lazy ? 0 : this.d_first;\n\n                return data.slice(first, first + this.d_rows);\n            } else {\n                return data;\n            }\n        },\n        empty() {\n            const data = this.processedData;\n\n            return !data || data.length === 0;\n        },\n        sorted() {\n            return this.d_sortField || (this.d_multiSortMeta && this.d_multiSortMeta.length > 0);\n        },\n        hasFooter() {\n            let hasFooter = false;\n\n            for (let col of this.columns) {\n                if (this.columnProp(col, 'footer') || (col.children && col.children.footer)) {\n                    hasFooter = true;\n                    break;\n                }\n            }\n\n            return hasFooter;\n        },\n        paginatorTop() {\n            return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n        },\n        paginatorBottom() {\n            return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n        },\n        singleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'single';\n        },\n        multipleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'multiple';\n        },\n        rowSelectionMode() {\n            return this.singleSelectionMode || this.multipleSelectionMode;\n        },\n        totalRecordsLength() {\n            if (this.lazy) {\n                return this.totalRecords;\n            } else {\n                const data = this.processedData;\n\n                return data ? data.length : 0;\n            }\n        }\n    },\n    components: {\n        TTRow: TreeTableRow,\n        TTPaginator: Paginator,\n        TTHeaderCell: HeaderCell,\n        TTFooterCell: FooterCell,\n        SpinnerIcon: SpinnerIcon\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" data-scrollselectors=\".p-treetable-scrollable-body\" v-bind=\"ptmi('root')\">\n        <slot></slot>\n        <div v-if=\"loading && loadingMode === 'mask'\" :class=\"cx('loading')\" v-bind=\"ptm('loading')\">\n            <div :class=\"cx('mask')\" v-bind=\"ptm('mask')\">\n                <slot name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                    <component :is=\"loadingIcon ? 'span' : 'SpinnerIcon'\" spin :class=\"[cx('loadingIcon'), loadingIcon]\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </div>\n        <div v-if=\"$slots.header\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <slot name=\"header\"></slot>\n        </div>\n        <TTPaginator\n            v-if=\"paginatorTop\"\n            :rows=\"d_rows\"\n            :first=\"d_first\"\n            :totalRecords=\"totalRecordsLength\"\n            :pageLinkSize=\"pageLinkSize\"\n            :template=\"paginatorTemplate\"\n            :rowsPerPageOptions=\"rowsPerPageOptions\"\n            :currentPageReportTemplate=\"currentPageReportTemplate\"\n            :class=\"cx('pcPaginator', { position: 'top' })\"\n            @page=\"onPage($event)\"\n            :alwaysShow=\"alwaysShowPaginator\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcPaginator')\"\n        >\n            <template v-if=\"$slots.paginatorcontainer\" #container=\"slotProps\">\n                <slot\n                    name=\"paginatorcontainer\"\n                    :first=\"slotProps.first\"\n                    :last=\"slotProps.last\"\n                    :rows=\"slotProps.rows\"\n                    :page=\"slotProps.page\"\n                    :pageCount=\"slotProps.pageCount\"\n                    :totalRecords=\"slotProps.totalRecords\"\n                    :firstPageCallback=\"slotProps.firstPageCallback\"\n                    :lastPageCallback=\"slotProps.lastPageCallback\"\n                    :prevPageCallback=\"slotProps.prevPageCallback\"\n                    :nextPageCallback=\"slotProps.nextPageCallback\"\n                    :rowChangeCallback=\"slotProps.rowChangeCallback\"\n                ></slot>\n            </template>\n            <template v-if=\"$slots.paginatorstart\" #start>\n                <slot name=\"paginatorstart\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorend\" #end>\n                <slot name=\"paginatorend\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorfirstpagelinkicon\" #firstpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorfirstpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorprevpagelinkicon\" #prevpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorprevpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatornextpagelinkicon\" #nextpagelinkicon=\"slotProps\">\n                <slot name=\"paginatornextpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorlastpagelinkicon\" #lastpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorlastpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorjumptopagedropdownicon\" #jumptopagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorjumptopagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorrowsperpagedropdownicon\" #rowsperpagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorrowsperpagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n        </TTPaginator>\n        <div :class=\"cx('tableContainer')\" :style=\"[sx('tableContainer'), { maxHeight: scrollHeight }]\" v-bind=\"ptm('tableContainer')\">\n            <table ref=\"table\" role=\"table\" :class=\"[cx('table'), tableClass]\" :style=\"tableStyle\" v-bind=\"{ ...tableProps, ...ptm('table') }\">\n                <thead :class=\"cx('thead')\" :style=\"sx('thead')\" role=\"rowgroup\" v-bind=\"ptm('thead')\">\n                    <tr role=\"row\" v-bind=\"ptm('headerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <TTHeaderCell\n                                v-if=\"!columnProp(col, 'hidden')\"\n                                :column=\"col\"\n                                :resizableColumns=\"resizableColumns\"\n                                :sortField=\"d_sortField\"\n                                :sortOrder=\"d_sortOrder\"\n                                :multiSortMeta=\"d_multiSortMeta\"\n                                :sortMode=\"sortMode\"\n                                @column-click=\"onColumnHeaderClick($event)\"\n                                @column-resizestart=\"onColumnResizeStart($event)\"\n                                :index=\"i\"\n                                :unstyled=\"unstyled\"\n                                :pt=\"pt\"\n                            ></TTHeaderCell>\n                        </template>\n                    </tr>\n                    <tr v-if=\"hasColumnFilter()\" v-bind=\"ptm('headerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <th v-if=\"!columnProp(col, 'hidden')\" :class=\"getFilterColumnHeaderClass(col)\" :style=\"[columnProp(col, 'style'), columnProp(col, 'filterHeaderStyle')]\" v-bind=\"ptm('headerCell', ptHeaderCellOptions(col))\">\n                                <component v-if=\"col.children && col.children.filter\" :is=\"col.children.filter\" :column=\"col\" :index=\"i\" />\n                            </th>\n                        </template>\n                    </tr>\n                </thead>\n                <tbody :class=\"cx('tbody')\" role=\"rowgroup\" v-bind=\"ptm('tbody')\">\n                    <template v-if=\"!empty\">\n                        <TTRow\n                            v-for=\"(node, index) of dataToRender\"\n                            :key=\"nodeKey(node)\"\n                            :dataKey=\"dataKey\"\n                            :columns=\"columns\"\n                            :node=\"node\"\n                            :level=\"0\"\n                            :expandedKeys=\"d_expandedKeys\"\n                            :indentation=\"indentation\"\n                            :selectionMode=\"selectionMode\"\n                            :selectionKeys=\"selectionKeys\"\n                            :ariaSetSize=\"dataToRender.length\"\n                            :ariaPosInset=\"index + 1\"\n                            :tabindex=\"setTabindex(node, index)\"\n                            :loadingMode=\"loadingMode\"\n                            :contextMenu=\"contextMenu\"\n                            :contextMenuSelection=\"contextMenuSelection\"\n                            :templates=\"$slots\"\n                            @node-toggle=\"onNodeToggle\"\n                            @node-click=\"onNodeClick\"\n                            @checkbox-change=\"onCheckboxChange\"\n                            @row-rightclick=\"onRowRightClick($event)\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"pt\"\n                        ></TTRow>\n                    </template>\n                    <tr v-else :class=\"cx('emptyMessage')\" v-bind=\"ptm('emptyMessage')\">\n                        <td :colspan=\"columns.length\" v-bind=\"ptm('emptyMessageCell')\">\n                            <slot name=\"empty\"></slot>\n                        </td>\n                    </tr>\n                </tbody>\n                <tfoot v-if=\"hasFooter\" :class=\"cx('tfoot')\" :style=\"sx('tfoot')\" role=\"rowgroup\" v-bind=\"ptm('tfoot')\">\n                    <tr role=\"row\" v-bind=\"ptm('footerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <TTFooterCell v-if=\"!columnProp(col, 'hidden')\" :column=\"col\" :index=\"i\" :unstyled=\"unstyled\" :pt=\"pt\"></TTFooterCell>\n                        </template>\n                    </tr>\n                </tfoot>\n            </table>\n        </div>\n        <TTPaginator\n            v-if=\"paginatorBottom\"\n            :rows=\"d_rows\"\n            :first=\"d_first\"\n            :totalRecords=\"totalRecordsLength\"\n            :pageLinkSize=\"pageLinkSize\"\n            :template=\"paginatorTemplate\"\n            :rowsPerPageOptions=\"rowsPerPageOptions\"\n            :currentPageReportTemplate=\"currentPageReportTemplate\"\n            :class=\"cx('pcPaginator', { position: 'bottom' })\"\n            @page=\"onPage($event)\"\n            :alwaysShow=\"alwaysShowPaginator\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcPaginator')\"\n        >\n            <template v-if=\"$slots.paginatorcontainer\" #container=\"slotProps\">\n                <slot\n                    name=\"paginatorcontainer\"\n                    :first=\"slotProps.first\"\n                    :last=\"slotProps.last\"\n                    :rows=\"slotProps.rows\"\n                    :page=\"slotProps.page\"\n                    :pageCount=\"slotProps.pageCount\"\n                    :totalRecords=\"slotProps.totalRecords\"\n                    :firstPageCallback=\"slotProps.firstPageCallback\"\n                    :lastPageCallback=\"slotProps.lastPageCallback\"\n                    :prevPageCallback=\"slotProps.prevPageCallback\"\n                    :nextPageCallback=\"slotProps.nextPageCallback\"\n                    :rowChangeCallback=\"slotProps.rowChangeCallback\"\n                ></slot>\n            </template>\n            <template v-if=\"$slots.paginatorstart\" #start>\n                <slot name=\"paginatorstart\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorend\" #end>\n                <slot name=\"paginatorend\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorfirstpagelinkicon\" #firstpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorfirstpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorprevpagelinkicon\" #prevpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorprevpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatornextpagelinkicon\" #nextpagelinkicon=\"slotProps\">\n                <slot name=\"paginatornextpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorlastpagelinkicon\" #lastpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorlastpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorjumptopagedropdownicon\" #jumptopagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorjumptopagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorrowsperpagedropdownicon\" #rowsperpagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorrowsperpagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n        </TTPaginator>\n        <div v-if=\"$slots.footer\" :class=\"cx('footer')\" v-bind=\"ptm('footer')\">\n            <slot name=\"footer\"></slot>\n        </div>\n        <div ref=\"resizeHelper\" :class=\"cx('columnResizeIndicator')\" style=\"display: none\" v-bind=\"ptm('columnResizeIndicator')\"></div>\n    </div>\n</template>\n\n<script>\nimport { addStyle, clearSelection, find, getAttribute, getIndex, getOffset, getOuterWidth, isRTL, setAttribute } from '@primeuix/utils/dom';\nimport { localeComparator, resolveFieldData, sort } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport { getVNodeProp, HelperSet } from '@primevue/core/utils';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Paginator from 'primevue/paginator';\nimport BaseTreeTable from './BaseTreeTable.vue';\nimport FooterCell from './FooterCell.vue';\nimport HeaderCell from './HeaderCell.vue';\nimport TreeTableRow from './TreeTableRow.vue';\n\nexport default {\n    name: 'TreeTable',\n    extends: BaseTreeTable,\n    inheritAttrs: false,\n    emits: [\n        'node-expand',\n        'node-collapse',\n        'update:expandedKeys',\n        'update:selectionKeys',\n        'node-select',\n        'node-unselect',\n        'update:first',\n        'update:rows',\n        'page',\n        'update:sortField',\n        'update:sortOrder',\n        'update:multiSortMeta',\n        'sort',\n        'filter',\n        'column-resize-end',\n        'update:contextMenuSelection',\n        'row-contextmenu'\n    ],\n    provide() {\n        return {\n            $columns: this.d_columns\n        };\n    },\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            d_first: this.first,\n            d_rows: this.rows,\n            d_sortField: this.sortField,\n            d_sortOrder: this.sortOrder,\n            d_multiSortMeta: this.multiSortMeta ? [...this.multiSortMeta] : [],\n            hasASelectedNode: false,\n            d_columns: new HelperSet({ type: 'Column' })\n        };\n    },\n    documentColumnResizeListener: null,\n    documentColumnResizeEndListener: null,\n    lastResizeHelperX: null,\n    resizeColumnElement: null,\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        },\n        first(newValue) {\n            this.d_first = newValue;\n        },\n        rows(newValue) {\n            this.d_rows = newValue;\n        },\n        sortField(newValue) {\n            this.d_sortField = newValue;\n        },\n        sortOrder(newValue) {\n            this.d_sortOrder = newValue;\n        },\n        multiSortMeta(newValue) {\n            this.d_multiSortMeta = newValue;\n        }\n    },\n    beforeUnmount() {\n        this.destroyStyleElement();\n        this.d_columns.clear();\n    },\n    methods: {\n        columnProp(col, prop) {\n            return getVNodeProp(col, prop);\n        },\n        ptHeaderCellOptions(column) {\n            return {\n                context: {\n                    frozen: this.columnProp(column, 'frozen')\n                }\n            };\n        },\n        onNodeToggle(node) {\n            const key = this.nodeKey(node);\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            } else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = { ...this.d_expandedKeys };\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.rowSelectionMode && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        nodeKey(node) {\n            return resolveFieldData(node, this.dataKey);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const nodeKey = this.nodeKey(node);\n            const metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[nodeKey];\n                }\n\n                this.$emit('node-unselect', node);\n            } else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : this.selectionKeys ? { ...this.selectionKeys } : {};\n                }\n\n                _selectionKeys[nodeKey] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const nodeKey = this.nodeKey(node);\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = {};\n                    _selectionKeys[nodeKey] = true;\n                    this.$emit('node-select', node);\n                }\n            } else {\n                if (selected) {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[nodeKey];\n\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n                    _selectionKeys[nodeKey] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check) this.$emit('node-select', event.node);\n            else this.$emit('node-unselect', event.node);\n        },\n        onRowRightClick(event) {\n            if (this.contextMenu) {\n                clearSelection();\n                event.originalEvent.target.focus();\n            }\n\n            this.$emit('update:contextMenuSelection', event.node);\n            this.$emit('row-contextmenu', event);\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        onPage(event) {\n            this.d_first = event.first;\n            this.d_rows = event.rows;\n\n            let pageEvent = this.createLazyLoadEvent(event);\n\n            pageEvent.pageCount = event.pageCount;\n            pageEvent.page = event.page;\n\n            this.d_expandedKeys = {};\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n            this.$emit('update:first', this.d_first);\n            this.$emit('update:rows', this.d_rows);\n            this.$emit('page', pageEvent);\n        },\n        resetPage() {\n            this.d_first = 0;\n            this.$emit('update:first', this.d_first);\n        },\n        getFilterColumnHeaderClass(column) {\n            return [this.cx('headerCell', { column }), this.columnProp(column, 'filterHeaderClass')];\n        },\n        onColumnHeaderClick(e) {\n            let event = e.originalEvent;\n            let column = e.column;\n\n            if (this.columnProp(column, 'sortable')) {\n                const targetNode = event.target;\n                const columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n\n                if (\n                    getAttribute(targetNode, 'data-p-sortable-column') === true ||\n                    getAttribute(targetNode, 'data-pc-section') === 'columntitle' ||\n                    getAttribute(targetNode, 'data-pc-section') === 'columnheadercontent' ||\n                    getAttribute(targetNode, 'data-pc-section') === 'sorticon' ||\n                    getAttribute(targetNode.parentElement, 'data-pc-section') === 'sorticon' ||\n                    getAttribute(targetNode.parentElement.parentElement, 'data-pc-section') === 'sorticon' ||\n                    targetNode.closest('[data-p-sortable-column=\"true\"]')\n                ) {\n                    clearSelection();\n\n                    if (this.sortMode === 'single') {\n                        if (this.d_sortField === columnField) {\n                            if (this.removableSort && this.d_sortOrder * -1 === this.defaultSortOrder) {\n                                this.d_sortOrder = null;\n                                this.d_sortField = null;\n                            } else {\n                                this.d_sortOrder = this.d_sortOrder * -1;\n                            }\n                        } else {\n                            this.d_sortOrder = this.defaultSortOrder;\n                            this.d_sortField = columnField;\n                        }\n\n                        this.$emit('update:sortField', this.d_sortField);\n                        this.$emit('update:sortOrder', this.d_sortOrder);\n                        this.resetPage();\n                    } else if (this.sortMode === 'multiple') {\n                        let metaKey = event.metaKey || event.ctrlKey;\n\n                        if (!metaKey) {\n                            this.d_multiSortMeta = this.d_multiSortMeta.filter((meta) => meta.field === columnField);\n                        }\n\n                        this.addMultiSortField(columnField);\n                        this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n                    }\n\n                    this.$emit('sort', this.createLazyLoadEvent(event));\n                }\n            }\n        },\n        addMultiSortField(field) {\n            let index = this.d_multiSortMeta.findIndex((meta) => meta.field === field);\n\n            if (index >= 0) {\n                if (this.removableSort && this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder) this.d_multiSortMeta.splice(index, 1);\n                else this.d_multiSortMeta[index] = { field: field, order: this.d_multiSortMeta[index].order * -1 };\n            } else {\n                this.d_multiSortMeta.push({ field: field, order: this.defaultSortOrder });\n            }\n\n            this.d_multiSortMeta = [...this.d_multiSortMeta];\n        },\n        sortSingle(nodes) {\n            return this.sortNodesSingle(nodes);\n        },\n        sortNodesSingle(nodes) {\n            let _nodes = [...nodes];\n            const comparer = localeComparator();\n\n            _nodes.sort((node1, node2) => {\n                const value1 = resolveFieldData(node1.data, this.d_sortField);\n                const value2 = resolveFieldData(node2.data, this.d_sortField);\n\n                return sort(value1, value2, this.d_sortOrder, comparer);\n            });\n\n            return _nodes;\n        },\n        sortMultiple(nodes) {\n            return this.sortNodesMultiple(nodes);\n        },\n        sortNodesMultiple(nodes) {\n            let _nodes = [...nodes];\n\n            _nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, 0);\n            });\n\n            return _nodes;\n        },\n        multisortField(node1, node2, index) {\n            const value1 = resolveFieldData(node1.data, this.d_multiSortMeta[index].field);\n            const value2 = resolveFieldData(node2.data, this.d_multiSortMeta[index].field);\n            const comparer = localeComparator();\n\n            if (value1 === value2) {\n                return this.d_multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, index + 1) : 0;\n            }\n\n            return sort(value1, value2, this.d_multiSortMeta[index].order, comparer);\n        },\n        filter(value) {\n            let filteredNodes = [];\n            const strict = this.filterMode === 'strict';\n\n            for (let node of value) {\n                let copyNode = { ...node };\n                let localMatch = true;\n                let globalMatch = false;\n\n                for (let j = 0; j < this.columns.length; j++) {\n                    let col = this.columns[j];\n                    let filterField = this.columnProp(col, 'filterField') || this.columnProp(col, 'field');\n\n                    //local\n                    if (Object.prototype.hasOwnProperty.call(this.filters, filterField)) {\n                        let filterMatchMode = this.columnProp(col, 'filterMatchMode') || 'startsWith';\n                        let filterValue = this.filters[filterField];\n                        let filterConstraint = FilterService.filters[filterMatchMode];\n                        let paramsWithoutNode = { filterField, filterValue, filterConstraint, strict };\n\n                        if (\n                            (strict && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                            (!strict && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))\n                        ) {\n                            localMatch = false;\n                        }\n\n                        if (!localMatch) {\n                            break;\n                        }\n                    }\n\n                    //global\n                    if (this.hasGlobalFilter() && !globalMatch) {\n                        let copyNodeForGlobal = { ...copyNode };\n                        let filterValue = this.filters['global'];\n                        let filterConstraint = FilterService.filters['contains'];\n                        let globalFilterParamsWithoutNode = { filterField, filterValue, filterConstraint, strict };\n\n                        if (\n                            (strict && (this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode))) ||\n                            (!strict && (this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode)))\n                        ) {\n                            globalMatch = true;\n                            copyNode = copyNodeForGlobal;\n                        }\n                    }\n                }\n\n                let matches = localMatch;\n\n                if (this.hasGlobalFilter()) {\n                    matches = localMatch && globalMatch;\n                }\n\n                if (matches) {\n                    filteredNodes.push(copyNode);\n                }\n            }\n\n            let filterEvent = this.createLazyLoadEvent(event);\n\n            filterEvent.filteredValue = filteredNodes;\n            this.$emit('filter', filterEvent);\n\n            return filteredNodes;\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n\n                if (node.children) {\n                    let childNodes = [...node.children];\n\n                    node.children = [];\n\n                    for (let childNode of childNodes) {\n                        let copyChildNode = { ...childNode };\n\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, { filterField, filterValue, filterConstraint, strict }) {\n            let matched = false;\n            let dataFieldValue = resolveFieldData(node.data, filterField);\n\n            if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n                matched = true;\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, strict }) || matched;\n            }\n\n            return matched;\n        },\n        isNodeSelected(node) {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)] === true : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        createLazyLoadEvent(event) {\n            let filterMatchModes;\n\n            if (this.hasFilters()) {\n                filterMatchModes = {};\n                this.columns.forEach((col) => {\n                    if (this.columnProp(col, 'field')) {\n                        filterMatchModes[col.props.field] = this.columnProp(col, 'filterMatchMode');\n                    }\n                });\n            }\n\n            return {\n                originalEvent: event,\n                first: this.d_first,\n                rows: this.d_rows,\n                sortField: this.d_sortField,\n                sortOrder: this.d_sortOrder,\n                multiSortMeta: this.d_multiSortMeta,\n                filters: this.filters,\n                filterMatchModes: filterMatchModes\n            };\n        },\n        onColumnResizeStart(event) {\n            let containerLeft = getOffset(this.$el).left;\n\n            this.resizeColumnElement = event.target.parentElement;\n            this.columnResizing = true;\n            this.lastResizeHelperX = event.pageX - containerLeft + this.$el.scrollLeft;\n\n            this.bindColumnResizeEvents();\n        },\n        onColumnResize(event) {\n            let containerLeft = getOffset(this.$el).left;\n\n            this.$el.setAttribute('data-p-unselectable-text', 'true');\n            !this.isUnstyled && addStyle(this.$el, { 'user-select': 'none' });\n            this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n            this.$refs.resizeHelper.style.top = 0 + 'px';\n            this.$refs.resizeHelper.style.left = event.pageX - containerLeft + this.$el.scrollLeft + 'px';\n\n            this.$refs.resizeHelper.style.display = 'block';\n        },\n        onColumnResizeEnd() {\n            let delta = isRTL(this.$el) ? this.lastResizeHelperX - this.$refs.resizeHelper.offsetLeft : this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n            let columnWidth = this.resizeColumnElement.offsetWidth;\n            let newColumnWidth = columnWidth + delta;\n            let minWidth = this.resizeColumnElement.style.minWidth || 15;\n\n            if (columnWidth + delta > parseInt(minWidth, 10)) {\n                if (this.columnResizeMode === 'fit') {\n                    let nextColumn = this.resizeColumnElement.nextElementSibling;\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > 15) {\n                        this.resizeTableCells(newColumnWidth, nextColumnWidth);\n                    }\n                } else if (this.columnResizeMode === 'expand') {\n                    const tableWidth = this.$refs.table.offsetWidth + delta + 'px';\n\n                    const updateTableWidth = (el) => {\n                        !!el && (el.style.width = el.style.minWidth = tableWidth);\n                    };\n\n                    // Reasoning: resize table cells before updating the table width so that it can use existing computed cell widths and adjust only the one column.\n                    this.resizeTableCells(newColumnWidth);\n                    updateTableWidth(this.$refs.table);\n                }\n\n                this.$emit('column-resize-end', {\n                    element: this.resizeColumnElement,\n                    delta: delta\n                });\n            }\n\n            this.$refs.resizeHelper.style.display = 'none';\n            this.resizeColumn = null;\n            this.$el.removeAttribute('data-p-unselectable-text');\n            !this.isUnstyled && (this.$el.style['user-select'] = '');\n\n            this.unbindColumnResizeEvents();\n        },\n        resizeTableCells(newColumnWidth, nextColumnWidth) {\n            let colIndex = getIndex(this.resizeColumnElement);\n            let widths = [];\n            let headers = find(this.$refs.table, 'thead[data-pc-section=\"thead\"] > tr > th');\n\n            headers.forEach((header) => widths.push(getOuterWidth(header)));\n\n            this.destroyStyleElement();\n            this.createStyleElement();\n\n            let innerHTML = '';\n            let selector = `[data-pc-name=\"treetable\"][${this.$attrSelector}] > [data-pc-section=\"tablecontainer\"] > table[data-pc-section=\"table\"]`;\n\n            widths.forEach((width, index) => {\n                let colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width;\n                let style = `width: ${colWidth}px !important; max-width: ${colWidth}px !important`;\n\n                innerHTML += `\n                    ${selector} > thead[data-pc-section=\"thead\"] > tr > th:nth-child(${index + 1}),\n                    ${selector} > tbody[data-pc-section=\"tbody\"] > tr > td:nth-child(${index + 1}),\n                    ${selector} > tfoot[data-pc-section=\"tfoot\"] > tr > td:nth-child(${index + 1}) {\n                        ${style}\n                    }\n                `;\n            });\n\n            this.styleElement.innerHTML = innerHTML;\n        },\n        bindColumnResizeEvents() {\n            if (!this.documentColumnResizeListener) {\n                this.documentColumnResizeListener = document.addEventListener('mousemove', (event) => {\n                    if (this.columnResizing) {\n                        this.onColumnResize(event);\n                    }\n                });\n            }\n\n            if (!this.documentColumnResizeEndListener) {\n                this.documentColumnResizeEndListener = document.addEventListener('mouseup', () => {\n                    if (this.columnResizing) {\n                        this.columnResizing = false;\n                        this.onColumnResizeEnd();\n                    }\n                });\n            }\n        },\n        unbindColumnResizeEvents() {\n            if (this.documentColumnResizeListener) {\n                document.removeEventListener('document', this.documentColumnResizeListener);\n                this.documentColumnResizeListener = null;\n            }\n\n            if (this.documentColumnResizeEndListener) {\n                document.removeEventListener('document', this.documentColumnResizeEndListener);\n                this.documentColumnResizeEndListener = null;\n            }\n        },\n        onColumnKeyDown(event, col) {\n            if ((event.code === 'Enter' || event.code === 'NumpadEnter') && event.currentTarget.nodeName === 'TH' && getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n                this.onColumnHeaderClick(event, col);\n            }\n        },\n        hasColumnFilter() {\n            if (this.columns) {\n                for (let col of this.columns) {\n                    if (col.children && col.children.filter) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n        hasFilters() {\n            return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n        },\n        hasGlobalFilter() {\n            return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n        },\n        getItemLabel(node) {\n            return node.data.name;\n        },\n        createStyleElement() {\n            this.styleElement = document.createElement('style');\n            this.styleElement.type = 'text/css';\n            setAttribute(this.styleElement, 'nonce', this.$primevue?.config?.csp?.nonce);\n            document.head.appendChild(this.styleElement);\n        },\n        destroyStyleElement() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        },\n        setTabindex(node, index) {\n            if (this.isNodeSelected(node)) {\n                this.hasASelectedNode = true;\n\n                return 0;\n            }\n\n            if (this.selectionMode) {\n                if (!this.isNodeSelected(node) && index === 0 && !this.hasASelectedNode) return 0;\n            } else if (!this.selectionMode && index === 0) {\n                return 0;\n            }\n\n            return -1;\n        }\n    },\n    computed: {\n        columns() {\n            return this.d_columns.get(this);\n        },\n        processedData() {\n            if (this.lazy) {\n                return this.value;\n            } else {\n                if (this.value && this.value.length) {\n                    let data = this.value;\n\n                    if (this.sorted) {\n                        if (this.sortMode === 'single') data = this.sortSingle(data);\n                        else if (this.sortMode === 'multiple') data = this.sortMultiple(data);\n                    }\n\n                    if (this.hasFilters()) {\n                        data = this.filter(data);\n                    }\n\n                    return data;\n                } else {\n                    return null;\n                }\n            }\n        },\n        dataToRender() {\n            const data = this.processedData;\n\n            if (this.paginator) {\n                const first = this.lazy ? 0 : this.d_first;\n\n                return data.slice(first, first + this.d_rows);\n            } else {\n                return data;\n            }\n        },\n        empty() {\n            const data = this.processedData;\n\n            return !data || data.length === 0;\n        },\n        sorted() {\n            return this.d_sortField || (this.d_multiSortMeta && this.d_multiSortMeta.length > 0);\n        },\n        hasFooter() {\n            let hasFooter = false;\n\n            for (let col of this.columns) {\n                if (this.columnProp(col, 'footer') || (col.children && col.children.footer)) {\n                    hasFooter = true;\n                    break;\n                }\n            }\n\n            return hasFooter;\n        },\n        paginatorTop() {\n            return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n        },\n        paginatorBottom() {\n            return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n        },\n        singleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'single';\n        },\n        multipleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'multiple';\n        },\n        rowSelectionMode() {\n            return this.singleSelectionMode || this.multipleSelectionMode;\n        },\n        totalRecordsLength() {\n            if (this.lazy) {\n                return this.totalRecords;\n            } else {\n                const data = this.processedData;\n\n                return data ? data.length : 0;\n            }\n        }\n    },\n    components: {\n        TTRow: TreeTableRow,\n        TTPaginator: Paginator,\n        TTHeaderCell: HeaderCell,\n        TTFooterCell: FooterCell,\n        SpinnerIcon: SpinnerIcon\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}