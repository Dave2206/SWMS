{"ast":null,"code":"import { mergeProps, openBlock, createBlock, Transition, withCtx, withDirectives, resolveDynamicComponent, createElementVNode, renderSlot, vShow, createCommentVNode, normalizeClass } from 'vue';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport AccordionContentStyle from 'primevue/accordioncontent/style';\nvar script$1 = {\n  name: 'BaseAccordionContent',\n  \"extends\": BaseComponent,\n  props: {\n    as: {\n      type: [String, Object],\n      \"default\": 'DIV'\n    },\n    asChild: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  style: AccordionContentStyle,\n  provide: function provide() {\n    return {\n      $pcAccordionContent: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script = {\n  name: 'AccordionContent',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  inject: ['$pcAccordion', '$pcAccordionPanel'],\n  computed: {\n    id: function id() {\n      return \"\".concat(this.$pcAccordion.id, \"_accordioncontent_\").concat(this.$pcAccordionPanel.value);\n    },\n    ariaLabelledby: function ariaLabelledby() {\n      return \"\".concat(this.$pcAccordion.id, \"_accordionheader_\").concat(this.$pcAccordionPanel.value);\n    },\n    attrs: function attrs() {\n      return mergeProps(this.a11yAttrs, this.ptmi('root', this.ptParams));\n    },\n    a11yAttrs: function a11yAttrs() {\n      return {\n        id: this.id,\n        role: 'region',\n        'aria-labelledby': this.ariaLabelledby,\n        'data-pc-name': 'accordioncontent',\n        'data-p-active': this.$pcAccordionPanel.active\n      };\n    },\n    ptParams: function ptParams() {\n      return {\n        context: {\n          active: this.$pcAccordionPanel.active\n        }\n      };\n    }\n  }\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return !_ctx.asChild ? (openBlock(), createBlock(Transition, mergeProps({\n    key: 0,\n    name: \"p-toggleable-content\"\n  }, _ctx.ptm('transition', $options.ptParams)), {\n    \"default\": withCtx(function () {\n      return [($options.$pcAccordion.lazy ? $options.$pcAccordionPanel.active : true) ? withDirectives((openBlock(), createBlock(resolveDynamicComponent(_ctx.as), mergeProps({\n        key: 0,\n        \"class\": _ctx.cx('root')\n      }, $options.attrs), {\n        \"default\": withCtx(function () {\n          return [createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('content')\n          }, _ctx.ptm('content', $options.ptParams)), [renderSlot(_ctx.$slots, \"default\")], 16)];\n        }),\n        _: 3\n      }, 16, [\"class\"])), [[vShow, $options.$pcAccordion.lazy ? true : $options.$pcAccordionPanel.active]]) : createCommentVNode(\"\", true)];\n    }),\n    _: 3\n  }, 16)) : renderSlot(_ctx.$slots, \"default\", {\n    key: 1,\n    \"class\": normalizeClass(_ctx.cx('root')),\n    active: $options.$pcAccordionPanel.active,\n    a11yAttrs: $options.a11yAttrs\n  });\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","as","type","String","Object","asChild","Boolean","style","AccordionContentStyle","provide","$pcAccordionContent","$parentInstance","script","inheritAttrs","inject","computed","id","concat","$pcAccordion","$pcAccordionPanel","value","ariaLabelledby","attrs","mergeProps","a11yAttrs","ptmi","ptParams","role","active","context","_ctx","openBlock","createBlock","Transition","ptm","$options","lazy","withDirectives","resolveDynamicComponent","cx","createElementVNode","renderSlot","$slots","vShow","createCommentVNode","normalizeClass"],"sources":["../../src/accordioncontent/BaseAccordionContent.vue","../../src/accordioncontent/AccordionContent.vue","../../src/accordioncontent/AccordionContent.vue?vue&type=template&id=55360607&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport AccordionContentStyle from 'primevue/accordioncontent/style';\n\nexport default {\n    name: 'BaseAccordionContent',\n    extends: BaseComponent,\n    props: {\n        as: {\n            type: [String, Object],\n            default: 'DIV'\n        },\n        asChild: {\n            type: Boolean,\n            default: false\n        }\n    },\n    style: AccordionContentStyle,\n    provide() {\n        return {\n            $pcAccordionContent: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <template v-if=\"!asChild\">\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition', ptParams)\">\n            <component v-if=\"$pcAccordion.lazy ? $pcAccordionPanel.active : true\" v-show=\"$pcAccordion.lazy ? true : $pcAccordionPanel.active\" :is=\"as\" :class=\"cx('root')\" v-bind=\"attrs\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content', ptParams)\">\n                    <slot></slot>\n                </div>\n            </component>\n        </transition>\n    </template>\n    <slot v-else :class=\"cx('root')\" :active=\"$pcAccordionPanel.active\" :a11yAttrs=\"a11yAttrs\"></slot>\n</template>\n\n<script>\nimport { mergeProps } from 'vue';\nimport BaseAccordionContent from './BaseAccordionContent.vue';\n\nexport default {\n    name: 'AccordionContent',\n    extends: BaseAccordionContent,\n    inheritAttrs: false,\n    inject: ['$pcAccordion', '$pcAccordionPanel'],\n    computed: {\n        id() {\n            return `${this.$pcAccordion.id}_accordioncontent_${this.$pcAccordionPanel.value}`;\n        },\n        ariaLabelledby() {\n            return `${this.$pcAccordion.id}_accordionheader_${this.$pcAccordionPanel.value}`;\n        },\n        attrs() {\n            return mergeProps(this.a11yAttrs, this.ptmi('root', this.ptParams));\n        },\n        a11yAttrs() {\n            return {\n                id: this.id,\n                role: 'region',\n                'aria-labelledby': this.ariaLabelledby,\n                'data-pc-name': 'accordioncontent',\n                'data-p-active': this.$pcAccordionPanel.active\n            };\n        },\n        ptParams() {\n            return {\n                context: {\n                    active: this.$pcAccordionPanel.active\n                }\n            };\n        }\n    }\n};\n</script>\n","<template>\n    <template v-if=\"!asChild\">\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition', ptParams)\">\n            <component v-if=\"$pcAccordion.lazy ? $pcAccordionPanel.active : true\" v-show=\"$pcAccordion.lazy ? true : $pcAccordionPanel.active\" :is=\"as\" :class=\"cx('root')\" v-bind=\"attrs\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content', ptParams)\">\n                    <slot></slot>\n                </div>\n            </component>\n        </transition>\n    </template>\n    <slot v-else :class=\"cx('root')\" :active=\"$pcAccordionPanel.active\" :a11yAttrs=\"a11yAttrs\"></slot>\n</template>\n\n<script>\nimport { mergeProps } from 'vue';\nimport BaseAccordionContent from './BaseAccordionContent.vue';\n\nexport default {\n    name: 'AccordionContent',\n    extends: BaseAccordionContent,\n    inheritAttrs: false,\n    inject: ['$pcAccordion', '$pcAccordionPanel'],\n    computed: {\n        id() {\n            return `${this.$pcAccordion.id}_accordioncontent_${this.$pcAccordionPanel.value}`;\n        },\n        ariaLabelledby() {\n            return `${this.$pcAccordion.id}_accordionheader_${this.$pcAccordionPanel.value}`;\n        },\n        attrs() {\n            return mergeProps(this.a11yAttrs, this.ptmi('root', this.ptParams));\n        },\n        a11yAttrs() {\n            return {\n                id: this.id,\n                role: 'region',\n                'aria-labelledby': this.ariaLabelledby,\n                'data-pc-name': 'accordioncontent',\n                'data-p-active': this.$pcAccordionPanel.active\n            };\n        },\n        ptParams() {\n            return {\n                context: {\n                    active: this.$pcAccordionPanel.active\n                }\n            };\n        }\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}