{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TerminalService from 'primevue/terminalservice';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TerminalStyle from 'primevue/terminal/style';\nimport { openBlock, createElementBlock, mergeProps, toDisplayString, createCommentVNode, createElementVNode, Fragment, renderList, withDirectives, vModelText } from 'vue';\nvar script$1 = {\n  name: 'BaseTerminal',\n  \"extends\": BaseComponent,\n  props: {\n    welcomeMessage: {\n      type: String,\n      \"default\": null\n    },\n    prompt: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: TerminalStyle,\n  provide: function provide() {\n    return {\n      $pcTerminal: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script = {\n  name: 'Terminal',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  data: function data() {\n    return {\n      commandText: null,\n      commands: []\n    };\n  },\n  mounted: function mounted() {\n    TerminalService.on('response', this.responseListener);\n    this.$refs.input.focus();\n  },\n  updated: function updated() {\n    this.$el.scrollTop = this.$el.scrollHeight;\n  },\n  beforeUnmount: function beforeUnmount() {\n    TerminalService.off('response', this.responseListener);\n  },\n  methods: {\n    onClick: function onClick() {\n      this.$refs.input.focus();\n    },\n    onKeydown: function onKeydown(event) {\n      if (event.key === 'Enter' && this.commandText) {\n        this.commands.push({\n          text: this.commandText\n        });\n        TerminalService.emit('command', this.commandText);\n        this.commandText = '';\n      }\n    },\n    responseListener: function responseListener(response) {\n      this.commands[this.commands.length - 1].response = response;\n    }\n  }\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [_ctx.welcomeMessage ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('welcomeMessage')\n  }, _ctx.ptm('welcomeMessage')), toDisplayString(_ctx.welcomeMessage), 17)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('commandList')\n  }, _ctx.ptm('content')), [(openBlock(true), createElementBlock(Fragment, null, renderList($data.commands, function (command, i) {\n    return openBlock(), createElementBlock(\"div\", mergeProps({\n      key: command.text + i.toString(),\n      \"class\": _ctx.cx('command'),\n      ref_for: true\n    }, _ctx.ptm('commands')), [createElementVNode(\"span\", mergeProps({\n      \"class\": _ctx.cx('promptLabel'),\n      ref_for: true\n    }, _ctx.ptm('prompt')), toDisplayString(_ctx.prompt), 17), createElementVNode(\"span\", mergeProps({\n      \"class\": _ctx.cx('commandValue'),\n      ref_for: true\n    }, _ctx.ptm('command')), toDisplayString(command.text), 17), createElementVNode(\"div\", mergeProps({\n      \"class\": _ctx.cx('commandResponse'),\n      \"aria-live\": \"polite\",\n      ref_for: true\n    }, _ctx.ptm('response')), toDisplayString(command.response), 17)], 16);\n  }), 128))], 16), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('prompt')\n  }, _ctx.ptm('container')), [createElementVNode(\"span\", mergeProps({\n    \"class\": _ctx.cx('promptLabel')\n  }, _ctx.ptm('prompt')), toDisplayString(_ctx.prompt), 17), withDirectives(createElementVNode(\"input\", mergeProps({\n    ref: \"input\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.commandText = $event;\n    }),\n    \"class\": _ctx.cx('promptValue'),\n    type: \"text\",\n    autocomplete: \"off\",\n    onKeydown: _cache[1] || (_cache[1] = function () {\n      return $options.onKeydown && $options.onKeydown.apply($options, arguments);\n    })\n  }, _ctx.ptm('commandText')), null, 16), [[vModelText, $data.commandText]])], 16)], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","welcomeMessage","type","String","prompt","style","TerminalStyle","provide","$pcTerminal","$parentInstance","script","inheritAttrs","data","commandText","commands","mounted","TerminalService","on","responseListener","$refs","input","focus","updated","$el","scrollTop","scrollHeight","beforeUnmount","off","methods","onClick","onKeydown","event","key","push","text","emit","response","length","openBlock","createElementBlock","mergeProps","_ctx","cx","_cache","$options","apply","arguments","ptmi","ptm","toDisplayString","createCommentVNode","createElementVNode","Fragment","renderList","$data","command","i","toString","withDirectives","ref","$event","autocomplete","vModelText"],"sources":["../../src/terminal/BaseTerminal.vue","../../src/terminal/Terminal.vue","../../src/terminal/Terminal.vue?vue&type=template&id=df319ce0&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TerminalStyle from 'primevue/terminal/style';\n\nexport default {\n    name: 'BaseTerminal',\n    extends: BaseComponent,\n    props: {\n        welcomeMessage: {\n            type: String,\n            default: null\n        },\n        prompt: {\n            type: String,\n            default: null\n        }\n    },\n    style: TerminalStyle,\n    provide() {\n        return {\n            $pcTerminal: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" @click=\"onClick\" v-bind=\"ptmi('root')\">\n        <div v-if=\"welcomeMessage\" :class=\"cx('welcomeMessage')\" v-bind=\"ptm('welcomeMessage')\">{{ welcomeMessage }}</div>\n        <div :class=\"cx('commandList')\" v-bind=\"ptm('content')\">\n            <div v-for=\"(command, i) of commands\" :key=\"command.text + i.toString()\" :class=\"cx('command')\" v-bind=\"ptm('commands')\">\n                <span :class=\"cx('promptLabel')\" v-bind=\"ptm('prompt')\">{{ prompt }}</span>\n                <span :class=\"cx('commandValue')\" v-bind=\"ptm('command')\">{{ command.text }}</span>\n                <div :class=\"cx('commandResponse')\" aria-live=\"polite\" v-bind=\"ptm('response')\">{{ command.response }}</div>\n            </div>\n        </div>\n        <div :class=\"cx('prompt')\" v-bind=\"ptm('container')\">\n            <span :class=\"cx('promptLabel')\" v-bind=\"ptm('prompt')\">{{ prompt }}</span>\n            <input ref=\"input\" v-model=\"commandText\" :class=\"cx('promptValue')\" type=\"text\" autocomplete=\"off\" @keydown=\"onKeydown\" v-bind=\"ptm('commandText')\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport TerminalService from 'primevue/terminalservice';\nimport BaseTerminal from './BaseTerminal.vue';\n\nexport default {\n    name: 'Terminal',\n    extends: BaseTerminal,\n    inheritAttrs: false,\n    data() {\n        return {\n            commandText: null,\n            commands: []\n        };\n    },\n    mounted() {\n        TerminalService.on('response', this.responseListener);\n        this.$refs.input.focus();\n    },\n    updated() {\n        this.$el.scrollTop = this.$el.scrollHeight;\n    },\n    beforeUnmount() {\n        TerminalService.off('response', this.responseListener);\n    },\n    methods: {\n        onClick() {\n            this.$refs.input.focus();\n        },\n        onKeydown(event) {\n            if (event.key === 'Enter' && this.commandText) {\n                this.commands.push({ text: this.commandText });\n                TerminalService.emit('command', this.commandText);\n                this.commandText = '';\n            }\n        },\n        responseListener(response) {\n            this.commands[this.commands.length - 1].response = response;\n        }\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" @click=\"onClick\" v-bind=\"ptmi('root')\">\n        <div v-if=\"welcomeMessage\" :class=\"cx('welcomeMessage')\" v-bind=\"ptm('welcomeMessage')\">{{ welcomeMessage }}</div>\n        <div :class=\"cx('commandList')\" v-bind=\"ptm('content')\">\n            <div v-for=\"(command, i) of commands\" :key=\"command.text + i.toString()\" :class=\"cx('command')\" v-bind=\"ptm('commands')\">\n                <span :class=\"cx('promptLabel')\" v-bind=\"ptm('prompt')\">{{ prompt }}</span>\n                <span :class=\"cx('commandValue')\" v-bind=\"ptm('command')\">{{ command.text }}</span>\n                <div :class=\"cx('commandResponse')\" aria-live=\"polite\" v-bind=\"ptm('response')\">{{ command.response }}</div>\n            </div>\n        </div>\n        <div :class=\"cx('prompt')\" v-bind=\"ptm('container')\">\n            <span :class=\"cx('promptLabel')\" v-bind=\"ptm('prompt')\">{{ prompt }}</span>\n            <input ref=\"input\" v-model=\"commandText\" :class=\"cx('promptValue')\" type=\"text\" autocomplete=\"off\" @keydown=\"onKeydown\" v-bind=\"ptm('commandText')\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport TerminalService from 'primevue/terminalservice';\nimport BaseTerminal from './BaseTerminal.vue';\n\nexport default {\n    name: 'Terminal',\n    extends: BaseTerminal,\n    inheritAttrs: false,\n    data() {\n        return {\n            commandText: null,\n            commands: []\n        };\n    },\n    mounted() {\n        TerminalService.on('response', this.responseListener);\n        this.$refs.input.focus();\n    },\n    updated() {\n        this.$el.scrollTop = this.$el.scrollHeight;\n    },\n    beforeUnmount() {\n        TerminalService.off('response', this.responseListener);\n    },\n    methods: {\n        onClick() {\n            this.$refs.input.focus();\n        },\n        onKeydown(event) {\n            if (event.key === 'Enter' && this.commandText) {\n                this.commands.push({ text: this.commandText });\n                TerminalService.emit('command', this.commandText);\n                this.commandText = '';\n            }\n        },\n        responseListener(response) {\n            this.commands[this.commands.length - 1].response = response;\n        }\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}