{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Chip from 'primevue/chip';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputChipsStyle from 'primevue/inputchips/style';\nimport { resolveComponent, openBlock, createElementBlock, mergeProps, createElementVNode, Fragment, renderList, renderSlot, normalizeClass, createVNode, withCtx } from 'vue';\nvar script$1 = {\n  name: 'BaseInputChips',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: {\n      type: Array,\n      \"default\": null\n    },\n    max: {\n      type: Number,\n      \"default\": null\n    },\n    separator: {\n      type: [String, Object],\n      \"default\": null\n    },\n    addOnBlur: {\n      type: Boolean,\n      \"default\": null\n    },\n    allowDuplicate: {\n      type: Boolean,\n      \"default\": true\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    variant: {\n      type: String,\n      \"default\": null\n    },\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputProps: {\n      type: null,\n      \"default\": null\n    },\n    removeTokenIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    chipIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: InputChipsStyle,\n  provide: function provide() {\n    return {\n      $pcInputChips: this,\n      $parentInstance: this\n    };\n  }\n};\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script = {\n  name: 'InputChips',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'add', 'remove', 'focus', 'blur'],\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      inputValue: null,\n      focused: false,\n      focusedIndex: null\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    }\n  },\n  mounted: function mounted() {\n    console.warn('Deprecated since v4. Use AutoComplete component instead with its typeahead property.');\n    this.id = this.id || UniqueComponentId();\n  },\n  methods: {\n    onWrapperClick: function onWrapperClick() {\n      this.$refs.input.focus();\n    },\n    onInput: function onInput(event) {\n      this.inputValue = event.target.value;\n      this.focusedIndex = null;\n    },\n    onFocus: function onFocus(event) {\n      this.focused = true;\n      this.focusedIndex = null;\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focused = false;\n      this.focusedIndex = null;\n      if (this.addOnBlur) {\n        this.addItem(event, event.target.value, false);\n      }\n      this.$emit('blur', event);\n    },\n    onKeyDown: function onKeyDown(event) {\n      var inputValue = event.target.value;\n      switch (event.code) {\n        case 'Backspace':\n          if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n            if (this.focusedIndex !== null) {\n              this.removeItem(event, this.focusedIndex);\n            } else this.removeItem(event, this.modelValue.length - 1);\n          }\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          if (inputValue && inputValue.trim().length && !this.maxedOut) {\n            this.addItem(event, inputValue, true);\n          }\n          break;\n        case 'ArrowLeft':\n          if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n            this.$refs.container.focus();\n          }\n          break;\n        case 'ArrowRight':\n          event.stopPropagation();\n          break;\n        default:\n          if (this.separator) {\n            if (this.separator === event.key || event.key.match(this.separator)) {\n              this.addItem(event, inputValue, true);\n            }\n          }\n          break;\n      }\n    },\n    onPaste: function onPaste(event) {\n      var _this = this;\n      if (this.separator) {\n        var separator = this.separator.replace('\\\\n', '\\n').replace('\\\\r', '\\r').replace('\\\\t', '\\t');\n        var pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n        if (pastedData) {\n          var value = this.modelValue || [];\n          var pastedValues = pastedData.split(separator);\n          pastedValues = pastedValues.filter(function (val) {\n            return _this.allowDuplicate || value.indexOf(val) === -1;\n          });\n          value = [].concat(_toConsumableArray(value), _toConsumableArray(pastedValues));\n          this.updateModel(event, value, true);\n        }\n      }\n    },\n    onContainerFocus: function onContainerFocus() {\n      this.focused = true;\n    },\n    onContainerBlur: function onContainerBlur() {\n      this.focusedIndex = -1;\n      this.focused = false;\n    },\n    onContainerKeyDown: function onContainerKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowLeft':\n          this.onArrowLeftKeyOn(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKeyOn(event);\n          break;\n        case 'Backspace':\n          this.onBackspaceKeyOn(event);\n          break;\n      }\n    },\n    onArrowLeftKeyOn: function onArrowLeftKeyOn() {\n      if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n        this.focusedIndex = this.focusedIndex === null ? this.modelValue.length - 1 : this.focusedIndex - 1;\n        if (this.focusedIndex < 0) this.focusedIndex = 0;\n      }\n    },\n    onArrowRightKeyOn: function onArrowRightKeyOn() {\n      if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n        if (this.focusedIndex === this.modelValue.length - 1) {\n          this.focusedIndex = null;\n          this.$refs.input.focus();\n        } else {\n          this.focusedIndex++;\n        }\n      }\n    },\n    onBackspaceKeyOn: function onBackspaceKeyOn(event) {\n      if (this.focusedIndex !== null) {\n        this.removeItem(event, this.focusedIndex);\n      }\n    },\n    updateModel: function updateModel(event, value, preventDefault) {\n      var _this2 = this;\n      this.$emit('update:modelValue', value);\n      this.$emit('add', {\n        originalEvent: event,\n        value: value\n      });\n      this.$refs.input.value = '';\n      this.inputValue = '';\n      setTimeout(function () {\n        _this2.maxedOut && (_this2.focused = false);\n      }, 0);\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    },\n    addItem: function addItem(event, item, preventDefault) {\n      if (item && item.trim().length) {\n        var value = this.modelValue ? _toConsumableArray(this.modelValue) : [];\n        if (this.allowDuplicate || value.indexOf(item) === -1) {\n          value.push(item);\n          this.updateModel(event, value, preventDefault);\n        }\n      }\n    },\n    removeItem: function removeItem(event, index) {\n      if (this.disabled) {\n        return;\n      }\n      var values = _toConsumableArray(this.modelValue);\n      var removedItem = values.splice(index, 1);\n      this.focusedIndex = null;\n      this.$refs.input.focus();\n      this.$emit('update:modelValue', values);\n      this.$emit('remove', {\n        originalEvent: event,\n        value: removedItem\n      });\n    }\n  },\n  computed: {\n    maxedOut: function maxedOut() {\n      return this.max && this.modelValue && this.max === this.modelValue.length;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedIndex !== null ? \"\".concat(this.id, \"_inputchips_item_\").concat(this.focusedIndex) : null;\n    }\n  },\n  components: {\n    Chip: Chip\n  }\n};\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar _hoisted_1 = [\"aria-labelledby\", \"aria-label\", \"aria-activedescendant\"];\nvar _hoisted_2 = [\"id\", \"aria-label\", \"aria-setsize\", \"aria-posinset\", \"data-p-focused\"];\nvar _hoisted_3 = [\"id\", \"disabled\", \"placeholder\", \"aria-invalid\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Chip = resolveComponent(\"Chip\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [createElementVNode(\"ul\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('input'),\n    tabindex: \"-1\",\n    role: \"listbox\",\n    \"aria-orientation\": \"horizontal\",\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    onClick: _cache[5] || (_cache[5] = function ($event) {\n      return $options.onWrapperClick();\n    }),\n    onFocus: _cache[6] || (_cache[6] = function () {\n      return $options.onContainerFocus && $options.onContainerFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[7] || (_cache[7] = function () {\n      return $options.onContainerBlur && $options.onContainerBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[8] || (_cache[8] = function () {\n      return $options.onContainerKeyDown && $options.onContainerKeyDown.apply($options, arguments);\n    })\n  }, _ctx.ptm('input')), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.modelValue, function (val, i) {\n    return openBlock(), createElementBlock(\"li\", mergeProps({\n      key: \"\".concat(i, \"_\").concat(val),\n      id: $data.id + '_inputchips_item_' + i,\n      role: \"option\",\n      \"class\": _ctx.cx('chipItem', {\n        index: i\n      }),\n      \"aria-label\": val,\n      \"aria-selected\": true,\n      \"aria-setsize\": _ctx.modelValue.length,\n      \"aria-posinset\": i + 1,\n      ref_for: true\n    }, _ctx.ptm('chipItem'), {\n      \"data-p-focused\": $data.focusedIndex === i\n    }), [renderSlot(_ctx.$slots, \"chip\", {\n      \"class\": normalizeClass(_ctx.cx('pcChip')),\n      index: i,\n      value: val,\n      removeCallback: function removeCallback(event) {\n        return _ctx.removeOption(event, i);\n      }\n    }, function () {\n      return [createVNode(_component_Chip, {\n        \"class\": normalizeClass(_ctx.cx('pcChip')),\n        label: val,\n        removeIcon: _ctx.chipIcon || _ctx.removeTokenIcon,\n        removable: \"\",\n        unstyled: _ctx.unstyled,\n        onRemove: function onRemove($event) {\n          return $options.removeItem($event, i);\n        },\n        pt: _ctx.ptm('pcChip')\n      }, {\n        removeicon: withCtx(function () {\n          return [renderSlot(_ctx.$slots, _ctx.$slots.chipicon ? 'chipicon' : 'removetokenicon', {\n            \"class\": normalizeClass(_ctx.cx('chipIcon')),\n            index: i,\n            removeCallback: function removeCallback(event) {\n              return $options.removeItem(event, i);\n            }\n          })];\n        }),\n        _: 2\n      }, 1032, [\"class\", \"label\", \"removeIcon\", \"unstyled\", \"onRemove\", \"pt\"])];\n    })], 16, _hoisted_2);\n  }), 128)), createElementVNode(\"li\", mergeProps({\n    \"class\": _ctx.cx('inputItem'),\n    role: \"option\"\n  }, _ctx.ptm('inputItem')), [createElementVNode(\"input\", mergeProps({\n    ref: \"input\",\n    id: _ctx.inputId,\n    type: \"text\",\n    \"class\": _ctx.inputClass,\n    style: _ctx.inputStyle,\n    disabled: _ctx.disabled || $options.maxedOut,\n    placeholder: _ctx.placeholder,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onFocus: _cache[0] || (_cache[0] = function ($event) {\n      return $options.onFocus($event);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function ($event) {\n      return $options.onBlur($event);\n    }),\n    onInput: _cache[2] || (_cache[2] = function () {\n      return $options.onInput && $options.onInput.apply($options, arguments);\n    }),\n    onKeydown: _cache[3] || (_cache[3] = function ($event) {\n      return $options.onKeyDown($event);\n    }),\n    onPaste: _cache[4] || (_cache[4] = function ($event) {\n      return $options.onPaste($event);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.inputProps), _ctx.ptm('inputItemField'))), null, 16, _hoisted_3)], 16)], 16, _hoisted_1)], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","modelValue","type","Array","max","Number","separator","String","Object","addOnBlur","Boolean","allowDuplicate","placeholder","variant","invalid","disabled","inputId","inputClass","inputStyle","inputProps","removeTokenIcon","undefined","chipIcon","ariaLabelledby","ariaLabel","style","InputChipsStyle","provide","$pcInputChips","$parentInstance","script","inheritAttrs","emits","data","id","$attrs","inputValue","focused","focusedIndex","watch","$attrsId","newValue","UniqueComponentId","mounted","console","warn","methods","onWrapperClick","$refs","input","focus","onInput","event","target","value","onFocus","$emit","onBlur","addItem","onKeyDown","code","length","removeItem","trim","maxedOut","container","stopPropagation","key","match","onPaste","_this","replace","pastedData","clipboardData","window","getData","pastedValues","split","filter","val","indexOf","concat","_toConsumableArray","updateModel","onContainerFocus","onContainerBlur","onContainerKeyDown","onArrowLeftKeyOn","onArrowRightKeyOn","onBackspaceKeyOn","preventDefault","_this2","originalEvent","setTimeout","item","push","index","values","removedItem","splice","computed","focusedOptionId","components","Chip","openBlock","createElementBlock","mergeProps","_ctx","cx","ptmi","createElementVNode","ref","tabindex","role","$data","$options","onClick","_cache","$event","apply","arguments","onKeydown","ptm","Fragment","renderList","i","renderSlot","$slots","normalizeClass","removeCallback","removeOption","createVNode","_component_Chip","label","removeIcon","removable","unstyled","onRemove","pt","removeicon","withCtx","chipicon","_objectSpread","_hoisted_3","_hoisted_1"],"sources":["../../src/inputchips/BaseInputChips.vue","../../src/inputchips/InputChips.vue","../../src/inputchips/InputChips.vue?vue&type=template&id=c47b2d1a&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputChipsStyle from 'primevue/inputchips/style';\n\nexport default {\n    name: 'BaseInputChips',\n    extends: BaseComponent,\n    props: {\n        modelValue: {\n            type: Array,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        separator: {\n            type: [String, Object],\n            default: null\n        },\n        addOnBlur: {\n            type: Boolean,\n            default: null\n        },\n        allowDuplicate: {\n            type: Boolean,\n            default: true\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        inputProps: {\n            type: null,\n            default: null\n        },\n        removeTokenIcon: {\n            type: String,\n            default: undefined\n        },\n        chipIcon: {\n            type: String,\n            default: undefined\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: InputChipsStyle,\n    provide() {\n        return {\n            $pcInputChips: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <ul\n            ref=\"container\"\n            :class=\"cx('input')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @click=\"onWrapperClick()\"\n            @focus=\"onContainerFocus\"\n            @blur=\"onContainerBlur\"\n            @keydown=\"onContainerKeyDown\"\n            v-bind=\"ptm('input')\"\n        >\n            <li\n                v-for=\"(val, i) of modelValue\"\n                :key=\"`${i}_${val}`\"\n                :id=\"id + '_inputchips_item_' + i\"\n                role=\"option\"\n                :class=\"cx('chipItem', { index: i })\"\n                :aria-label=\"val\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"modelValue.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n                :data-p-focused=\"focusedIndex === i\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :index=\"i\" :value=\"val\" :removeCallback=\"(event) => removeOption(event, i)\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"val\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeItem($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeItem(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputItem')\" role=\"option\" v-bind=\"ptm('inputItem')\">\n                <input\n                    ref=\"input\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :class=\"inputClass\"\n                    :style=\"inputStyle\"\n                    :disabled=\"disabled || maxedOut\"\n                    :placeholder=\"placeholder\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus($event)\"\n                    @blur=\"onBlur($event)\"\n                    @input=\"onInput\"\n                    @keydown=\"onKeyDown($event)\"\n                    @paste=\"onPaste($event)\"\n                    v-bind=\"{ ...inputProps, ...ptm('inputItemField') }\"\n                />\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Chip from 'primevue/chip';\nimport BaseInputChips from './BaseInputChips.vue';\n\nexport default {\n    name: 'InputChips',\n    extends: BaseInputChips,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'add', 'remove', 'focus', 'blur'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            inputValue: null,\n            focused: false,\n            focusedIndex: null\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        }\n    },\n    mounted() {\n        console.warn('Deprecated since v4. Use AutoComplete component instead with its typeahead property.');\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        onWrapperClick() {\n            this.$refs.input.focus();\n        },\n        onInput(event) {\n            this.inputValue = event.target.value;\n            this.focusedIndex = null;\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.focusedIndex = null;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.focusedIndex = null;\n\n            if (this.addOnBlur) {\n                this.addItem(event, event.target.value, false);\n            }\n\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            const inputValue = event.target.value;\n\n            switch (event.code) {\n                case 'Backspace':\n                    if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                        if (this.focusedIndex !== null) {\n                            this.removeItem(event, this.focusedIndex);\n                        } else this.removeItem(event, this.modelValue.length - 1);\n                    }\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    if (inputValue && inputValue.trim().length && !this.maxedOut) {\n                        this.addItem(event, inputValue, true);\n                    }\n\n                    break;\n\n                case 'ArrowLeft':\n                    if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                        this.$refs.container.focus();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    event.stopPropagation();\n                    break;\n\n                default:\n                    if (this.separator) {\n                        if (this.separator === event.key || event.key.match(this.separator)) {\n                            this.addItem(event, inputValue, true);\n                        }\n                    }\n\n                    break;\n            }\n        },\n        onPaste(event) {\n            if (this.separator) {\n                let separator = this.separator.replace('\\\\n', '\\n').replace('\\\\r', '\\r').replace('\\\\t', '\\t');\n                let pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n\n                if (pastedData) {\n                    let value = this.modelValue || [];\n                    let pastedValues = pastedData.split(separator);\n\n                    pastedValues = pastedValues.filter((val) => this.allowDuplicate || value.indexOf(val) === -1);\n                    value = [...value, ...pastedValues];\n                    this.updateModel(event, value, true);\n                }\n            }\n        },\n        onContainerFocus() {\n            this.focused = true;\n        },\n        onContainerBlur() {\n            this.focusedIndex = -1;\n            this.focused = false;\n        },\n        onContainerKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOn(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOn(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOn(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowLeftKeyOn() {\n            if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                this.focusedIndex = this.focusedIndex === null ? this.modelValue.length - 1 : this.focusedIndex - 1;\n                if (this.focusedIndex < 0) this.focusedIndex = 0;\n            }\n        },\n        onArrowRightKeyOn() {\n            if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                if (this.focusedIndex === this.modelValue.length - 1) {\n                    this.focusedIndex = null;\n                    this.$refs.input.focus();\n                } else {\n                    this.focusedIndex++;\n                }\n            }\n        },\n        onBackspaceKeyOn(event) {\n            if (this.focusedIndex !== null) {\n                this.removeItem(event, this.focusedIndex);\n            }\n        },\n        updateModel(event, value, preventDefault) {\n            this.$emit('update:modelValue', value);\n            this.$emit('add', {\n                originalEvent: event,\n                value: value\n            });\n            this.$refs.input.value = '';\n            this.inputValue = '';\n\n            setTimeout(() => {\n                this.maxedOut && (this.focused = false);\n            }, 0);\n\n            if (preventDefault) {\n                event.preventDefault();\n            }\n        },\n        addItem(event, item, preventDefault) {\n            if (item && item.trim().length) {\n                let value = this.modelValue ? [...this.modelValue] : [];\n\n                if (this.allowDuplicate || value.indexOf(item) === -1) {\n                    value.push(item);\n                    this.updateModel(event, value, preventDefault);\n                }\n            }\n        },\n        removeItem(event, index) {\n            if (this.disabled) {\n                return;\n            }\n\n            let values = [...this.modelValue];\n            const removedItem = values.splice(index, 1);\n\n            this.focusedIndex = null;\n            this.$refs.input.focus();\n            this.$emit('update:modelValue', values);\n            this.$emit('remove', {\n                originalEvent: event,\n                value: removedItem\n            });\n        }\n    },\n    computed: {\n        maxedOut() {\n            return this.max && this.modelValue && this.max === this.modelValue.length;\n        },\n        focusedOptionId() {\n            return this.focusedIndex !== null ? `${this.id}_inputchips_item_${this.focusedIndex}` : null;\n        }\n    },\n    components: {\n        Chip\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <ul\n            ref=\"container\"\n            :class=\"cx('input')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @click=\"onWrapperClick()\"\n            @focus=\"onContainerFocus\"\n            @blur=\"onContainerBlur\"\n            @keydown=\"onContainerKeyDown\"\n            v-bind=\"ptm('input')\"\n        >\n            <li\n                v-for=\"(val, i) of modelValue\"\n                :key=\"`${i}_${val}`\"\n                :id=\"id + '_inputchips_item_' + i\"\n                role=\"option\"\n                :class=\"cx('chipItem', { index: i })\"\n                :aria-label=\"val\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"modelValue.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n                :data-p-focused=\"focusedIndex === i\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :index=\"i\" :value=\"val\" :removeCallback=\"(event) => removeOption(event, i)\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"val\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeItem($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeItem(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputItem')\" role=\"option\" v-bind=\"ptm('inputItem')\">\n                <input\n                    ref=\"input\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :class=\"inputClass\"\n                    :style=\"inputStyle\"\n                    :disabled=\"disabled || maxedOut\"\n                    :placeholder=\"placeholder\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus($event)\"\n                    @blur=\"onBlur($event)\"\n                    @input=\"onInput\"\n                    @keydown=\"onKeyDown($event)\"\n                    @paste=\"onPaste($event)\"\n                    v-bind=\"{ ...inputProps, ...ptm('inputItemField') }\"\n                />\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Chip from 'primevue/chip';\nimport BaseInputChips from './BaseInputChips.vue';\n\nexport default {\n    name: 'InputChips',\n    extends: BaseInputChips,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'add', 'remove', 'focus', 'blur'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            inputValue: null,\n            focused: false,\n            focusedIndex: null\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        }\n    },\n    mounted() {\n        console.warn('Deprecated since v4. Use AutoComplete component instead with its typeahead property.');\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        onWrapperClick() {\n            this.$refs.input.focus();\n        },\n        onInput(event) {\n            this.inputValue = event.target.value;\n            this.focusedIndex = null;\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.focusedIndex = null;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.focusedIndex = null;\n\n            if (this.addOnBlur) {\n                this.addItem(event, event.target.value, false);\n            }\n\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            const inputValue = event.target.value;\n\n            switch (event.code) {\n                case 'Backspace':\n                    if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                        if (this.focusedIndex !== null) {\n                            this.removeItem(event, this.focusedIndex);\n                        } else this.removeItem(event, this.modelValue.length - 1);\n                    }\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    if (inputValue && inputValue.trim().length && !this.maxedOut) {\n                        this.addItem(event, inputValue, true);\n                    }\n\n                    break;\n\n                case 'ArrowLeft':\n                    if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                        this.$refs.container.focus();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    event.stopPropagation();\n                    break;\n\n                default:\n                    if (this.separator) {\n                        if (this.separator === event.key || event.key.match(this.separator)) {\n                            this.addItem(event, inputValue, true);\n                        }\n                    }\n\n                    break;\n            }\n        },\n        onPaste(event) {\n            if (this.separator) {\n                let separator = this.separator.replace('\\\\n', '\\n').replace('\\\\r', '\\r').replace('\\\\t', '\\t');\n                let pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n\n                if (pastedData) {\n                    let value = this.modelValue || [];\n                    let pastedValues = pastedData.split(separator);\n\n                    pastedValues = pastedValues.filter((val) => this.allowDuplicate || value.indexOf(val) === -1);\n                    value = [...value, ...pastedValues];\n                    this.updateModel(event, value, true);\n                }\n            }\n        },\n        onContainerFocus() {\n            this.focused = true;\n        },\n        onContainerBlur() {\n            this.focusedIndex = -1;\n            this.focused = false;\n        },\n        onContainerKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOn(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOn(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOn(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowLeftKeyOn() {\n            if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                this.focusedIndex = this.focusedIndex === null ? this.modelValue.length - 1 : this.focusedIndex - 1;\n                if (this.focusedIndex < 0) this.focusedIndex = 0;\n            }\n        },\n        onArrowRightKeyOn() {\n            if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                if (this.focusedIndex === this.modelValue.length - 1) {\n                    this.focusedIndex = null;\n                    this.$refs.input.focus();\n                } else {\n                    this.focusedIndex++;\n                }\n            }\n        },\n        onBackspaceKeyOn(event) {\n            if (this.focusedIndex !== null) {\n                this.removeItem(event, this.focusedIndex);\n            }\n        },\n        updateModel(event, value, preventDefault) {\n            this.$emit('update:modelValue', value);\n            this.$emit('add', {\n                originalEvent: event,\n                value: value\n            });\n            this.$refs.input.value = '';\n            this.inputValue = '';\n\n            setTimeout(() => {\n                this.maxedOut && (this.focused = false);\n            }, 0);\n\n            if (preventDefault) {\n                event.preventDefault();\n            }\n        },\n        addItem(event, item, preventDefault) {\n            if (item && item.trim().length) {\n                let value = this.modelValue ? [...this.modelValue] : [];\n\n                if (this.allowDuplicate || value.indexOf(item) === -1) {\n                    value.push(item);\n                    this.updateModel(event, value, preventDefault);\n                }\n            }\n        },\n        removeItem(event, index) {\n            if (this.disabled) {\n                return;\n            }\n\n            let values = [...this.modelValue];\n            const removedItem = values.splice(index, 1);\n\n            this.focusedIndex = null;\n            this.$refs.input.focus();\n            this.$emit('update:modelValue', values);\n            this.$emit('remove', {\n                originalEvent: event,\n                value: removedItem\n            });\n        }\n    },\n    computed: {\n        maxedOut() {\n            return this.max && this.modelValue && this.max === this.modelValue.length;\n        },\n        focusedOptionId() {\n            return this.focusedIndex !== null ? `${this.id}_inputchips_item_${this.focusedIndex}` : null;\n        }\n    },\n    components: {\n        Chip\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}