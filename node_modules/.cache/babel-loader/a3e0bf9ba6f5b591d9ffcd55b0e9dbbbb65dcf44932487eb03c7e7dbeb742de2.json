{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport Card from 'primevue/card';\nimport Header from './Header.vue';\nexport default {\n  components: {\n    Card,\n    Header\n  },\n  data() {\n    return {\n      abilities: [],\n      // Holds the user's abilities (access levels)\n      loading: true // Loading state\n    };\n  },\n  created() {\n    this.fetchAbilities(); // Fetch access levels when the component is created\n  },\n  methods: {\n    async fetchAbilities() {\n      try {\n        const response = await axios.get('http://127.0.0.1:8000/api/user/access-levels', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`\n          }\n        });\n        this.abilities = response.data.access_levels; // Store access levels in the data\n      } catch (error) {\n        console.error('Error fetching access levels:', error);\n      } finally {\n        this.loading = false; // Set loading to false once the data is fetched\n      }\n    },\n    accessLevelDescription(accessLevel) {\n      const descriptions = {\n        announcement: \"View and manage announcements.\",\n        messages: \"Send and view messages.\",\n        account_management: \"Access and manage user accounts.\",\n        concern: \"Manage and resolve concerns.\",\n        reports_and_analytics: \"View and analyze reports and data.\",\n        '*': \"Has access to all modules.\"\n      };\n      return descriptions[accessLevel] || \"No description available for this access level.\";\n    },\n    handleCardClick(accessLevel) {\n      const routes = {\n        announcement: 'AnnouncementPage',\n        messages: 'MessagePage',\n        account_management: 'AccountManagementPage',\n        concern: 'ConcernPage',\n        reports_and_analytics: 'ReportPage'\n      };\n      const targetPage = routes[accessLevel];\n      if (targetPage) {\n        this.navigateTo(targetPage);\n      } else {\n        console.warn(`No route defined for access level: ${accessLevel}`);\n      }\n    },\n    navigateTo(page) {\n      this.$router.push({\n        name: page\n      }); // Assumes your routes are named\n    }\n  }\n};","map":{"version":3,"names":["axios","Card","Header","components","data","abilities","loading","created","fetchAbilities","methods","response","get","headers","Authorization","localStorage","getItem","access_levels","error","console","accessLevelDescription","accessLevel","descriptions","announcement","messages","account_management","concern","reports_and_analytics","handleCardClick","routes","targetPage","navigateTo","warn","page","$router","push","name"],"sources":["C:\\Users\\darle\\solid-waste-management-system\\src\\components\\DashboardPage.vue"],"sourcesContent":["<template>\r\n<Header/>\r\n  <div class=\"dashboard\">\r\n    <h1>Dashboard</h1>\r\n\r\n    <!-- Loading state -->\r\n    <div v-if=\"loading\">Loading user access levels...</div>\r\n\r\n    <!-- Access Level Cards -->\r\n    <div v-else class=\"abilities-container\">\r\n      <Card\r\n        v-for=\"(accessLevel, index) in abilities\"\r\n        :key=\"index\"\r\n        class=\"access-level-card\"\r\n        @click=\"handleCardClick(accessLevel)\"\r\n      >\r\n        <template #header>\r\n          <h3>{{ accessLevel }}</h3>\r\n        </template>\r\n        <p>{{ accessLevelDescription(accessLevel) }}</p>\r\n      </Card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport Card from 'primevue/card';\r\nimport Header from './Header.vue';\r\n\r\nexport default {\r\n  components: {\r\n    Card,\r\n    Header,\r\n  },\r\n  data() {\r\n    return {\r\n      abilities: [], // Holds the user's abilities (access levels)\r\n      loading: true, // Loading state\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchAbilities(); // Fetch access levels when the component is created\r\n  },\r\n  methods: {\r\n    async fetchAbilities() {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:8000/api/user/access-levels', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('auth_token')}`,\r\n          },\r\n        });\r\n        this.abilities = response.data.access_levels; // Store access levels in the data\r\n      } catch (error) {\r\n        console.error('Error fetching access levels:', error);\r\n      } finally {\r\n        this.loading = false; // Set loading to false once the data is fetched\r\n      }\r\n    },\r\n\r\n    accessLevelDescription(accessLevel) {\r\n      const descriptions = {\r\n        announcement: \"View and manage announcements.\",\r\n        messages: \"Send and view messages.\",\r\n        account_management: \"Access and manage user accounts.\",\r\n        concern: \"Manage and resolve concerns.\",\r\n        reports_and_analytics: \"View and analyze reports and data.\",\r\n        '*': \"Has access to all modules.\",\r\n      };\r\n      return descriptions[accessLevel] || \"No description available for this access level.\";\r\n    },\r\n\r\n    handleCardClick(accessLevel) {\r\n      const routes = {\r\n        announcement: 'AnnouncementPage',\r\n        messages: 'MessagePage',\r\n        account_management: 'AccountManagementPage',\r\n        concern: 'ConcernPage',\r\n        reports_and_analytics: 'ReportPage',\r\n      };\r\n\r\n      const targetPage = routes[accessLevel];\r\n      if (targetPage) {\r\n        this.navigateTo(targetPage);\r\n      } else {\r\n        console.warn(`No route defined for access level: ${accessLevel}`);\r\n      }\r\n    },\r\n\r\n    navigateTo(page) {\r\n      this.$router.push({ name: page }); // Assumes your routes are named\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.abilities-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  justify-content: center;\r\n}\r\n\r\n.access-level-card {\r\n  width: 250px;\r\n  background-color: #f4f4f9;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease-in-out;\r\n}\r\n\r\n.access-level-card:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\nh3 {\r\n  font-size: 1.2rem;\r\n  margin-bottom: 10px;\r\n}\r\n\r\np {\r\n  font-size: 1rem;\r\n  color: #555;\r\n}\r\n</style>\r\n"],"mappings":";AA0BA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,IAAG,MAAO,eAAe;AAChC,OAAOC,MAAK,MAAO,cAAc;AAEjC,eAAe;EACbC,UAAU,EAAE;IACVF,IAAI;IACJC;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MAAE;MACfC,OAAO,EAAE,IAAI,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC,EAAE;EACzB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,8CAA8C,EAAE;UAC/EC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;UAC7D;QACF,CAAC,CAAC;QACF,IAAI,CAACV,SAAQ,GAAIK,QAAQ,CAACN,IAAI,CAACY,aAAa,EAAE;MAChD,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD,UAAU;QACR,IAAI,CAACX,OAAM,GAAI,KAAK,EAAE;MACxB;IACF,CAAC;IAEDa,sBAAsBA,CAACC,WAAW,EAAE;MAClC,MAAMC,YAAW,GAAI;QACnBC,YAAY,EAAE,gCAAgC;QAC9CC,QAAQ,EAAE,yBAAyB;QACnCC,kBAAkB,EAAE,kCAAkC;QACtDC,OAAO,EAAE,8BAA8B;QACvCC,qBAAqB,EAAE,oCAAoC;QAC3D,GAAG,EAAE;MACP,CAAC;MACD,OAAOL,YAAY,CAACD,WAAW,KAAK,iDAAiD;IACvF,CAAC;IAEDO,eAAeA,CAACP,WAAW,EAAE;MAC3B,MAAMQ,MAAK,GAAI;QACbN,YAAY,EAAE,kBAAkB;QAChCC,QAAQ,EAAE,aAAa;QACvBC,kBAAkB,EAAE,uBAAuB;QAC3CC,OAAO,EAAE,aAAa;QACtBC,qBAAqB,EAAE;MACzB,CAAC;MAED,MAAMG,UAAS,GAAID,MAAM,CAACR,WAAW,CAAC;MACtC,IAAIS,UAAU,EAAE;QACd,IAAI,CAACC,UAAU,CAACD,UAAU,CAAC;MAC7B,OAAO;QACLX,OAAO,CAACa,IAAI,CAAC,sCAAsCX,WAAW,EAAE,CAAC;MACnE;IACF,CAAC;IAEDU,UAAUA,CAACE,IAAI,EAAE;MACf,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAEC,IAAI,EAAEH;MAAK,CAAC,CAAC,EAAE;IACrC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}