{"ast":null,"code":"import { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ToggleButtonStyle from 'primevue/togglebutton/style';\nimport { resolveDirective, withDirectives, openBlock, createElementBlock, mergeProps, createElementVNode, renderSlot, normalizeClass, createCommentVNode, toDisplayString } from 'vue';\nvar script$1 = {\n  name: 'BaseToggleButton',\n  \"extends\": BaseEditableHolder,\n  props: {\n    onIcon: String,\n    offIcon: String,\n    onLabel: {\n      type: String,\n      \"default\": 'Yes'\n    },\n    offLabel: {\n      type: String,\n      \"default\": 'No'\n    },\n    iconPos: {\n      type: String,\n      \"default\": 'left'\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    tabindex: {\n      type: Number,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    size: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: ToggleButtonStyle,\n  provide: function provide() {\n    return {\n      $pcToggleButton: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script = {\n  name: 'ToggleButton',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change'],\n  methods: {\n    getPTOptions: function getPTOptions(key) {\n      var _ptm = key === 'root' ? this.ptmi : this.ptm;\n      return _ptm(key, {\n        context: {\n          active: this.active,\n          disabled: this.disabled\n        }\n      });\n    },\n    onChange: function onChange(event) {\n      if (!this.disabled && !this.readonly) {\n        this.writeValue(!this.d_value, event);\n        this.$emit('change', event);\n      }\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField, event);\n    }\n  },\n  computed: {\n    active: function active() {\n      return this.d_value === true;\n    },\n    hasLabel: function hasLabel() {\n      return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n    },\n    label: function label() {\n      return this.hasLabel ? this.d_value ? this.onLabel : this.offLabel : \"\\xA0\";\n    }\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\nvar _hoisted_1 = [\"tabindex\", \"disabled\", \"aria-pressed\", \"aria-labelledby\", \"data-p-checked\", \"data-p-disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    type: \"button\",\n    \"class\": _ctx.cx('root'),\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.disabled,\n    \"aria-pressed\": _ctx.d_value,\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.onChange && $options.onChange.apply($options, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    })\n  }, $options.getPTOptions('root'), {\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"data-p-checked\": $options.active,\n    \"data-p-disabled\": _ctx.disabled\n  }), [createElementVNode(\"span\", mergeProps({\n    \"class\": _ctx.cx('content')\n  }, $options.getPTOptions('content')), [renderSlot(_ctx.$slots, \"default\", {}, function () {\n    return [renderSlot(_ctx.$slots, \"icon\", {\n      value: _ctx.d_value,\n      \"class\": normalizeClass(_ctx.cx('icon'))\n    }, function () {\n      return [_ctx.onIcon || _ctx.offIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n        key: 0,\n        \"class\": [_ctx.cx('icon'), _ctx.d_value ? _ctx.onIcon : _ctx.offIcon]\n      }, $options.getPTOptions('icon')), null, 16)) : createCommentVNode(\"\", true)];\n    }), createElementVNode(\"span\", mergeProps({\n      \"class\": _ctx.cx('label')\n    }, $options.getPTOptions('label')), toDisplayString($options.label), 17)];\n  })], 16)], 16, _hoisted_1)), [[_directive_ripple]]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseEditableHolder","props","onIcon","String","offIcon","onLabel","type","offLabel","iconPos","readonly","Boolean","tabindex","Number","ariaLabelledby","ariaLabel","size","style","ToggleButtonStyle","provide","$pcToggleButton","$parentInstance","script","inheritAttrs","emits","methods","getPTOptions","key","_ptm","ptmi","ptm","context","active","disabled","onChange","event","writeValue","d_value","$emit","onBlur","_this$formField$onBlu","_this$formField","formField","call","computed","hasLabel","isNotEmpty","label","directives","ripple","Ripple","withDirectives","openBlock","createElementBlock","mergeProps","_ctx","cx","onClick","_cache","$options","apply","arguments","createElementVNode","renderSlot","$slots","value","normalizeClass","createCommentVNode","toDisplayString"],"sources":["../../src/togglebutton/BaseToggleButton.vue","../../src/togglebutton/ToggleButton.vue","../../src/togglebutton/ToggleButton.vue?vue&type=template&id=4560c77c&lang.js"],"sourcesContent":["<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ToggleButtonStyle from 'primevue/togglebutton/style';\n\nexport default {\n    name: 'BaseToggleButton',\n    extends: BaseEditableHolder,\n    props: {\n        onIcon: String,\n        offIcon: String,\n        onLabel: {\n            type: String,\n            default: 'Yes'\n        },\n        offLabel: {\n            type: String,\n            default: 'No'\n        },\n        iconPos: {\n            type: String,\n            default: 'left'\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        }\n    },\n    style: ToggleButtonStyle,\n    provide() {\n        return {\n            $pcToggleButton: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <button\n        v-ripple\n        type=\"button\"\n        :class=\"cx('root')\"\n        :tabindex=\"tabindex\"\n        :disabled=\"disabled\"\n        :aria-pressed=\"d_value\"\n        @click=\"onChange\"\n        @blur=\"onBlur\"\n        v-bind=\"getPTOptions('root')\"\n        :aria-labelledby=\"ariaLabelledby\"\n        :data-p-checked=\"active\"\n        :data-p-disabled=\"disabled\"\n    >\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\">\n            <slot>\n                <slot name=\"icon\" :value=\"d_value\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), d_value ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.writeValue(!this.d_value, event);\n                this.$emit('change', event);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        active() {\n            return this.d_value === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.d_value ? this.onLabel : this.offLabel) : '\\u00A0';\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <button\n        v-ripple\n        type=\"button\"\n        :class=\"cx('root')\"\n        :tabindex=\"tabindex\"\n        :disabled=\"disabled\"\n        :aria-pressed=\"d_value\"\n        @click=\"onChange\"\n        @blur=\"onBlur\"\n        v-bind=\"getPTOptions('root')\"\n        :aria-labelledby=\"ariaLabelledby\"\n        :data-p-checked=\"active\"\n        :data-p-disabled=\"disabled\"\n    >\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\">\n            <slot>\n                <slot name=\"icon\" :value=\"d_value\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), d_value ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.writeValue(!this.d_value, event);\n                this.$emit('change', event);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        active() {\n            return this.d_value === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.d_value ? this.onLabel : this.offLabel) : '\\u00A0';\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}