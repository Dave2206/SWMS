{"ast":null,"code":"import BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ToggleSwitchStyle from 'primevue/toggleswitch/style';\nimport { openBlock, createElementBlock, mergeProps, createElementVNode, renderSlot } from 'vue';\nvar script$1 = {\n  name: 'BaseToggleSwitch',\n  \"extends\": BaseEditableHolder,\n  props: {\n    trueValue: {\n      type: null,\n      \"default\": true\n    },\n    falseValue: {\n      type: null,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    tabindex: {\n      type: Number,\n      \"default\": null\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: ToggleSwitchStyle,\n  provide: function provide() {\n    return {\n      $pcToggleSwitch: this,\n      $parentInstance: this\n    };\n  }\n};\nvar script = {\n  name: 'ToggleSwitch',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change', 'focus', 'blur'],\n  methods: {\n    getPTOptions: function getPTOptions(key) {\n      var _ptm = key === 'root' ? this.ptmi : this.ptm;\n      return _ptm(key, {\n        context: {\n          checked: this.checked,\n          disabled: this.disabled\n        }\n      });\n    },\n    onChange: function onChange(event) {\n      if (!this.disabled && !this.readonly) {\n        var newValue = this.checked ? this.falseValue : this.trueValue;\n        this.writeValue(newValue, event);\n        this.$emit('change', event);\n      }\n    },\n    onFocus: function onFocus(event) {\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      this.$emit('blur', event);\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField, event);\n    }\n  },\n  computed: {\n    checked: function checked() {\n      return this.d_value === this.trueValue;\n    }\n  }\n};\nvar _hoisted_1 = [\"data-p-checked\", \"data-p-disabled\"];\nvar _hoisted_2 = [\"id\", \"checked\", \"tabindex\", \"disabled\", \"readonly\", \"aria-checked\", \"aria-labelledby\", \"aria-label\", \"aria-invalid\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root')\n  }, $options.getPTOptions('root'), {\n    \"data-p-checked\": $options.checked,\n    \"data-p-disabled\": _ctx.disabled\n  }), [createElementVNode(\"input\", mergeProps({\n    id: _ctx.inputId,\n    type: \"checkbox\",\n    role: \"switch\",\n    \"class\": [_ctx.cx('input'), _ctx.inputClass],\n    style: _ctx.inputStyle,\n    checked: $options.checked,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.disabled,\n    readonly: _ctx.readonly,\n    \"aria-checked\": $options.checked,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onChange: _cache[2] || (_cache[2] = function () {\n      return $options.onChange && $options.onChange.apply($options, arguments);\n    })\n  }, $options.getPTOptions('input')), null, 16, _hoisted_2), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('slider')\n  }, $options.getPTOptions('slider')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('handle')\n  }, $options.getPTOptions('handle')), [renderSlot(_ctx.$slots, \"handle\", {\n    checked: $options.checked\n  })], 16)], 16)], 16, _hoisted_1);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseEditableHolder","props","trueValue","type","falseValue","readonly","Boolean","tabindex","Number","inputId","String","inputClass","Object","inputStyle","ariaLabelledby","ariaLabel","style","ToggleSwitchStyle","provide","$pcToggleSwitch","$parentInstance","script","inheritAttrs","emits","methods","getPTOptions","key","_ptm","ptmi","ptm","context","checked","disabled","onChange","event","newValue","writeValue","$emit","onFocus","onBlur","_this$formField$onBlu","_this$formField","formField","call","computed","d_value","openBlock","createElementBlock","mergeProps","_ctx","cx","sx","$options","createElementVNode","id","role","invalid","undefined","_cache","apply","arguments","_hoisted_2","renderSlot","$slots","_hoisted_1"],"sources":["../../src/toggleswitch/BaseToggleSwitch.vue","../../src/toggleswitch/ToggleSwitch.vue","../../src/toggleswitch/ToggleSwitch.vue?vue&type=template&id=082cdeb1&lang.js"],"sourcesContent":["<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ToggleSwitchStyle from 'primevue/toggleswitch/style';\n\nexport default {\n    name: 'BaseToggleSwitch',\n    extends: BaseEditableHolder,\n    props: {\n        trueValue: {\n            type: null,\n            default: true\n        },\n        falseValue: {\n            type: null,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: ToggleSwitchStyle,\n    provide() {\n        return {\n            $pcToggleSwitch: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" v-bind=\"getPTOptions('root')\" :data-p-checked=\"checked\" :data-p-disabled=\"disabled\">\n        <input\n            :id=\"inputId\"\n            type=\"checkbox\"\n            role=\"switch\"\n            :class=\"[cx('input'), inputClass]\"\n            :style=\"inputStyle\"\n            :checked=\"checked\"\n            :tabindex=\"tabindex\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :aria-checked=\"checked\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-invalid=\"invalid || undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @change=\"onChange\"\n            v-bind=\"getPTOptions('input')\"\n        />\n        <div :class=\"cx('slider')\" v-bind=\"getPTOptions('slider')\">\n            <div :class=\"cx('handle')\" v-bind=\"getPTOptions('handle')\">\n                <slot name=\"handle\" :checked=\"checked\" />\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport BaseToggleSwitch from './BaseToggleSwitch.vue';\n\nexport default {\n    name: 'ToggleSwitch',\n    extends: BaseToggleSwitch,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    checked: this.checked,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                const newValue = this.checked ? this.falseValue : this.trueValue;\n\n                this.writeValue(newValue, event);\n                this.$emit('change', event);\n            }\n        },\n        onFocus(event) {\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        checked() {\n            return this.d_value === this.trueValue;\n        }\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" v-bind=\"getPTOptions('root')\" :data-p-checked=\"checked\" :data-p-disabled=\"disabled\">\n        <input\n            :id=\"inputId\"\n            type=\"checkbox\"\n            role=\"switch\"\n            :class=\"[cx('input'), inputClass]\"\n            :style=\"inputStyle\"\n            :checked=\"checked\"\n            :tabindex=\"tabindex\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :aria-checked=\"checked\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-invalid=\"invalid || undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @change=\"onChange\"\n            v-bind=\"getPTOptions('input')\"\n        />\n        <div :class=\"cx('slider')\" v-bind=\"getPTOptions('slider')\">\n            <div :class=\"cx('handle')\" v-bind=\"getPTOptions('handle')\">\n                <slot name=\"handle\" :checked=\"checked\" />\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport BaseToggleSwitch from './BaseToggleSwitch.vue';\n\nexport default {\n    name: 'ToggleSwitch',\n    extends: BaseToggleSwitch,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    checked: this.checked,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                const newValue = this.checked ? this.falseValue : this.trueValue;\n\n                this.writeValue(newValue, event);\n                this.$emit('change', event);\n            }\n        },\n        onFocus(event) {\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        checked() {\n            return this.d_value === this.trueValue;\n        }\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}