{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"abilities-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Card = _resolveComponent(\"Card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Dashboard\", -1 /* HOISTED */)), _createCommentVNode(\" Loading state \"), $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"Loading user abilities...\")) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Ability Cards \"), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.abilities, ability => {\n    return _openBlock(), _createBlock(_component_Card, {\n      key: ability,\n      class: \"ability-card\"\n    }, {\n      header: _withCtx(() => [_createElementVNode(\"h3\", null, _toDisplayString(ability), 1 /* TEXT */)]),\n      default: _withCtx(() => [_createElementVNode(\"p\", null, _toDisplayString($options.abilityDescription(ability)), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */);\n  }), 128 /* KEYED_FRAGMENT */))])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","$data","loading","_hoisted_2","_Fragment","_hoisted_3","_renderList","abilities","ability","_createBlock","_component_Card","header","_withCtx","_toDisplayString","default","$options","abilityDescription","_"],"sources":["C:\\Users\\darle\\solid-waste-management-system\\src\\components\\DashboardPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <h1>Dashboard</h1>\r\n\r\n    <!-- Loading state -->\r\n    <div v-if=\"loading\">Loading user abilities...</div>\r\n\r\n    <!-- Ability Cards -->\r\n    <div v-else class=\"abilities-container\">\r\n      <Card v-for=\"ability in abilities\" :key=\"ability\" class=\"ability-card\">\r\n        <template #header>\r\n          <h3>{{ ability }}</h3>\r\n        </template>\r\n        <p>{{ abilityDescription(ability) }}</p>\r\n      </Card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      abilities: [],  // Holds the user's abilities\r\n      loading: true,   // Loading state\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchAbilities();  // Fetch abilities when the component is created\r\n  },\r\n  methods: {\r\n    async fetchAbilities() {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:8000/api/user/abilities', {\r\n        headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\r\n        }\r\n        });\r\n        this.abilities = response.data;  // Store abilities in the data\r\n      } catch (error) {\r\n        console.error('Error fetching abilities:', error);\r\n      } finally {\r\n        this.loading = false;  // Set loading to false once the data is fetched\r\n      }\r\n    },\r\n\r\n    // This method maps abilities to descriptions. You can customize it as needed.\r\n    abilityDescription(ability) {\r\n      const descriptions = {\r\n        announcement: \"View and manage announcements.\",\r\n        messages: \"Send and view messages.\",\r\n        account_management: \"Access and manage user accounts.\",\r\n        concern: \"Manage and resolve concerns.\",\r\n        reports_and_analytics: \"View and analyze reports and data.\",\r\n      };\r\n      return descriptions[ability] || \"No description available for this ability.\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.abilities-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  justify-content: center;\r\n}\r\n\r\n.ability-card {\r\n  width: 250px;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EADxBC,GAAA;AAAA;;EAQgBD,KAAK,EAAC;AAAqB;;;uBAPzCE,mBAAA,CAeM,OAfNC,UAeM,G,0BAdJC,mBAAA,CAAkB,YAAd,WAAS,sBAEbC,mBAAA,mBAAsB,EACXC,KAAA,CAAAC,OAAO,I,cAAlBL,mBAAA,CAAmD,OALvDM,UAAA,EAKwB,2BAAyB,M,cAG7CN,mBAAA,CAOMO,SAAA;IAfVR,GAAA;EAAA,IAOII,mBAAA,mBAAsB,EACtBD,mBAAA,CAOM,OAPNM,UAOM,I,kBANJR,mBAAA,CAKOO,SAAA,QAdbE,WAAA,CAS8BL,KAAA,CAAAM,SAAS,EAApBC,OAAO;yBAApBC,YAAA,CAKOC,eAAA;MAL6Bd,GAAG,EAAEY,OAAO;MAAEb,KAAK,EAAC;;MAC3CgB,MAAM,EAAAC,QAAA,CACf,MAAsB,CAAtBb,mBAAA,CAAsB,YAAAc,gBAAA,CAAfL,OAAO,iB;MAXxBM,OAAA,EAAAF,QAAA,CAaQ,MAAwC,CAAxCb,mBAAA,CAAwC,WAAAc,gBAAA,CAAlCE,QAAA,CAAAC,kBAAkB,CAACR,OAAO,kB;MAbxCS,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}