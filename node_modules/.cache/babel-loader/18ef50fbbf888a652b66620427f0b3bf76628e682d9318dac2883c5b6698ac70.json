{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { focus, getFirstFocusableElement, isElement, findSingle } from '@primeuix/utils/dom';\nimport { resolveFieldData, isPrintableCharacter, isNotEmpty, equals, findLastIndex } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport SearchIcon from '@primevue/icons/search';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ListboxStyle from 'primevue/listbox/style';\nimport { resolveComponent, resolveDirective, openBlock, createElementBlock, mergeProps, createElementVNode, normalizeClass, renderSlot, createCommentVNode, createVNode, withCtx, createBlock, normalizeProps, toDisplayString, createSlots, Fragment, renderList, createTextVNode, withDirectives } from 'vue';\nvar script$1 = {\n  name: 'BaseListbox',\n  \"extends\": BaseEditableHolder,\n  props: {\n    options: Array,\n    optionLabel: null,\n    optionValue: null,\n    optionDisabled: null,\n    optionGroupLabel: null,\n    optionGroupChildren: null,\n    listStyle: null,\n    scrollHeight: {\n      type: String,\n      \"default\": '14rem'\n    },\n    dataKey: null,\n    multiple: {\n      type: Boolean,\n      \"default\": false\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    filter: Boolean,\n    filterPlaceholder: String,\n    filterLocale: String,\n    filterMatchMode: {\n      type: String,\n      \"default\": 'contains'\n    },\n    filterFields: {\n      type: Array,\n      \"default\": null\n    },\n    virtualScrollerOptions: {\n      type: Object,\n      \"default\": null\n    },\n    autoOptionFocus: {\n      type: Boolean,\n      \"default\": true\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    focusOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    highlightOnSelect: {\n      type: Boolean,\n      \"default\": true\n    },\n    checkmark: {\n      type: Boolean,\n      \"default\": false\n    },\n    filterMessage: {\n      type: String,\n      \"default\": null\n    },\n    selectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySelectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyFilterMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyMessage: {\n      type: String,\n      \"default\": null\n    },\n    filterIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    striped: {\n      type: Boolean,\n      \"default\": false\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: ListboxStyle,\n  provide: function provide() {\n    return {\n      $pcListbox: this,\n      $parentInstance: this\n    };\n  }\n};\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script = {\n  name: 'Listbox',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change', 'focus', 'blur', 'filter', 'item-dblclick', 'option-dblclick'],\n  list: null,\n  virtualScroller: null,\n  optionTouched: false,\n  startRangeIndex: -1,\n  searchTimeout: null,\n  searchValue: '',\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      filterValue: null,\n      focused: false,\n      focusedOptionIndex: -1\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    },\n    options: function options() {\n      this.autoUpdateModel();\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    this.autoUpdateModel();\n  },\n  methods: {\n    getOptionIndex: function getOptionIndex(index, fn) {\n      return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? resolveFieldData(option, this.optionLabel) : typeof option === 'string' ? option : null;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n    },\n    getOptionRenderKey: function getOptionRenderKey(option, index) {\n      return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n    },\n    getPTOptions: function getPTOptions(option, itemOptions, index, key) {\n      return this.ptm(key, {\n        context: {\n          selected: this.isSelected(option),\n          focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n          disabled: this.isOptionDisabled(option)\n        }\n      });\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n    },\n    isOptionGroup: function isOptionGroup(option) {\n      return this.optionGroupLabel && option.optionGroup && option.group;\n    },\n    getOptionGroupLabel: function getOptionGroupLabel(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupLabel);\n    },\n    getOptionGroupChildren: function getOptionGroupChildren(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupChildren);\n    },\n    getAriaPosInset: function getAriaPosInset(index) {\n      var _this = this;\n      return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter(function (option) {\n        return _this.isOptionGroup(option);\n      }).length : index) + 1;\n    },\n    onFirstHiddenFocus: function onFirstHiddenFocus() {\n      focus(this.list);\n      var firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n      this.$refs.lastHiddenFocusableElement.tabIndex = isElement(firstFocusableEl) ? undefined : -1;\n      this.$refs.firstHiddenFocusableElement.tabIndex = -1;\n    },\n    onLastHiddenFocus: function onLastHiddenFocus(event) {\n      var relatedTarget = event.relatedTarget;\n      if (relatedTarget === this.list) {\n        var firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n        focus(firstFocusableEl);\n        this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n      } else {\n        focus(this.$refs.firstHiddenFocusableElement);\n      }\n      this.$refs.lastHiddenFocusableElement.tabIndex = -1;\n    },\n    onFocusout: function onFocusout(event) {\n      if (!this.$el.contains(event.relatedTarget) && this.$refs.lastHiddenFocusableElement && this.$refs.firstHiddenFocusableElement) {\n        this.$refs.lastHiddenFocusableElement.tabIndex = this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n      }\n    },\n    onListFocus: function onListFocus(event) {\n      this.focused = true;\n      this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n      this.autoUpdateModel();\n      this.$emit('focus', event);\n    },\n    onListBlur: function onListBlur(event) {\n      this.focused = false;\n      this.focusedOptionIndex = this.startRangeIndex = -1;\n      this.searchValue = '';\n      this.$emit('blur', event);\n    },\n    onListKeyDown: function onListKeyDown(event) {\n      var _this2 = this;\n      var metaKey = event.metaKey || event.ctrlKey;\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'PageDown':\n          this.onPageDownKey(event);\n          break;\n        case 'PageUp':\n          this.onPageUpKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          this.onSpaceKey(event);\n          break;\n        case 'Tab':\n          //NOOP\n          break;\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.onShiftKey(event);\n          break;\n        default:\n          if (this.multiple && event.code === 'KeyA' && metaKey) {\n            var value = this.visibleOptions.filter(function (option) {\n              return _this2.isValidOption(option);\n            }).map(function (option) {\n              return _this2.getOptionValue(option);\n            });\n            this.updateModel(event, value);\n            event.preventDefault();\n            break;\n          }\n          if (!metaKey && isPrintableCharacter(event.key)) {\n            this.searchOptions(event, event.key);\n            event.preventDefault();\n          }\n          break;\n      }\n    },\n    onOptionSelect: function onOptionSelect(event, option) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      if (this.disabled || this.isOptionDisabled(option)) {\n        return;\n      }\n      this.multiple ? this.onOptionSelectMultiple(event, option) : this.onOptionSelectSingle(event, option);\n      this.optionTouched = false;\n      index !== -1 && (this.focusedOptionIndex = index);\n    },\n    onOptionMouseDown: function onOptionMouseDown(event, index) {\n      this.changeFocusedOptionIndex(event, index);\n    },\n    onOptionMouseMove: function onOptionMouseMove(event, index) {\n      if (this.focusOnHover && this.focused) {\n        this.changeFocusedOptionIndex(event, index);\n      }\n    },\n    onOptionTouchEnd: function onOptionTouchEnd() {\n      if (this.disabled) {\n        return;\n      }\n      this.optionTouched = true;\n    },\n    onOptionDblClick: function onOptionDblClick(event, item) {\n      this.$emit('item-dblclick', {\n        originalEvent: event,\n        value: item\n      });\n      this.$emit('option-dblclick', {\n        originalEvent: event,\n        value: item\n      });\n    },\n    onOptionSelectSingle: function onOptionSelectSingle(event, option) {\n      var selected = this.isSelected(option);\n      var valueChanged = false;\n      var value = null;\n      var metaSelection = this.optionTouched ? false : this.metaKeySelection;\n      if (metaSelection) {\n        var metaKey = event && (event.metaKey || event.ctrlKey);\n        if (selected) {\n          if (metaKey) {\n            value = null;\n            valueChanged = true;\n          }\n        } else {\n          value = this.getOptionValue(option);\n          valueChanged = true;\n        }\n      } else {\n        value = selected ? null : this.getOptionValue(option);\n        valueChanged = true;\n      }\n      if (valueChanged) {\n        this.updateModel(event, value);\n      }\n    },\n    onOptionSelectMultiple: function onOptionSelectMultiple(event, option) {\n      var selected = this.isSelected(option);\n      var value = null;\n      var metaSelection = this.optionTouched ? false : this.metaKeySelection;\n      if (metaSelection) {\n        var metaKey = event.metaKey || event.ctrlKey;\n        if (selected) {\n          value = metaKey ? this.removeOption(option) : [this.getOptionValue(option)];\n        } else {\n          value = metaKey ? this.d_value || [] : [];\n          value = [].concat(_toConsumableArray(value), [this.getOptionValue(option)]);\n        }\n      } else {\n        value = selected ? this.removeOption(option) : [].concat(_toConsumableArray(this.d_value || []), [this.getOptionValue(option)]);\n      }\n      this.updateModel(event, value);\n    },\n    onOptionSelectRange: function onOptionSelectRange(event) {\n      var _this3 = this;\n      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n      end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n      if (start !== -1 && end !== -1) {\n        var rangeStart = Math.min(start, end);\n        var rangeEnd = Math.max(start, end);\n        var value = this.visibleOptions.slice(rangeStart, rangeEnd + 1).filter(function (option) {\n          return _this3.isValidOption(option);\n        }).map(function (option) {\n          return _this3.getOptionValue(option);\n        });\n        this.updateModel(event, value);\n      }\n    },\n    onFilterChange: function onFilterChange(event) {\n      this.$emit('filter', {\n        originalEvent: event,\n        value: event.target.value,\n        filterValue: this.visibleOptions\n      });\n      this.focusedOptionIndex = this.startRangeIndex = -1;\n    },\n    onFilterBlur: function onFilterBlur() {\n      this.focusedOptionIndex = this.startRangeIndex = -1;\n    },\n    onFilterKeyDown: function onFilterKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          this.onArrowLeftKey(event, true);\n          break;\n        case 'Home':\n          this.onHomeKey(event, true);\n          break;\n        case 'End':\n          this.onEndKey(event, true);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.onShiftKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      var optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.findFirstFocusedOptionIndex();\n      if (this.multiple && event.shiftKey) {\n        this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n      }\n      this.changeFocusedOptionIndex(event, optionIndex);\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      var optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.findLastFocusedOptionIndex();\n      if (this.multiple && event.shiftKey) {\n        this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n      }\n      this.changeFocusedOptionIndex(event, optionIndex);\n      event.preventDefault();\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      pressedInInputText && (this.focusedOptionIndex = -1);\n    },\n    onHomeKey: function onHomeKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        var target = event.currentTarget;\n        if (event.shiftKey) {\n          target.setSelectionRange(0, event.target.selectionStart);\n        } else {\n          target.setSelectionRange(0, 0);\n          this.focusedOptionIndex = -1;\n        }\n      } else {\n        var metaKey = event.metaKey || event.ctrlKey;\n        var optionIndex = this.findFirstOptionIndex();\n        if (this.multiple && event.shiftKey && metaKey) {\n          this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n        }\n        this.changeFocusedOptionIndex(event, optionIndex);\n      }\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        var target = event.currentTarget;\n        if (event.shiftKey) {\n          target.setSelectionRange(event.target.selectionStart, target.value.length);\n        } else {\n          var len = target.value.length;\n          target.setSelectionRange(len, len);\n          this.focusedOptionIndex = -1;\n        }\n      } else {\n        var metaKey = event.metaKey || event.ctrlKey;\n        var optionIndex = this.findLastOptionIndex();\n        if (this.multiple && event.shiftKey && metaKey) {\n          this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n        }\n        this.changeFocusedOptionIndex(event, optionIndex);\n      }\n      event.preventDefault();\n    },\n    onPageUpKey: function onPageUpKey(event) {\n      this.scrollInView(0);\n      event.preventDefault();\n    },\n    onPageDownKey: function onPageDownKey(event) {\n      this.scrollInView(this.visibleOptions.length - 1);\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (this.focusedOptionIndex !== -1) {\n        if (this.multiple && event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n      }\n    },\n    onSpaceKey: function onSpaceKey(event) {\n      event.preventDefault();\n      this.onEnterKey(event);\n    },\n    onShiftKey: function onShiftKey() {\n      this.startRangeIndex = this.focusedOptionIndex;\n    },\n    isOptionMatched: function isOptionMatched(option) {\n      var _this$getOptionLabel;\n      return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && ((_this$getOptionLabel = this.getOptionLabel(option)) === null || _this$getOptionLabel === void 0 ? void 0 : _this$getOptionLabel.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)));\n    },\n    isValidOption: function isValidOption(option) {\n      return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n    },\n    isValidSelectedOption: function isValidSelectedOption(option) {\n      return this.isValidOption(option) && this.isSelected(option);\n    },\n    isEquals: function isEquals(value1, value2) {\n      return equals(value1, value2, this.equalityKey);\n    },\n    isSelected: function isSelected(option) {\n      var _this4 = this;\n      var optionValue = this.getOptionValue(option);\n      if (this.multiple) return (this.d_value || []).some(function (value) {\n        return _this4.isEquals(value, optionValue);\n      });else return this.isEquals(this.d_value, optionValue);\n    },\n    findFirstOptionIndex: function findFirstOptionIndex() {\n      var _this5 = this;\n      return this.visibleOptions.findIndex(function (option) {\n        return _this5.isValidOption(option);\n      });\n    },\n    findLastOptionIndex: function findLastOptionIndex() {\n      var _this6 = this;\n      return findLastIndex(this.visibleOptions, function (option) {\n        return _this6.isValidOption(option);\n      });\n    },\n    findNextOptionIndex: function findNextOptionIndex(index) {\n      var _this7 = this;\n      var matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this7.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n    },\n    findPrevOptionIndex: function findPrevOptionIndex(index) {\n      var _this8 = this;\n      var matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this8.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findSelectedOptionIndex: function findSelectedOptionIndex() {\n      var _this9 = this;\n      if (this.$filled) {\n        if (this.multiple) {\n          var _loop = function _loop() {\n              var value = _this9.d_value[index];\n              var matchedOptionIndex = _this9.visibleOptions.findIndex(function (option) {\n                return _this9.isValidSelectedOption(option) && _this9.isEquals(value, _this9.getOptionValue(option));\n              });\n              if (matchedOptionIndex > -1) return {\n                v: matchedOptionIndex\n              };\n            },\n            _ret;\n          for (var index = this.d_value.length - 1; index >= 0; index--) {\n            _ret = _loop();\n            if (_ret) return _ret.v;\n          }\n        } else {\n          return this.visibleOptions.findIndex(function (option) {\n            return _this9.isValidSelectedOption(option);\n          });\n        }\n      }\n      return -1;\n    },\n    findFirstSelectedOptionIndex: function findFirstSelectedOptionIndex() {\n      var _this10 = this;\n      return this.$filled ? this.visibleOptions.findIndex(function (option) {\n        return _this10.isValidSelectedOption(option);\n      }) : -1;\n    },\n    findLastSelectedOptionIndex: function findLastSelectedOptionIndex() {\n      var _this11 = this;\n      return this.$filled ? findLastIndex(this.visibleOptions, function (option) {\n        return _this11.isValidSelectedOption(option);\n      }) : -1;\n    },\n    findNextSelectedOptionIndex: function findNextSelectedOptionIndex(index) {\n      var _this12 = this;\n      var matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this12.isValidSelectedOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n    },\n    findPrevSelectedOptionIndex: function findPrevSelectedOptionIndex(index) {\n      var _this13 = this;\n      var matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this13.isValidSelectedOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n    },\n    findNearestSelectedOptionIndex: function findNearestSelectedOptionIndex(index) {\n      var firstCheckUp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var matchedOptionIndex = -1;\n      if (this.$filled) {\n        if (firstCheckUp) {\n          matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n          matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n        } else {\n          matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n          matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n        }\n      }\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findFirstFocusedOptionIndex: function findFirstFocusedOptionIndex() {\n      var selectedIndex = this.findFirstSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n    },\n    findLastFocusedOptionIndex: function findLastFocusedOptionIndex() {\n      var selectedIndex = this.findLastSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n    },\n    searchOptions: function searchOptions(event, _char) {\n      var _this14 = this;\n      this.searchValue = (this.searchValue || '') + _char;\n      var optionIndex = -1;\n      if (isNotEmpty(this.searchValue)) {\n        if (this.focusedOptionIndex !== -1) {\n          optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex(function (option) {\n            return _this14.isOptionMatched(option);\n          });\n          optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex(function (option) {\n            return _this14.isOptionMatched(option);\n          }) : optionIndex + this.focusedOptionIndex;\n        } else {\n          optionIndex = this.visibleOptions.findIndex(function (option) {\n            return _this14.isOptionMatched(option);\n          });\n        }\n        if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n          optionIndex = this.findFirstFocusedOptionIndex();\n        }\n        if (optionIndex !== -1) {\n          this.changeFocusedOptionIndex(event, optionIndex);\n        }\n      }\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      this.searchTimeout = setTimeout(function () {\n        _this14.searchValue = '';\n        _this14.searchTimeout = null;\n      }, 500);\n    },\n    removeOption: function removeOption(option) {\n      var _this15 = this;\n      return this.d_value.filter(function (val) {\n        return !equals(val, _this15.getOptionValue(option), _this15.equalityKey);\n      });\n    },\n    changeFocusedOptionIndex: function changeFocusedOptionIndex(event, index) {\n      if (this.focusedOptionIndex !== index) {\n        this.focusedOptionIndex = index;\n        this.scrollInView();\n        if (this.selectOnFocus && !this.multiple) {\n          this.onOptionSelect(event, this.visibleOptions[index]);\n        }\n      }\n    },\n    scrollInView: function scrollInView() {\n      var _this16 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      this.$nextTick(function () {\n        var id = index !== -1 ? \"\".concat(_this16.id, \"_\").concat(index) : _this16.focusedOptionId;\n        var element = findSingle(_this16.list, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n        if (element) {\n          element.scrollIntoView && element.scrollIntoView({\n            block: 'nearest',\n            inline: 'nearest',\n            behavior: 'smooth'\n          });\n        } else if (!_this16.virtualScrollerDisabled) {\n          _this16.virtualScroller && _this16.virtualScroller.scrollToIndex(index !== -1 ? index : _this16.focusedOptionIndex);\n        }\n      });\n    },\n    autoUpdateModel: function autoUpdateModel() {\n      if (this.selectOnFocus && this.autoOptionFocus && !this.$filled && !this.multiple && this.focused) {\n        this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n        this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex]);\n      }\n    },\n    updateModel: function updateModel(event, value) {\n      this.writeValue(value, event);\n      this.$emit('change', {\n        originalEvent: event,\n        value: value\n      });\n    },\n    listRef: function listRef(el, contentRef) {\n      this.list = el;\n      contentRef && contentRef(el); // For VirtualScroller\n    },\n    virtualScrollerRef: function virtualScrollerRef(el) {\n      this.virtualScroller = el;\n    }\n  },\n  computed: {\n    optionsListFlat: function optionsListFlat() {\n      return this.filterValue ? FilterService.filter(this.options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : this.options;\n    },\n    optionsListGroup: function optionsListGroup() {\n      var _this17 = this;\n      var filteredOptions = [];\n      (this.options || []).forEach(function (optionGroup) {\n        var optionGroupChildren = _this17.getOptionGroupChildren(optionGroup) || [];\n        var filteredChildren = _this17.filterValue ? FilterService.filter(optionGroupChildren, _this17.searchFields, _this17.filterValue, _this17.filterMatchMode, _this17.filterLocale) : optionGroupChildren;\n        if (filteredChildren !== null && filteredChildren !== void 0 && filteredChildren.length) {\n          filteredOptions.push.apply(filteredOptions, [{\n            optionGroup: optionGroup,\n            group: true\n          }].concat(_toConsumableArray(filteredChildren)));\n        }\n      });\n      return filteredOptions;\n    },\n    visibleOptions: function visibleOptions() {\n      return this.optionGroupLabel ? this.optionsListGroup : this.optionsListFlat;\n    },\n    // @deprecated use $filled instead\n    hasSelectedOption: function hasSelectedOption() {\n      return isNotEmpty(this.d_value);\n    },\n    equalityKey: function equalityKey() {\n      return this.optionValue ? null : this.dataKey;\n    },\n    searchFields: function searchFields() {\n      return this.filterFields || [this.optionLabel];\n    },\n    filterResultMessageText: function filterResultMessageText() {\n      return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n    },\n    filterMessageText: function filterMessageText() {\n      return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n    },\n    emptyFilterMessageText: function emptyFilterMessageText() {\n      return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n    },\n    emptyMessageText: function emptyMessageText() {\n      return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n    },\n    selectionMessageText: function selectionMessageText() {\n      return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n    },\n    emptySelectionMessageText: function emptySelectionMessageText() {\n      return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n    },\n    selectedMessageText: function selectedMessageText() {\n      return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedOptionIndex !== -1 ? \"\".concat(this.id, \"_\").concat(this.focusedOptionIndex) : null;\n    },\n    ariaSetSize: function ariaSetSize() {\n      var _this18 = this;\n      return this.visibleOptions.filter(function (option) {\n        return !_this18.isOptionGroup(option);\n      }).length;\n    },\n    virtualScrollerDisabled: function virtualScrollerDisabled() {\n      return !this.virtualScrollerOptions;\n    }\n  },\n  directives: {\n    ripple: Ripple\n  },\n  components: {\n    InputText: InputText,\n    VirtualScroller: VirtualScroller,\n    InputIcon: InputIcon,\n    IconField: IconField,\n    SearchIcon: SearchIcon,\n    CheckIcon: CheckIcon,\n    BlankIcon: BlankIcon\n  }\n};\nvar _hoisted_1 = [\"id\"];\nvar _hoisted_2 = [\"tabindex\"];\nvar _hoisted_3 = [\"id\", \"aria-multiselectable\", \"aria-label\", \"aria-labelledby\", \"aria-activedescendant\", \"aria-disabled\"];\nvar _hoisted_4 = [\"id\"];\nvar _hoisted_5 = [\"id\", \"aria-label\", \"aria-selected\", \"aria-disabled\", \"aria-setsize\", \"aria-posinset\", \"onClick\", \"onMousedown\", \"onMousemove\", \"onDblclick\", \"data-p-selected\", \"data-p-focused\", \"data-p-disabled\"];\nvar _hoisted_6 = [\"tabindex\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_InputText = resolveComponent(\"InputText\");\n  var _component_SearchIcon = resolveComponent(\"SearchIcon\");\n  var _component_InputIcon = resolveComponent(\"InputIcon\");\n  var _component_IconField = resolveComponent(\"IconField\");\n  var _component_CheckIcon = resolveComponent(\"CheckIcon\");\n  var _component_BlankIcon = resolveComponent(\"BlankIcon\");\n  var _component_VirtualScroller = resolveComponent(\"VirtualScroller\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    id: $data.id,\n    \"class\": _ctx.cx('root'),\n    onFocusout: _cache[7] || (_cache[7] = function () {\n      return $options.onFocusout && $options.onFocusout.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [createElementVNode(\"span\", mergeProps({\n    ref: \"firstHiddenFocusableElement\",\n    role: \"presentation\",\n    \"aria-hidden\": \"true\",\n    \"class\": \"p-hidden-accessible p-hidden-focusable\",\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFirstHiddenFocus && $options.onFirstHiddenFocus.apply($options, arguments);\n    })\n  }, _ctx.ptm('hiddenFirstFocusableEl'), {\n    \"data-p-hidden-accessible\": true,\n    \"data-p-hidden-focusable\": true\n  }), null, 16, _hoisted_2), _ctx.$slots.header ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('header'))\n  }, [renderSlot(_ctx.$slots, \"header\", {\n    value: _ctx.d_value,\n    options: $options.visibleOptions\n  })], 2)) : createCommentVNode(\"\", true), _ctx.filter ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('header')\n  }, _ctx.ptm('header')), [createVNode(_component_IconField, {\n    unstyled: _ctx.unstyled,\n    pt: _ctx.ptm('pcFilterContainer')\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(_component_InputText, {\n        modelValue: $data.filterValue,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n          return $data.filterValue = $event;\n        }),\n        type: \"text\",\n        \"class\": normalizeClass(_ctx.cx('pcFilter')),\n        placeholder: _ctx.filterPlaceholder,\n        role: \"searchbox\",\n        autocomplete: \"off\",\n        disabled: _ctx.disabled,\n        unstyled: _ctx.unstyled,\n        \"aria-owns\": $data.id + '_list',\n        \"aria-activedescendant\": $options.focusedOptionId,\n        tabindex: !_ctx.disabled && !$data.focused ? _ctx.tabindex : -1,\n        onInput: $options.onFilterChange,\n        onBlur: $options.onFilterBlur,\n        onKeydown: $options.onFilterKeyDown,\n        pt: _ctx.ptm('pcFilter')\n      }, null, 8, [\"modelValue\", \"class\", \"placeholder\", \"disabled\", \"unstyled\", \"aria-owns\", \"aria-activedescendant\", \"tabindex\", \"onInput\", \"onBlur\", \"onKeydown\", \"pt\"]), createVNode(_component_InputIcon, {\n        unstyled: _ctx.unstyled,\n        pt: _ctx.ptm('pcFilterIconContainer')\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"filtericon\", {}, function () {\n            return [_ctx.filterIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n              key: 0,\n              \"class\": _ctx.filterIcon\n            }, _ctx.ptm('filterIcon')), null, 16)) : (openBlock(), createBlock(_component_SearchIcon, normalizeProps(mergeProps({\n              key: 1\n            }, _ctx.ptm('filterIcon'))), null, 16))];\n          })];\n        }),\n        _: 3\n      }, 8, [\"unstyled\", \"pt\"])];\n    }),\n    _: 3\n  }, 8, [\"unstyled\", \"pt\"]), createElementVNode(\"span\", mergeProps({\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenFilterResult'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.filterResultMessageText), 17)], 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('listContainer'),\n    style: [{\n      'max-height': $options.virtualScrollerDisabled ? _ctx.scrollHeight : ''\n    }, _ctx.listStyle]\n  }, _ctx.ptm('listContainer')), [createVNode(_component_VirtualScroller, mergeProps({\n    ref: $options.virtualScrollerRef\n  }, _ctx.virtualScrollerOptions, {\n    items: $options.visibleOptions,\n    style: [{\n      height: _ctx.scrollHeight\n    }, _ctx.listStyle],\n    tabindex: -1,\n    disabled: $options.virtualScrollerDisabled,\n    pt: _ctx.ptm('virtualScroller')\n  }), createSlots({\n    content: withCtx(function (_ref) {\n      var styleClass = _ref.styleClass,\n        contentRef = _ref.contentRef,\n        items = _ref.items,\n        getItemOptions = _ref.getItemOptions,\n        contentStyle = _ref.contentStyle,\n        itemSize = _ref.itemSize;\n      return [createElementVNode(\"ul\", mergeProps({\n        ref: function ref(el) {\n          return $options.listRef(el, contentRef);\n        },\n        id: $data.id + '_list',\n        \"class\": [_ctx.cx('list'), styleClass],\n        style: contentStyle,\n        tabindex: -1,\n        role: \"listbox\",\n        \"aria-multiselectable\": _ctx.multiple,\n        \"aria-label\": _ctx.ariaLabel,\n        \"aria-labelledby\": _ctx.ariaLabelledby,\n        \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n        \"aria-disabled\": _ctx.disabled,\n        onFocus: _cache[3] || (_cache[3] = function () {\n          return $options.onListFocus && $options.onListFocus.apply($options, arguments);\n        }),\n        onBlur: _cache[4] || (_cache[4] = function () {\n          return $options.onListBlur && $options.onListBlur.apply($options, arguments);\n        }),\n        onKeydown: _cache[5] || (_cache[5] = function () {\n          return $options.onListKeyDown && $options.onListKeyDown.apply($options, arguments);\n        })\n      }, _ctx.ptm('list')), [(openBlock(true), createElementBlock(Fragment, null, renderList(items, function (option, i) {\n        return openBlock(), createElementBlock(Fragment, {\n          key: $options.getOptionRenderKey(option, $options.getOptionIndex(i, getItemOptions))\n        }, [$options.isOptionGroup(option) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n          key: 0,\n          id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n          style: {\n            height: itemSize ? itemSize + 'px' : undefined\n          },\n          \"class\": _ctx.cx('optionGroup'),\n          role: \"option\",\n          ref_for: true\n        }, _ctx.ptm('optionGroup')), [renderSlot(_ctx.$slots, \"optiongroup\", {\n          option: option.optionGroup,\n          index: $options.getOptionIndex(i, getItemOptions)\n        }, function () {\n          return [createTextVNode(toDisplayString($options.getOptionGroupLabel(option.optionGroup)), 1)];\n        })], 16, _hoisted_4)) : withDirectives((openBlock(), createElementBlock(\"li\", mergeProps({\n          key: 1,\n          id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n          style: {\n            height: itemSize ? itemSize + 'px' : undefined\n          },\n          \"class\": _ctx.cx('option', {\n            option: option,\n            index: i,\n            getItemOptions: getItemOptions\n          }),\n          role: \"option\",\n          \"aria-label\": $options.getOptionLabel(option),\n          \"aria-selected\": $options.isSelected(option),\n          \"aria-disabled\": $options.isOptionDisabled(option),\n          \"aria-setsize\": $options.ariaSetSize,\n          \"aria-posinset\": $options.getAriaPosInset($options.getOptionIndex(i, getItemOptions)),\n          onClick: function onClick($event) {\n            return $options.onOptionSelect($event, option, $options.getOptionIndex(i, getItemOptions));\n          },\n          onMousedown: function onMousedown($event) {\n            return $options.onOptionMouseDown($event, $options.getOptionIndex(i, getItemOptions));\n          },\n          onMousemove: function onMousemove($event) {\n            return $options.onOptionMouseMove($event, $options.getOptionIndex(i, getItemOptions));\n          },\n          onTouchend: _cache[2] || (_cache[2] = function ($event) {\n            return $options.onOptionTouchEnd();\n          }),\n          onDblclick: function onDblclick($event) {\n            return $options.onOptionDblClick($event, option);\n          },\n          ref_for: true\n        }, $options.getPTOptions(option, getItemOptions, i, 'option'), {\n          \"data-p-selected\": $options.isSelected(option),\n          \"data-p-focused\": $data.focusedOptionIndex === $options.getOptionIndex(i, getItemOptions),\n          \"data-p-disabled\": $options.isOptionDisabled(option)\n        }), [_ctx.checkmark ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [$options.isSelected(option) ? (openBlock(), createBlock(_component_CheckIcon, mergeProps({\n          key: 0,\n          \"class\": _ctx.cx('optionCheckIcon'),\n          ref_for: true\n        }, _ctx.ptm('optionCheckIcon')), null, 16, [\"class\"])) : (openBlock(), createBlock(_component_BlankIcon, mergeProps({\n          key: 1,\n          \"class\": _ctx.cx('optionBlankIcon'),\n          ref_for: true\n        }, _ctx.ptm('optionBlankIcon')), null, 16, [\"class\"]))], 64)) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"option\", {\n          option: option,\n          selected: $options.isSelected(option),\n          index: $options.getOptionIndex(i, getItemOptions)\n        }, function () {\n          return [createTextVNode(toDisplayString($options.getOptionLabel(option)), 1)];\n        })], 16, _hoisted_5)), [[_directive_ripple]])], 64);\n      }), 128)), $data.filterValue && (!items || items && items.length === 0) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n        key: 0,\n        \"class\": _ctx.cx('emptyMessage'),\n        role: \"option\"\n      }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"emptyfilter\", {}, function () {\n        return [createTextVNode(toDisplayString($options.emptyFilterMessageText), 1)];\n      })], 16)) : !_ctx.options || _ctx.options && _ctx.options.length === 0 ? (openBlock(), createElementBlock(\"li\", mergeProps({\n        key: 1,\n        \"class\": _ctx.cx('emptyMessage'),\n        role: \"option\"\n      }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n        return [createTextVNode(toDisplayString($options.emptyMessageText), 1)];\n      })], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_3)];\n    }),\n    _: 2\n  }, [_ctx.$slots.loader ? {\n    name: \"loader\",\n    fn: withCtx(function (_ref2) {\n      var options = _ref2.options;\n      return [renderSlot(_ctx.$slots, \"loader\", {\n        options: options\n      })];\n    }),\n    key: \"0\"\n  } : undefined]), 1040, [\"items\", \"style\", \"disabled\", \"pt\"])], 16), renderSlot(_ctx.$slots, \"footer\", {\n    value: _ctx.d_value,\n    options: $options.visibleOptions\n  }), !_ctx.options || _ctx.options && _ctx.options.length === 0 ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 2,\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenEmptyMessage'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.emptyMessageText), 17)) : createCommentVNode(\"\", true), createElementVNode(\"span\", mergeProps({\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenSelectedMessage'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.selectedMessageText), 17), createElementVNode(\"span\", mergeProps({\n    ref: \"lastHiddenFocusableElement\",\n    role: \"presentation\",\n    \"aria-hidden\": \"true\",\n    \"class\": \"p-hidden-accessible p-hidden-focusable\",\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    onFocus: _cache[6] || (_cache[6] = function () {\n      return $options.onLastHiddenFocus && $options.onLastHiddenFocus.apply($options, arguments);\n    })\n  }, _ctx.ptm('hiddenLastFocusableEl'), {\n    \"data-p-hidden-accessible\": true,\n    \"data-p-hidden-focusable\": true\n  }), null, 16, _hoisted_6)], 16, _hoisted_1);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseEditableHolder","props","options","Array","optionLabel","optionValue","optionDisabled","optionGroupLabel","optionGroupChildren","listStyle","scrollHeight","type","String","dataKey","multiple","Boolean","metaKeySelection","filter","filterPlaceholder","filterLocale","filterMatchMode","filterFields","virtualScrollerOptions","Object","autoOptionFocus","selectOnFocus","focusOnHover","highlightOnSelect","checkmark","filterMessage","selectionMessage","emptySelectionMessage","emptyFilterMessage","emptyMessage","filterIcon","undefined","striped","tabindex","Number","ariaLabel","ariaLabelledby","style","ListboxStyle","provide","$pcListbox","$parentInstance","script","inheritAttrs","emits","list","virtualScroller","optionTouched","startRangeIndex","searchTimeout","searchValue","data","id","$attrs","filterValue","focused","focusedOptionIndex","watch","$attrsId","newValue","UniqueComponentId","autoUpdateModel","mounted","methods","getOptionIndex","index","fn","virtualScrollerDisabled","getOptionLabel","option","resolveFieldData","getOptionValue","getOptionRenderKey","getPTOptions","itemOptions","key","ptm","context","selected","isSelected","disabled","isOptionDisabled","isOptionGroup","optionGroup","group","getOptionGroupLabel","getOptionGroupChildren","getAriaPosInset","_this","visibleOptions","slice","length","onFirstHiddenFocus","focus","firstFocusableEl","getFirstFocusableElement","$el","$refs","lastHiddenFocusableElement","tabIndex","isElement","firstHiddenFocusableElement","onLastHiddenFocus","event","relatedTarget","onFocusout","contains","onListFocus","findFirstFocusedOptionIndex","findSelectedOptionIndex","$emit","onListBlur","onListKeyDown","_this2","metaKey","ctrlKey","code","onArrowDownKey","onArrowUpKey","onHomeKey","onEndKey","onPageDownKey","onPageUpKey","onSpaceKey","onShiftKey","value","isValidOption","map","updateModel","preventDefault","isPrintableCharacter","searchOptions","onOptionSelect","arguments","onOptionSelectMultiple","onOptionSelectSingle","onOptionMouseDown","changeFocusedOptionIndex","onOptionMouseMove","onOptionTouchEnd","onOptionDblClick","item","originalEvent","valueChanged","metaSelection","removeOption","d_value","concat","_toConsumableArray","onOptionSelectRange","_this3","start","end","findNearestSelectedOptionIndex","rangeStart","Math","min","rangeEnd","max","onFilterChange","target","onFilterBlur","onFilterKeyDown","onArrowLeftKey","onEnterKey","optionIndex","findNextOptionIndex","shiftKey","findPrevOptionIndex","findLastFocusedOptionIndex","pressedInInputText","currentTarget","setSelectionRange","selectionStart","findFirstOptionIndex","len","findLastOptionIndex","scrollInView","isOptionMatched","_this$getOptionLabel","toLocaleLowerCase","startsWith","isNotEmpty","isValidSelectedOption","isEquals","value1","value2","equals","equalityKey","_this4","some","_this5","findIndex","_this6","findLastIndex","_this7","matchedOptionIndex","_this8","_this9","$filled","_loop","v","_ret","findFirstSelectedOptionIndex","_this10","findLastSelectedOptionIndex","_this11","findNextSelectedOptionIndex","_this12","findPrevSelectedOptionIndex","_this13","firstCheckUp","selectedIndex","_char","_this14","clearTimeout","setTimeout","_this15","val","_this16","$nextTick","focusedOptionId","element","findSingle","scrollIntoView","block","inline","behavior","scrollToIndex","writeValue","listRef","el","contentRef","virtualScrollerRef","computed","optionsListFlat","FilterService","searchFields","optionsListGroup","_this17","filteredOptions","forEach","filteredChildren","push","apply","hasSelectedOption","filterResultMessageText","filterMessageText","replaceAll","emptyFilterMessageText","$primevue","config","locale","searchMessage","emptySearchMessage","emptyMessageText","selectionMessageText","emptySelectionMessageText","selectedMessageText","ariaSetSize","_this18","directives","ripple","Ripple","components","InputText","VirtualScroller","InputIcon","IconField","SearchIcon","CheckIcon","BlankIcon","openBlock","createElementBlock","mergeProps","$data","_ctx","cx","_cache","$options","ptmi","createElementVNode","ref","role","onFocus","$slots","header","normalizeClass","renderSlot","createVNode","_component_IconField","unstyled","pt","_component_InputText","$event","placeholder","autocomplete","onInput","onBlur","onKeydown","_component_InputIcon","createBlock","_component_SearchIcon","normalizeProps","createCommentVNode","_component_VirtualScroller","items","height","content","withCtx","_ref","styleClass","getItemOptions","contentStyle","itemSize","Fragment","renderList","i","createTextVNode","toDisplayString","withDirectives","onClick","onMousedown","onMousemove","onTouchend","onDblclick","_component_CheckIcon","_component_BlankIcon","loader","_ref2"],"sources":["../../src/listbox/BaseListbox.vue","../../src/listbox/Listbox.vue","../../src/listbox/Listbox.vue?vue&type=template&id=eaa09184&lang.js"],"sourcesContent":["<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ListboxStyle from 'primevue/listbox/style';\n\nexport default {\n    name: 'BaseListbox',\n    extends: BaseEditableHolder,\n    props: {\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n        listStyle: null,\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        dataKey: null,\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: false\n        },\n        filter: Boolean,\n        filterPlaceholder: String,\n        filterLocale: String,\n        filterMatchMode: {\n            type: String,\n            default: 'contains'\n        },\n        filterFields: {\n            type: Array,\n            default: null\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: true\n        },\n        selectOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnSelect: {\n            type: Boolean,\n            default: true\n        },\n        checkmark: {\n            type: Boolean,\n            default: false\n        },\n        filterMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptyFilterMessage: {\n            type: String,\n            default: null\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        filterIcon: {\n            type: String,\n            default: undefined\n        },\n        striped: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: ListboxStyle,\n    provide() {\n        return {\n            $pcListbox: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :id=\"id\" :class=\"cx('root')\" @focusout=\"onFocusout\" v-bind=\"ptmi('root')\">\n        <span\n            ref=\"firstHiddenFocusableElement\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            class=\"p-hidden-accessible p-hidden-focusable\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            @focus=\"onFirstHiddenFocus\"\n            v-bind=\"ptm('hiddenFirstFocusableEl')\"\n            :data-p-hidden-accessible=\"true\"\n            :data-p-hidden-focusable=\"true\"\n        ></span>\n        <div v-if=\"$slots.header\" :class=\"cx('header')\">\n            <slot name=\"header\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n        </div>\n        <div v-if=\"filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <IconField :unstyled=\"unstyled\" :pt=\"ptm('pcFilterContainer')\">\n                <InputText\n                    v-model=\"filterValue\"\n                    type=\"text\"\n                    :class=\"cx('pcFilter')\"\n                    :placeholder=\"filterPlaceholder\"\n                    role=\"searchbox\"\n                    autocomplete=\"off\"\n                    :disabled=\"disabled\"\n                    :unstyled=\"unstyled\"\n                    :aria-owns=\"id + '_list'\"\n                    :aria-activedescendant=\"focusedOptionId\"\n                    :tabindex=\"!disabled && !focused ? tabindex : -1\"\n                    @input=\"onFilterChange\"\n                    @blur=\"onFilterBlur\"\n                    @keydown=\"onFilterKeyDown\"\n                    :pt=\"ptm('pcFilter')\"\n                />\n                <InputIcon :unstyled=\"unstyled\" :pt=\"ptm('pcFilterIconContainer')\">\n                    <slot name=\"filtericon\">\n                        <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                        <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                    </slot>\n                </InputIcon>\n            </IconField>\n            <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                {{ filterResultMessageText }}\n            </span>\n        </div>\n        <div :class=\"cx('listContainer')\" :style=\"[{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }, listStyle]\" v-bind=\"ptm('listContainer')\">\n            <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"[{ height: scrollHeight }, listStyle]\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                    <ul\n                        :ref=\"(el) => listRef(el, contentRef)\"\n                        :id=\"id + '_list'\"\n                        :class=\"[cx('list'), styleClass]\"\n                        :style=\"contentStyle\"\n                        :tabindex=\"-1\"\n                        role=\"listbox\"\n                        :aria-multiselectable=\"multiple\"\n                        :aria-label=\"ariaLabel\"\n                        :aria-labelledby=\"ariaLabelledby\"\n                        :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                        :aria-disabled=\"disabled\"\n                        @focus=\"onListFocus\"\n                        @blur=\"onListBlur\"\n                        @keydown=\"onListKeyDown\"\n                        v-bind=\"ptm('list')\"\n                    >\n                        <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                            <li v-if=\"isOptionGroup(option)\" :id=\"id + '_' + getOptionIndex(i, getItemOptions)\" :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\" :class=\"cx('optionGroup')\" role=\"option\" v-bind=\"ptm('optionGroup')\">\n                                <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                            </li>\n                            <li\n                                v-else\n                                :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                v-ripple\n                                :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                :class=\"cx('option', { option, index: i, getItemOptions })\"\n                                role=\"option\"\n                                :aria-label=\"getOptionLabel(option)\"\n                                :aria-selected=\"isSelected(option)\"\n                                :aria-disabled=\"isOptionDisabled(option)\"\n                                :aria-setsize=\"ariaSetSize\"\n                                :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                @click=\"onOptionSelect($event, option, getOptionIndex(i, getItemOptions))\"\n                                @mousedown=\"onOptionMouseDown($event, getOptionIndex(i, getItemOptions))\"\n                                @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                @touchend=\"onOptionTouchEnd()\"\n                                @dblclick=\"onOptionDblClick($event, option)\"\n                                v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                :data-p-selected=\"isSelected(option)\"\n                                :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                :data-p-disabled=\"isOptionDisabled(option)\"\n                            >\n                                <template v-if=\"checkmark\">\n                                    <CheckIcon v-if=\"isSelected(option)\" :class=\"cx('optionCheckIcon')\" v-bind=\"ptm('optionCheckIcon')\" />\n                                    <BlankIcon v-else :class=\"cx('optionBlankIcon')\" v-bind=\"ptm('optionBlankIcon')\" />\n                                </template>\n                                <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                            </li>\n                        </template>\n                        <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                        </li>\n                        <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                        </li>\n                    </ul>\n                </template>\n                <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                    <slot name=\"loader\" :options=\"options\"></slot>\n                </template>\n            </VirtualScroller>\n        </div>\n        <slot name=\"footer\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n        <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n            {{ emptyMessageText }}\n        </span>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n            {{ selectedMessageText }}\n        </span>\n        <span\n            ref=\"lastHiddenFocusableElement\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            class=\"p-hidden-accessible p-hidden-focusable\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            @focus=\"onLastHiddenFocus\"\n            v-bind=\"ptm('hiddenLastFocusableEl')\"\n            :data-p-hidden-accessible=\"true\"\n            :data-p-hidden-focusable=\"true\"\n        ></span>\n    </div>\n</template>\n\n<script>\nimport { findSingle, focus, getFirstFocusableElement, isElement } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isNotEmpty, isPrintableCharacter, resolveFieldData } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport SearchIcon from '@primevue/icons/search';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseListbox from './BaseListbox.vue';\n\nexport default {\n    name: 'Listbox',\n    extends: BaseListbox,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'filter', 'item-dblclick', 'option-dblclick'],\n    list: null,\n    virtualScroller: null,\n    optionTouched: false,\n    startRangeIndex: -1,\n    searchTimeout: null,\n    searchValue: '',\n    data() {\n        return {\n            id: this.$attrs.id,\n            filterValue: null,\n            focused: false,\n            focusedOptionIndex: -1\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : typeof option === 'string' ? option : null;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        onFirstHiddenFocus() {\n            focus(this.list);\n\n            const firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n\n            this.$refs.lastHiddenFocusableElement.tabIndex = isElement(firstFocusableEl) ? undefined : -1;\n            this.$refs.firstHiddenFocusableElement.tabIndex = -1;\n        },\n        onLastHiddenFocus(event) {\n            const relatedTarget = event.relatedTarget;\n\n            if (relatedTarget === this.list) {\n                const firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n\n                focus(firstFocusableEl);\n                this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n            } else {\n                focus(this.$refs.firstHiddenFocusableElement);\n            }\n\n            this.$refs.lastHiddenFocusableElement.tabIndex = -1;\n        },\n        onFocusout(event) {\n            if (!this.$el.contains(event.relatedTarget) && this.$refs.lastHiddenFocusableElement && this.$refs.firstHiddenFocusableElement) {\n                this.$refs.lastHiddenFocusableElement.tabIndex = this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n            }\n        },\n        onListFocus(event) {\n            this.focused = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n            this.autoUpdateModel();\n            this.$emit('focus', event);\n        },\n        onListBlur(event) {\n            this.focused = false;\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n        },\n        onListKeyDown(event) {\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Tab':\n                    //NOOP\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    if (this.multiple && event.code === 'KeyA' && metaKey) {\n                        const value = this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                        this.updateModel(event, value);\n\n                        event.preventDefault();\n                        break;\n                    }\n\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        this.searchOptions(event, event.key);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onOptionSelect(event, option, index = -1) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            this.multiple ? this.onOptionSelectMultiple(event, option) : this.onOptionSelectSingle(event, option);\n            this.optionTouched = false;\n            index !== -1 && (this.focusedOptionIndex = index);\n        },\n        onOptionMouseDown(event, index) {\n            this.changeFocusedOptionIndex(event, index);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover && this.focused) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionTouchEnd() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.optionTouched = true;\n        },\n        onOptionDblClick(event, item) {\n            this.$emit('item-dblclick', {\n                originalEvent: event,\n                value: item\n            });\n            this.$emit('option-dblclick', {\n                originalEvent: event,\n                value: item\n            });\n        },\n        onOptionSelectSingle(event, option) {\n            let selected = this.isSelected(option);\n            let valueChanged = false;\n            let value = null;\n            let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n\n            if (metaSelection) {\n                let metaKey = event && (event.metaKey || event.ctrlKey);\n\n                if (selected) {\n                    if (metaKey) {\n                        value = null;\n                        valueChanged = true;\n                    }\n                } else {\n                    value = this.getOptionValue(option);\n                    valueChanged = true;\n                }\n            } else {\n                value = selected ? null : this.getOptionValue(option);\n                valueChanged = true;\n            }\n\n            if (valueChanged) {\n                this.updateModel(event, value);\n            }\n        },\n        onOptionSelectMultiple(event, option) {\n            let selected = this.isSelected(option);\n            let value = null;\n            let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n\n            if (metaSelection) {\n                let metaKey = event.metaKey || event.ctrlKey;\n\n                if (selected) {\n                    value = metaKey ? this.removeOption(option) : [this.getOptionValue(option)];\n                } else {\n                    value = metaKey ? this.d_value || [] : [];\n                    value = [...value, this.getOptionValue(option)];\n                }\n            } else {\n                value = selected ? this.removeOption(option) : [...(this.d_value || []), this.getOptionValue(option)];\n            }\n\n            this.updateModel(event, value);\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onFilterChange(event) {\n            this.$emit('filter', { originalEvent: event, value: event.target.value, filterValue: this.visibleOptions });\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.findFirstFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.findLastFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n            event.preventDefault();\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findFirstOptionIndex();\n\n                if (this.multiple && event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findLastOptionIndex();\n\n                if (this.multiple && event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                if (this.multiple && event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);\n                else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n        },\n        onSpaceKey(event) {\n            event.preventDefault();\n            this.onEnterKey(event);\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            if (this.multiple) return (this.d_value || []).some((value) => this.isEquals(value, optionValue));\n            else return this.isEquals(this.d_value, optionValue);\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            if (this.$filled) {\n                if (this.multiple) {\n                    for (let index = this.d_value.length - 1; index >= 0; index--) {\n                        const value = this.d_value[index];\n                        const matchedOptionIndex = this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option) && this.isEquals(value, this.getOptionValue(option)));\n\n                        if (matchedOptionIndex > -1) return matchedOptionIndex;\n                    }\n                } else {\n                    return this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option));\n                }\n            }\n\n            return -1;\n        },\n        findFirstSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findLastSelectedOptionIndex() {\n            return this.$filled ? findLastIndex(this.visibleOptions, (option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.$filled) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findFirstSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findLastSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let optionIndex = -1;\n\n            if (isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n        },\n        removeOption(option) {\n            return this.d_value.filter((val) => !equals(val, this.getOptionValue(option), this.equalityKey));\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus && !this.multiple) {\n                    this.onOptionSelect(event, this.visibleOptions[index]);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest', behavior: 'smooth' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled && !this.multiple && this.focused) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex]);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        optionsListFlat() {\n            return this.filterValue ? FilterService.filter(this.options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : this.options;\n        },\n        optionsListGroup() {\n            const filteredOptions = [];\n\n            (this.options || []).forEach((optionGroup) => {\n                const optionGroupChildren = this.getOptionGroupChildren(optionGroup) || [];\n                const filteredChildren = this.filterValue ? FilterService.filter(optionGroupChildren, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : optionGroupChildren;\n\n                if (filteredChildren?.length) {\n                    filteredOptions.push({ optionGroup, group: true }, ...filteredChildren);\n                }\n            });\n\n            return filteredOptions;\n        },\n        visibleOptions() {\n            return this.optionGroupLabel ? this.optionsListGroup : this.optionsListFlat;\n        },\n        // @deprecated use $filled instead\n        hasSelectedOption() {\n            return isNotEmpty(this.d_value);\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        filterResultMessageText() {\n            return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        InputIcon,\n        IconField,\n        SearchIcon,\n        CheckIcon,\n        BlankIcon\n    }\n};\n</script>\n","<template>\n    <div :id=\"id\" :class=\"cx('root')\" @focusout=\"onFocusout\" v-bind=\"ptmi('root')\">\n        <span\n            ref=\"firstHiddenFocusableElement\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            class=\"p-hidden-accessible p-hidden-focusable\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            @focus=\"onFirstHiddenFocus\"\n            v-bind=\"ptm('hiddenFirstFocusableEl')\"\n            :data-p-hidden-accessible=\"true\"\n            :data-p-hidden-focusable=\"true\"\n        ></span>\n        <div v-if=\"$slots.header\" :class=\"cx('header')\">\n            <slot name=\"header\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n        </div>\n        <div v-if=\"filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <IconField :unstyled=\"unstyled\" :pt=\"ptm('pcFilterContainer')\">\n                <InputText\n                    v-model=\"filterValue\"\n                    type=\"text\"\n                    :class=\"cx('pcFilter')\"\n                    :placeholder=\"filterPlaceholder\"\n                    role=\"searchbox\"\n                    autocomplete=\"off\"\n                    :disabled=\"disabled\"\n                    :unstyled=\"unstyled\"\n                    :aria-owns=\"id + '_list'\"\n                    :aria-activedescendant=\"focusedOptionId\"\n                    :tabindex=\"!disabled && !focused ? tabindex : -1\"\n                    @input=\"onFilterChange\"\n                    @blur=\"onFilterBlur\"\n                    @keydown=\"onFilterKeyDown\"\n                    :pt=\"ptm('pcFilter')\"\n                />\n                <InputIcon :unstyled=\"unstyled\" :pt=\"ptm('pcFilterIconContainer')\">\n                    <slot name=\"filtericon\">\n                        <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                        <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                    </slot>\n                </InputIcon>\n            </IconField>\n            <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                {{ filterResultMessageText }}\n            </span>\n        </div>\n        <div :class=\"cx('listContainer')\" :style=\"[{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }, listStyle]\" v-bind=\"ptm('listContainer')\">\n            <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"[{ height: scrollHeight }, listStyle]\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                    <ul\n                        :ref=\"(el) => listRef(el, contentRef)\"\n                        :id=\"id + '_list'\"\n                        :class=\"[cx('list'), styleClass]\"\n                        :style=\"contentStyle\"\n                        :tabindex=\"-1\"\n                        role=\"listbox\"\n                        :aria-multiselectable=\"multiple\"\n                        :aria-label=\"ariaLabel\"\n                        :aria-labelledby=\"ariaLabelledby\"\n                        :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                        :aria-disabled=\"disabled\"\n                        @focus=\"onListFocus\"\n                        @blur=\"onListBlur\"\n                        @keydown=\"onListKeyDown\"\n                        v-bind=\"ptm('list')\"\n                    >\n                        <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                            <li v-if=\"isOptionGroup(option)\" :id=\"id + '_' + getOptionIndex(i, getItemOptions)\" :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\" :class=\"cx('optionGroup')\" role=\"option\" v-bind=\"ptm('optionGroup')\">\n                                <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                            </li>\n                            <li\n                                v-else\n                                :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                v-ripple\n                                :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                :class=\"cx('option', { option, index: i, getItemOptions })\"\n                                role=\"option\"\n                                :aria-label=\"getOptionLabel(option)\"\n                                :aria-selected=\"isSelected(option)\"\n                                :aria-disabled=\"isOptionDisabled(option)\"\n                                :aria-setsize=\"ariaSetSize\"\n                                :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                @click=\"onOptionSelect($event, option, getOptionIndex(i, getItemOptions))\"\n                                @mousedown=\"onOptionMouseDown($event, getOptionIndex(i, getItemOptions))\"\n                                @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                @touchend=\"onOptionTouchEnd()\"\n                                @dblclick=\"onOptionDblClick($event, option)\"\n                                v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                :data-p-selected=\"isSelected(option)\"\n                                :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                :data-p-disabled=\"isOptionDisabled(option)\"\n                            >\n                                <template v-if=\"checkmark\">\n                                    <CheckIcon v-if=\"isSelected(option)\" :class=\"cx('optionCheckIcon')\" v-bind=\"ptm('optionCheckIcon')\" />\n                                    <BlankIcon v-else :class=\"cx('optionBlankIcon')\" v-bind=\"ptm('optionBlankIcon')\" />\n                                </template>\n                                <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                            </li>\n                        </template>\n                        <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                        </li>\n                        <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                        </li>\n                    </ul>\n                </template>\n                <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                    <slot name=\"loader\" :options=\"options\"></slot>\n                </template>\n            </VirtualScroller>\n        </div>\n        <slot name=\"footer\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n        <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n            {{ emptyMessageText }}\n        </span>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n            {{ selectedMessageText }}\n        </span>\n        <span\n            ref=\"lastHiddenFocusableElement\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            class=\"p-hidden-accessible p-hidden-focusable\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            @focus=\"onLastHiddenFocus\"\n            v-bind=\"ptm('hiddenLastFocusableEl')\"\n            :data-p-hidden-accessible=\"true\"\n            :data-p-hidden-focusable=\"true\"\n        ></span>\n    </div>\n</template>\n\n<script>\nimport { findSingle, focus, getFirstFocusableElement, isElement } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isNotEmpty, isPrintableCharacter, resolveFieldData } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport SearchIcon from '@primevue/icons/search';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseListbox from './BaseListbox.vue';\n\nexport default {\n    name: 'Listbox',\n    extends: BaseListbox,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'filter', 'item-dblclick', 'option-dblclick'],\n    list: null,\n    virtualScroller: null,\n    optionTouched: false,\n    startRangeIndex: -1,\n    searchTimeout: null,\n    searchValue: '',\n    data() {\n        return {\n            id: this.$attrs.id,\n            filterValue: null,\n            focused: false,\n            focusedOptionIndex: -1\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : typeof option === 'string' ? option : null;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        onFirstHiddenFocus() {\n            focus(this.list);\n\n            const firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n\n            this.$refs.lastHiddenFocusableElement.tabIndex = isElement(firstFocusableEl) ? undefined : -1;\n            this.$refs.firstHiddenFocusableElement.tabIndex = -1;\n        },\n        onLastHiddenFocus(event) {\n            const relatedTarget = event.relatedTarget;\n\n            if (relatedTarget === this.list) {\n                const firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n\n                focus(firstFocusableEl);\n                this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n            } else {\n                focus(this.$refs.firstHiddenFocusableElement);\n            }\n\n            this.$refs.lastHiddenFocusableElement.tabIndex = -1;\n        },\n        onFocusout(event) {\n            if (!this.$el.contains(event.relatedTarget) && this.$refs.lastHiddenFocusableElement && this.$refs.firstHiddenFocusableElement) {\n                this.$refs.lastHiddenFocusableElement.tabIndex = this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n            }\n        },\n        onListFocus(event) {\n            this.focused = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n            this.autoUpdateModel();\n            this.$emit('focus', event);\n        },\n        onListBlur(event) {\n            this.focused = false;\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n        },\n        onListKeyDown(event) {\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Tab':\n                    //NOOP\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    if (this.multiple && event.code === 'KeyA' && metaKey) {\n                        const value = this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                        this.updateModel(event, value);\n\n                        event.preventDefault();\n                        break;\n                    }\n\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        this.searchOptions(event, event.key);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onOptionSelect(event, option, index = -1) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            this.multiple ? this.onOptionSelectMultiple(event, option) : this.onOptionSelectSingle(event, option);\n            this.optionTouched = false;\n            index !== -1 && (this.focusedOptionIndex = index);\n        },\n        onOptionMouseDown(event, index) {\n            this.changeFocusedOptionIndex(event, index);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover && this.focused) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionTouchEnd() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.optionTouched = true;\n        },\n        onOptionDblClick(event, item) {\n            this.$emit('item-dblclick', {\n                originalEvent: event,\n                value: item\n            });\n            this.$emit('option-dblclick', {\n                originalEvent: event,\n                value: item\n            });\n        },\n        onOptionSelectSingle(event, option) {\n            let selected = this.isSelected(option);\n            let valueChanged = false;\n            let value = null;\n            let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n\n            if (metaSelection) {\n                let metaKey = event && (event.metaKey || event.ctrlKey);\n\n                if (selected) {\n                    if (metaKey) {\n                        value = null;\n                        valueChanged = true;\n                    }\n                } else {\n                    value = this.getOptionValue(option);\n                    valueChanged = true;\n                }\n            } else {\n                value = selected ? null : this.getOptionValue(option);\n                valueChanged = true;\n            }\n\n            if (valueChanged) {\n                this.updateModel(event, value);\n            }\n        },\n        onOptionSelectMultiple(event, option) {\n            let selected = this.isSelected(option);\n            let value = null;\n            let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n\n            if (metaSelection) {\n                let metaKey = event.metaKey || event.ctrlKey;\n\n                if (selected) {\n                    value = metaKey ? this.removeOption(option) : [this.getOptionValue(option)];\n                } else {\n                    value = metaKey ? this.d_value || [] : [];\n                    value = [...value, this.getOptionValue(option)];\n                }\n            } else {\n                value = selected ? this.removeOption(option) : [...(this.d_value || []), this.getOptionValue(option)];\n            }\n\n            this.updateModel(event, value);\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onFilterChange(event) {\n            this.$emit('filter', { originalEvent: event, value: event.target.value, filterValue: this.visibleOptions });\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.findFirstFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.findLastFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n            event.preventDefault();\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findFirstOptionIndex();\n\n                if (this.multiple && event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findLastOptionIndex();\n\n                if (this.multiple && event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                if (this.multiple && event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);\n                else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n        },\n        onSpaceKey(event) {\n            event.preventDefault();\n            this.onEnterKey(event);\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            if (this.multiple) return (this.d_value || []).some((value) => this.isEquals(value, optionValue));\n            else return this.isEquals(this.d_value, optionValue);\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            if (this.$filled) {\n                if (this.multiple) {\n                    for (let index = this.d_value.length - 1; index >= 0; index--) {\n                        const value = this.d_value[index];\n                        const matchedOptionIndex = this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option) && this.isEquals(value, this.getOptionValue(option)));\n\n                        if (matchedOptionIndex > -1) return matchedOptionIndex;\n                    }\n                } else {\n                    return this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option));\n                }\n            }\n\n            return -1;\n        },\n        findFirstSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findLastSelectedOptionIndex() {\n            return this.$filled ? findLastIndex(this.visibleOptions, (option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.$filled) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findFirstSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findLastSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let optionIndex = -1;\n\n            if (isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n        },\n        removeOption(option) {\n            return this.d_value.filter((val) => !equals(val, this.getOptionValue(option), this.equalityKey));\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus && !this.multiple) {\n                    this.onOptionSelect(event, this.visibleOptions[index]);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest', behavior: 'smooth' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled && !this.multiple && this.focused) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex]);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        optionsListFlat() {\n            return this.filterValue ? FilterService.filter(this.options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : this.options;\n        },\n        optionsListGroup() {\n            const filteredOptions = [];\n\n            (this.options || []).forEach((optionGroup) => {\n                const optionGroupChildren = this.getOptionGroupChildren(optionGroup) || [];\n                const filteredChildren = this.filterValue ? FilterService.filter(optionGroupChildren, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : optionGroupChildren;\n\n                if (filteredChildren?.length) {\n                    filteredOptions.push({ optionGroup, group: true }, ...filteredChildren);\n                }\n            });\n\n            return filteredOptions;\n        },\n        visibleOptions() {\n            return this.optionGroupLabel ? this.optionsListGroup : this.optionsListFlat;\n        },\n        // @deprecated use $filled instead\n        hasSelectedOption() {\n            return isNotEmpty(this.d_value);\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        filterResultMessageText() {\n            return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        InputIcon,\n        IconField,\n        SearchIcon,\n        CheckIcon,\n        BlankIcon\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}